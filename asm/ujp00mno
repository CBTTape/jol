           TITLE 'JOL PREPROCESSOR MAIN LINE'                           00010000
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1971,1972,1973,1974            00020000
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1976                           00030005
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1980                           00040006
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1981                           00050006
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1982                           00060006
* REFER TO INSTRUCTIONS ON COPYRIGHT NOTICE FORM NO CCS-C001.           00070000
           SPACE 3                                                      00080000
*                   J             000000            L                   00090000
*                   J            0      0           L                   00100000
*                   J           0        0          L                   00110000
*                   J          0          0         L                   00120000
*                   J         0            0        L                   00130000
*                   J         0            0        L                   00140000
*                   J         0            0        L                   00150000
*                   J         0            0        L                   00160000
*                   J         0            0        L                   00170000
*                   J         0            0        L                   00180000
*                   J         0            0        L                   00190000
*        J          J         0            0        L                   00200000
*         J        J           0          0         L                   00210000
*          J      J             0        0          L                   00220000
*           J    J               0      0           L                   00230000
*            JJJJ                 000000            LLLLLLLLLLL         00240000
         SPACE 3                                                        00250000
* NEW CODE IS INTRODUCED FOR VERSION 3.2. BASICALLY, THE CODE     76200 00260000
*  MERELY COPIES ANY JCL STRAIGHT THROUGH TO THE JCL FILE         76200 00270000
*  IF THE CLASS ON THE JOB CARD IS NOT THE SAME AS THAT           76200 00280000
*  SPECIFIED IN THE JOLGEN.                                       76200 00290000
*                                                                 76200 00300000
* THIS MEANS THAT JOL CAN BE USED :-                              76200 00310000
*  1. AS A HASP/JES2 EXECUTOR                                     76200 00320000
*  2. AS A STARTED TASK READING DIRECTLY FROM A CARD READER       76200 00330000
*  3. AS A STARTED TASK READING AS AN INITIATOR                   76200 00340000
*CHANGES AFFECT UJP52CHR AND ARE CALLED CHNG30200 FOR CLARITY     76200 00350000
* OTHER CHANGES HAVE ALSO BEEN MADE IN THE MAIN JOL ROUTINE.      76200 00360000
* IT WILL:-                                                       76200 00370000
*  1. ATTEMPT TO READ PAST EOF ON SYSIN IF REQUESTED              76200 00380000
*  2. CLOSE THE PRINTER (CLOSE=FREE ON JCL) SO THAT THE           76200 00390000
*     PRINTS OF ANY JOL JOB WILL BE DONE EVEN IF JOL              76200 00400000
*     NEVER ENDS                                                  76200 00410000
         EJECT                                                    76200 00420000
           SPACE 3                                                      00430000
         PRINT DATA                                               75128 00440000
           JOLSAVE CSECT=UJP00MN                                        00450000
           $CALL   UJP00MN2                                             00460006
           LR      R5,R15                                               00470006
           $CALL   UJP15DAL                                             00480006
           LR      R15,R5                                               00490006
           JOLRETN RC=(15)                                              00500006
           JOLSAVE CSECT=UJP00MN2                                       00510000
* THIS IS THE MAIN CONTROLLING MODULE OF THE PREPROCESSOR STAGE OF JOL  00520000
           USING JOLCOM,R2                                              00530000
* NOW WE MUST INITIALISE THE ODD VARIABLE OR TWO                        00540000
         MVC   LINECNT,=X'7FFF' SET LINE-COUNT HIGH FOR PRINT RTN 75128 00550000
         L  R1,AP52DCBS                                                 00560000
         USING P52DCBS,R1                                               00570000
         L     R14,ASYSIN     LOAD ADDRESS OF SYSIN DCB           75128 00580000
           ST  R14,CURRDCB                                              00590000
           CLEAR SAVECARD,FILENO,CURRBLKS,ACURREC                 74303 00600000
           L R1,ASYMTBL                                                 00610000
           XC 0(12,R1),0(R1)  CLEAR FIRST TABLE ENTRY     75003         00620000
           DROP R1                                                      00630000
           SPACE 3                                                      00640000
           L   R3,ATKN1                        ADDRESS TOKEN1           00650000
           USING TKNX,R3                                                00660000
         L     R1,AJOLGEN                                         75128 00670000
         USING GENDETS,R1                                         75128 00680000
      CLEAR LEVEL,NEST,NOSYMS,RORGSYMT,TOTSYMS,PARMSRCH,COND,     75311*00690000
               MACACCES,TOTCRDS,SYSINMDE,P50SAVEF,STMT,           75128*00700000
               INCHAR,INLINENO,PRINTIND,ISMACRO,#STRING,STRING    75128 00710000
         MVI   COND,C'T'                                                00720000
         MVC   DEFAULTS(255),DEFCOPY SHIFT COPY OF DEFAULTS       75311 00730000
         MVC  DEFAULTS+255(LDEFAULT-255),DEFCOPY+255              75311 00740000
*                             BACK TO MAIN DEFAULT AREA AS THEY   75128 00750000
*                             MAY HAVE BEEN CHANGED BY * JOL      75128 00760000
         SPACE 1                                                        00770000
* NOW WE SHALL SOME ADDRESS CONSTANTS SO THAT DYNAMICALLY         75128 00780000
*  LOADED ROUTINES CAN GET A VARIOUS MODULES WITHOUT THEM HAVING  75128 00790000
*  TO BE LINKED IN                                                75128 00800000
         SPACE 1                                                  75128 00810000
         MVC   AUJP02,=V(UJP02DCL)                                75128 00820000
         MVC   AUJP85,=V(UJP85ASN)                                75128 00830000
         MVC   AUJP98,=V(UJP98OP)                                 75128 00840000
         MVC   AUJS21,=V(UJS21FNC)                                75128 00850000
      WXTRN  UJS21FNC                                             76200 00860000
         MVC   AUJP90,=V(UJP90OP)                                 75128 00870000
         MVC   AUJS20,=V(UJS20REP)                                75128 00880000
           $LINK UJP93DTE    SET UP %DATE ETC                     75128 00890000
         SPACE 1                                                  75128 00900000
           L   R1,APARM       LOAD POINTER TO JOL'S PARM        80290   00910000
           L   R1,0(R1)       LOAD THE ADDRESS OF JOL'S PARM    80290   00920005
           LA  R1,0(R1)       DROP HIGH ORDER BITS              80290   00930006
           LR  R0,R1          PUT IT IN R0                      80290   00940006
           LA  R1,#TKNSTRG    ADDRESS TO MOVE IT TOO            80290   00950000
           BAL R14,MOVEDATA   SHIFT IT TO TKNSTRG               80290   00960000
         $LINK UJP95INI       SET UP OPTIONS FROM PARM FIELD      75128 00970000
*                              AND FIX UP SYMBOLIC PARAMETERS           00980000
           $LINK  UJP94INI       SET UP %SYSTEM ETC                     00990000
           B   P00DCDPM                                                 01000000
P00EOF   JOLERR 401,'NO STATEMENTS FOUND TO EXECUTE'                    01010000
P00RETNF   EQU *                                                        01020000
*                                                                       01030000
* CRITICAL ERROR HAS OCCURRED SOMEWHERE :- SKIP TILL EOF | * JOL;       01040000
*                                                                       01050000
*                                                                       01060000
         L     R1,AP52DCBS                                  FIX-X-76200 01070000
         USING P52DCBS,R1                                   FIX-X-76200 01080000
         L     R14,ASYSIN     LOAD SYSIN DCB                FIX-X-76200 01090000
         ST    R1,CURRDCB     STORE IN CURRENT DCB          FIX-X-76200 01100000
         MVI   CP,X'7F'       SET CURRENT CHAR POINTER      FIX-X-76200 01110000
*                             VERY HIGH (GET NEW CARD)      FIX-X-76200 01120000
         SPACE 2                                            FIX-X-76200 01130000
* NOW ENTER SKIP LOOP.                                      FIX-X-76200 01140000
         DROP  R1                                           FIX-X-76200 01150000
P00SKIPZ $CALL UJP50RD                                      FIX-X-76200 01160000
         B     *+4(R15)                                     FIX-X-76200 01170000
         B     P00SKIPZ       ORDINARY STMT READ            FIX-X-76200 01180000
         B     P00SKIPZ       SYSIN                         FIX-X-76200 01190000
         B     P00GOBAK      * JOL                          FIX-X-76200 01200000
         B     P00GOBAK       EOF;                          FIX-X-76200 01210000
         B     P00SKIPZ       ANOTHER ERROR                 FIX-X-76200 01220000
         SPACE 2                                            FIX-X-76200 01230000
P00GOBAK EQU   *                                            FIX-X-76200 01240000
         SPACE 3                                            FIX-X-76200 01250000
 JOLRETN RC=16                                                          01260000
P00DCDPM   EQU *                                                        01270000
* NOW WITH GREAT FORTITUDE AND AN EQUAL AMOUNT OF GUSTO GET THE VERY    01280000
*    FIRST STATEMENT OF THE POOR GUYS JOB (WHY POOR?ANYONE SO LUCKY     01290000
*    TO BE USING JOL IS INDEED LUCKY)                                   01300000
           IFVALUE CARD,P002                                            01310000
           MVI CP,X'7F'                                                 01320000
           $CALL UJP50RD          READ CARD 1                           01330000
         CH  R15,=H'8'                                            75311 01340000
         BNE P00GOTIN                                             75311 01350000
         $CALL UJP50RD        SKIP RC=8                           75311 01360000
P002     EQU   *                                                        01370000
         L     R1,APRINTLN                                              01380000
         MVC   5(80,R1),CARD  * OPTIONS CARD                      75128 01390000
         MVC   0(4,R1),=AL2(84,0)                                 75128 01400000
         MVI   4(R1),C'0'     SKIP LINE BEFORE PRINTING           75128 01410000
         JOLPRINT                                                 75128 01420000
         L     R1,APRINTLN    RELOAD ADDRESS OF PRINT BUFFER      75128 01430000
         MVI   1(R1),9        SET RECORD LENGTH TO 9              75128 01440000
         JOLPRINT             OUTPUT BLANK LINE                   75128 01450000
           MVC TITLE1,CARD                                              01460000
         $CALL UJP50RD        SET UP *JOL STMT                          01470000
         LR    R0,R2     TELLS UJP95INI NOT TO CLEAR WORK LOCNS   75128 01480000
         $LINK UJP95INI       SET UP OPTIONS FROM * JOL CARD      75128 01490000
           $LINK  UJP94INI   RESET %SYSTEM ETC AGAIN IF NEC       75128 01500000
           B P00MAIN                                              75311 01510000
* THIS IS THE MAIN LINE FOR THE PRE-PROCESSOR OF JOL                    01520000
P00SPLIT  $CALL UJSPLIT        SPLIT INTO TOKENS                  74303 01530000
           B  P00DECOD                                                  01540000
           SPACE 3                                                      01550000
*********************************************************************** 01560000
*                                                                       01570000
* A DESCRIPTION OF THE IF,ELSE ETC FOLLOWS:-                            01580000
*                                                                       01590000
*P00CLRC:                     /*AFTER ANY INSRUCTION              76200 01600000
*                               OTHER THAN DO,END,MACRO */        76200 01610000
*                                                                 76200 01620000
*          READ NEXT INSTRUCTION;                                 76200 01630000
*          IF  RC(15)>=0, GO TO NON-ZERO PROCESSING;              76200 01640000
*          IF  ELSE, DO;                                          76200 01650000
********                                                          76200 01660000
*      *                                                          76200 01670000
* ELSE *                                                          76200 01680000
*  (1) *                                                          76200 01690000
********                                                          76200 01700000
*              IF ? LOOP, OP ELSE, GO TO CLEAR-COND;              76200 01710000
*              ELSE GO TO CLEAR COND                              76200 01720000
*                                                                 76200 01730000
*         END;                                                    76200 01740000
**************                                                    76200 01750000
*             *                                                   76200 01760000
* CLEAR COND *                                                    76200 01770000
*            *                                                    76200 01780000
**************                                                    76200 01790000
*          CLEAR 0(R4) (COND)                                     76200 01800000
*          GO TO P00GOTIN;                                        76200 01810000
*                              /* 'COND' CONTAINS A SERIES OF           01820000
*                              ENTRIES INDICATING THE STATUS OF         01830000
*                              THE INSTRUCTIONS.                        01840000
*                              0(R4)='T' IF LAST IF WAS TRUE            01850000
*                              0(R4)='?' IF LAST INSTRUCTION (AND IF)   01860000
*                               WAS AN EXECUTE TIME IF                  01870000
*                                                                       01880000
*P00MAIN:                                                               01890000
*P00READ:  READ NEXT INSTRUCTION.                                       01900000
*P00GOTIN:                                                        76200 01910000
*          SET R4=((LEVEL*8)+NEST) CALC LAST COND ENTRY ADDRESS.        01920000
*******                            SO WE CAN MARK 'T' | 'Q'             01930000
*  IF *    IF PROCESSING ....                                           01940000
*******                                                                 01950000
*          IF FOUND.                                                    01960000
*                                                                       01970000
*          CALL IF_PROCESSOR                                            01980000
*              IF TRUE ? YES, 0(R4)='T', GO TO P00READ;                 01990000
*                                                                       02000000
*              IF FALSE ? YES,IF 0(R4)='?', OUTPUT 'END' TO COMPILER.   02010000
*                  CLEAR 0(R4)                                          02020000
*                  GO TO P00READ                                        02030000
*                                                                       02040000
*              IF'?' ?, YES, SET 0(R4)='?', GO TO P00READ.              02050000
*                                                                       02060000
***********                                                             02070000
*         *                                                             02080000
* NOT IF  *                                                             02090000
*         *                                                             02100000
***********                                                             02110000
*                                                                       02120000
*          ARE THERE ANY '?' IN THIS LEVEL OF 'COND' ?                  02130000
*              YES -> P00THISQ  /* IF A=0 THEN RUN TYPE STATEMENT */    02140000
*                                                                       02150000
*          IS IT AN 'ELSE' , NO -> P00TDO  /* TEST IF 'DO' */           02160000
*                                                                       02170000
********                                                                02180000
*      *                                                                02190000
* ELSE *                                                                02200000
*      *                                                                02210000
********                                                                02220000
*                                                                       02230000
*          IF COND (0(R4))='T', CLEAR IT                                02240000
*          IF  0(R4)='T' |' ' THEN CLEAR 0(R4), GO TO SKIP_TILL_'END'   02250000
*          SIGNAL ERROR, -> P00MAIN                                     02260000
*                                                                       02270000
************                                                            02280000
*          *                                                            02290000
* NOT ELSE *   GO TO P00TDO    /* TEST IF 'D0', ETC */                  02300000
*          *                                                            02310000
************                                                            02320000
*                                                                       02330000
*P00THISQ:     /* THIS IS IN A '?' LOOP, IE AFTER EXECUTION 'IF' */     02340000
*                                                                       02350000
*          IS THIS A JOL INSTRUCTION ?                                  02360000
*          NO: FIND MACRO, -> P00MAIN                                   02370000
*          YES:                                                         02380000
*                                                                       02390000
*P00ISJOL: OUTPUT TO NEXT PHASE;                                        02400000
*                                                                       02410000
*P00TDO:   IS THIS A 'D0' ? YES, ADD 1 TO NEST,-> P00READ               02420000
* (2)  *                                                          76200 02430000
*          NO,-> P00TFALS                                               02440000
*                                                                       02450000
*          YES, END...                                                  02460000
*******                                                                 02470000
*     *                                                                 02480000
* END *                                                                 02490000
*     *                                                                 02500000
*******                                                                 02510000
*                                                                       02520000
*          SET NEST=NEST-1;                                             02530000
*          IF NEST>0, CLEAR -1(R4), GO TO P00READ                       02540000
*    /* END MACRO */                                                    02550000
*          RESET NEST                                                   02560000
*          CLEAR -1(R4)                                                 02570000
*          REORG SYMBOLIC NAME TABLE                                    02580000
*          OUTPUT END STATEMENT TO COMPILER                             02590000
*          GO TO P00READ (MAIN-LINE)                                    02600000
*                                                                       02610000
***********                                                             02620000
*         *                                                             02630000
* NOT END *                                                             02640000
*         *                                                             02650000
***********                                                             02660000
*                                                                       02670000
*          ANY IN THIS LEVEL=?, YES GO TO P00CLRC (INSTRUCTION ALREADY  02680000
*                                              OUTPUT TO NEXT PHASE)    02690000
*                                                                       02700000
*          PERFORM INSTRUCTION                                          02710000
*          GO TO P00CLRC                                                02720000
*                                                                       02730000
*                                                                       02740000
*********************************************************************** 02750000
P00CLRC  EQU   *                                                  75128 02760000
         SPACE 2                                         JOL30021 76200 02770000
         $CALL UJP50RD        GET NEXT STATEMENT         JOL30021 76200 02780000
         LTR   R15,R15        GET IT OK ?                JOL30021 76200 02790000
         BNZ   P00R1(R15)     IF NOT, BRANCH TO RTN      JOL30021 76200 02800000
         CLC   =C'ELSE ',TKN  ELSE ?                     JOL30021 76200 02810000
         BNE   P00CLRCD       NOPE, CLEAR CODE           JOL30021 76200 02820000
* CHECK IF WE ARE IN A 'Q' LOOP THEN                     JOL30021 76200 02830000
         LR    R15,R4         SET R15 TO STOP ADDRESS    JOL30021 76200 02840000
         LA    R14,1          SET R14 TO 1               JOL30021 76200 02850000
         LH    R7,LEVEL       R7=LEVEL                   JOL30021 76200 02860000
         SLL   R7,3           MULT BY 8                  JOL30021 76200 02870000
         LA    R7,COND(R7)                               JOL30021 76200 02880000
         CLI   0(R7),C'?'     ?                          JOL30021 76200 02890000
         BE    P00QELSO       YES                        JOL30021 76200 02900000
         BXLE  R7,R14,*-8     ROUND LOOP                 JOL30021 76200 02910000
         B     P00CLRCD       NO '?'-> CLEAR COND        JOL30021 76200 02920000
         SPACE 1                                         JOL30021 76200 02930000
* OUTPUT 'ELSE' TO NEXT PHASE THEN                       JOL30021 76200 02940000
P00QELSO     EQU  *                                                     02950000
         $CALL UJP90OP        0P                         JOL30021 76200 02960000
         B     P00MAIN        GO TO GET NEXT INSTRUCTION JOL30021 76200 02970000
         SPACE 2                                         JOL30021 76200 02980000
P00CLRCD MVI   0(R4),C' '     CLEAR COND                 JOL30021 76200 02990000
         B     P00DECOD       DECODE STATEMENT AS USUAL  JOL30021 76200 03000000
         SPACE 2                                         JOL30021 76200 03010000
P00MAIN  EQU   *                                                  75128 03020000
P00READ    EQU  *                                                       03030000
        $CALL  UJP50RD        READ NEXT STATEMENT                 75128 03040000
P00GOTIN EQU   *                                                  75128 03050000
           B   P00R1(R15)                                               03060000
P00R1      B   P00DECOD        ORDINARY RETURN,GO PROCESS IT MAN        03070000
           B   P00SYSDT        SYSIN DATA FOUNDGO PROCESS IT MAN        03080000
           B   P00RETN0        NEW JOB                                  03090000
           B   P00RETN0        EOF                                      03100000
            B P00READ   ********* SKIP IT ERROR ****              76200 03110000
           B   P00RETNF        ERROR SOMEWHERE LOWER DOWN,SO I'LL SEND  03120000
*                              THE 16 BACK ON UP THE LINE AND THIS      03130000
*                              GUYS JOB WILL BE TERMINATED RATHER       03140000
*                              ABRUPTLY,I THINK                         03150000
P00RETN0   EQU *                                                        03160000
         IFNULL LEVEL,NEST,P00RETNX                               75128 03170000
         JOLERR 409,'INSUFFICENT END STATEMENTS FOUND'            75128 03180000
         SPACE 3                                                  75128 03190000
P00RETNX MVC   #TKN,=H'-1'    MUST WRITE OUT LAST BUFFER,SET REC-V75128 03200000
         L     R0,APRCNTL     ** SO, GET ADDRESS CONTROL AREA     75128 03210000
         LA    R1,#TKN        ** AND THE RECORD WITH -VE LENGTH   75128 03220000
        $CALL  UJS30OP        ** CALL OP ROUTINE                  75128 03230000
         SPACE 3                                                  75128 03240000
           JOLRETN                                                      03250000
           SPACE 3                                                      03260000
P00SYSDT   EQU *                                                        03270000
* THE DECLARE STATEMENT PROCESS SHOULD HAVE DEALT WITH THIS AND SO      03280000
*    I GUESS THIS DATA IS INVALID (IN FACT I'M SURE IT IS)              03290000
         JOLERR 302,'INVALID SYSIN FOUND'                               03300000
* NOTE: THIS CODE WILL NOT BE ENTERED IF THE OPTION TO USE BLANKS 74303 03310000
*          IN COLUMNS 1 & 2 IS USED. IF AN INVALID DATA SET (SYSIN74303 03320000
*          ) IS FOUND,IT WILL COME UP AS A NUMBER OF ERRORS       74303 03330000
*          BECAUSE JOL WILL NOT RECOGNISE THE STATEMENT,OR IT WILL74303 03340000
*          BE TOO LONG ETC                                        74303 03350000
P00SKIPL   XC CP,CP                                                     03360000
          $CALL UJP52CRD                                                03370000
           CH  R15,=H'4'       SYSIN DATA STILL ?                       03380000
           BE  P00SKIPL                                                 03390000
           B   P00R1(R15)                                               03400000
P00DECOD   EQU *                                                        03410000
* WELL EVERYBODY FINALLY THERE IS A STATEMENT HERE FOR EVERYONE ELSE    03420000
*    TO HAVE A LOOK AT.                                                 03430000
           LH  R4,LEVEL        LEVEL INDICATOR                          03440000
           SLL R4,3            *8 (WE ALLOW 8 NESTS PER LEVEL)          03450000
           AH  R4,NEST                                                  03460000
           LA R4,COND(R4)                                               03470000
           CLC =C'IF ',TKN     IS IT AN 'IF'?                           03480000
         BNE   P00TOTHR       NO,SEE WHAT IT IS                   75128 03490000
          $CALL UJP04IF                                                 03500000
           B  P00IFRT(R15)                                              03510000
P00IFRT    B   P00IFTRU                                                 03520000
           B   P00IFALS                                                 03530000
           B   P00IFQU                                                  03540000
           B   P00IFERR                                                 03550000
           B   P00IFERR                                                 03560000
           B   P00IFERR                                                 03570000
P00IFTRU    EQU  *                                                      03580000
              MVI  0(R4),C'T'   SET TRUE                          75128 03590000
           B  P00READ          GO READ NEW STATEMENT                    03600000
           SPACE                                                        03610000
*                                                                 75128 03620000
* THIS NEXT LUMP OF CODE HANDLES IF STATEMENTS, AND TRUE ELSES.   75128 03630000
*   NOTE:- WHEN THE READ MODULE FINDS AN 'ELSE', IT ONLY TRANFERS 75128 03640000
*        THE ELSE, AND LEAVES THE REST OF THE STATEMENT           75128 03650000
*        TO BE READ THE NEXT TIME THE READ MODULE IS CALLED.      75128 03660000
*                                                                 75128 03670000
* NOW THE CODE BASICALLY GOES LIKE THIS:-                         75128 03680000
* P00FALS:     HAVE WE BEEN OUTPUTTING A '?' IF ?                 75128 03690000
*              YES, OP DUMMY ';' FOR NEXT PHASE                   75128 03700000
*                                                                 75128 03710000
* P00IFRD1:    READ NEXT INSTRUCTION                              75128 03720000
*              IS IT ANOTHER 'IF' ? YES -> P00IFRD1 (READ NEXT)   75128 03730000
*              IS IT A 'D0' ?                                     75128 03740000
*                   YES, GO INTO SKIP PHASE TILL MATCHING 'END'   75128 03750000
*  /* NOW AT THIS STAGE WE HAVE THE NEXT INSTRUCTION, AND         75128 03760000
*        REMEMBER THAT THIS IS A FALSE IF. SO, WE MUST SKIP             03770000
*        THIS INSTRUCTION, BUT WE WANT TO SEE IF THE NEXT         75128 03780000
*        ONE IS AN ELSE */                                        75128 03790000
*                                                                 75128 03800000
* P00IFRD3:    READ NEXT;                                         75128 03810000
*                                                                 75128 03820000
*              IS IT 'ELSE' ?  YES, MUST BE TRUE, GO TO P00MAIN,  75128 03830000
*                   WHICH WILL GET THE FOLLOWING INSTRUCTION, AND 75128 03840000
*                   ACT ON IT                                     75128 03850000
*              NOT ELSE, GO TO P00DECOD (DECODE, ACT ON STATEMENT)75128 03860000
*                                                                 75128 03870000
*                                                                 75128 03880000
* SO WE HAVE DONE A BIT OF THE IF. BUT WHAT IF THE  INSTRUCTION   75128 03890000
*        IS NOT AN 'IF'                                           75128 03900000
* OK....                                                          75128 03910000
*                                                                 75128 03920000
*                                                                 75128 03930000
* P00TOTHR:    ARE WE IN A '?' LOOP (IE IF EXECUTION LOGIC?)            03940000
*                   NO ->  IS IT ELSE ?                                 03950000
*                             YES, MUST BE FALSE, GO TO P00IFRD1,       03960000
*                                  WHICH SKIPS NEXT INSTRUCTION         03970000
*                                  OR GROUP OF INSTRUCTIONS             03980000
*                   YES, CHECK IF %X =, AND GIVE ERROR                  03990000
*                   CHECK IF MACRO, AND GIVE CONTROL,                   04000000
*                        OTHERWISE, IF PREPROCESSOR STATEMENT,          04010000
*                             DO IT NOW,                                04020000
*                        OTHERWISE, MUST BE COMPILER STATEMENT,         04030000
*                             SO KICK IT OUT FOR NEXT PHASE.            04040000
*                                                                       04050000
* SO...                                                                 04060000
*  ON WITH IT                                                           04070000
*                                                                       04080000
*                                                                       04090000
P00IFALS   EQU *                                                        04100000
P00IFERR   EQU *                                                        04110000
           CLI 0(R4),C'?'  HAVE WE BEEN OUTPUTTING SO FAR AND NOW       04120000
*                          HIT A FALSE ? IF SO OUTPUT A NULL            04130000
           BNE P00IFRD1                                           75128 04140000
           MVC #TKNSTRG,=H'1'                                           04150000
           MVI TKNSTRG,C';'                                             04160000
          $CALL UJP90OP                                                 04170000
P00IFRD1  $CALL UJP50RD                                                 04180000
           LTR R15,R15                                                  04190000
           BNZ P00R1(R15)      FIX EOF ETC                              04200000
* TEST IF THIS IS AN IF THEN,IF THEN SITUATION                          04210000
           CLC =C'IF ',ICOMMAND                                         04220000
           BE  P00IFRD1                                                 04230000
         BAL   R10,P00TSYS    TEST IF DCL SYSIN                         04240000
         LTR   R15,R15                                                  04250000
         BZ    P00TDO01                                                 04260000
*OK WE HAVE SYSIN HERE.                                                 04270000
         XC    CP,CP                                                    04280000
P00CSKC1 $CALL UJP52CRD       READ A SYSIN CARD                         04290000
         CH    R15,=H'4'      CARD STILL?                               04300000
         BE    P00CSKC1                                                 04310000
*SKIPPED ALL THE CARDS THEN                                             04320000
         B     P00TELSE                                                 04330000
P00TDO01 CLC =C'DO ',ICOMMAND                                           04340000
         BNE   P00TELSE                                           75128 04350000
         BAL   R10,P00TKN2    TEST IF NEXT TOKEN ' ' / ISSUE ERR  75128 04360000
* HERE IT IS A DO,AND WE MUST SKIP UNTIL A MATCHING END HAS BEEN        04370000
*     FOUND                                                             04380000
P00SKIPF EQU   *                                                  75128 04390000
           LA  R4,1            NUMBER OF OUTSTANDING ENDS               04400000
P00IFRD2  $CALL UJP50RD        READ NEXT STATEMENT                      04410000
         LTR   R15,R15                                            75311 04420000
         BNZ   P00R1(R15)                                         75311 04430000
         BAL   R10,P00TSYS    TEST IF SYSIN DCL                         04440000
         LTR   R15,R15                                                  04450000
         BNZ   P00CSKC2                                                 04460000
           CH  R15,=H'4'       SYSIN ?                                  04470000
           BNE P00IFT15                                                 04480000
P00CSKC2   XC  CP,CP                                                    04490000
P00IFSKP  $CALL UJP52CRD       READ THE CARD                            04500000
           CH  R15,=H'4'       STILL SYSIN ?                            04510000
           BE  P00IFSKP                                                 04520000
P00IFT15   LTR R15,R15                                                  04530000
           BNZ P00R1(R15)                                               04540000
* NORMAL INSTRUCTION HERE                                               04550000
           CLC =C'END ',ICOMMAND                                        04560000
           BNE P00TDO2                                                  04570000
         BAL   R10,P00TKN2    TEST IF NEXT TOKEN ' ' / ISSUE ERR  75128 04580000
           SH  R4,=H'1'        MATCHED ALL THE 'ENDS' ?                 04590000
         BZ    P00TELSE                                           75128 04600000
P00TDO2    EQU *                                                        04610000
           CLC =C'DO ',ICOMMAND                                         04620000
           BNE P00IFRD2                                                 04630000
           LA  R4,1(R4)                                                 04640000
           B   P00IFRD2                                                 04650000
           SPACE 3                                                      04660000
P00TELSE   EQU  *                                                       04670000
        $CALL  UJP50RD        READ NEXT INSTRUCTION               75128 04680000
         LTR   R15,R15        GET IT OK ?                         75128 04690000
         BNZ   P00R1(R15)     NOPE,BRANCH ON R15                  75128 04700000
           CLC =C'ELSE ',TKN                                            04710000
         BNE   P00DECOD       NO,GO DECODE IT                     75128 04720000
* HERE THE ELSE HAS JUST GO TO BE TRUE, SO GO READ NEXT           75128 04730000
*  STATEMENT AND ACT ON IT.                                       75128 04740000
         B     P00MAIN                                            75128 04750000
         SPACE 3                                                  75128 04760000
P00IFQU  MVI   0(R4),C'?'     SET UP '?' INDICATOR                75128 04770000
         $CALL UJP90OP        OUTPUT 'IF' FOR COMPILER PHASE      75128 04780000
         B     P00MAIN        GO READ NEXT INSTRUCTION            75128 04790000
         SPACE 3                                                  75128 04800000
P00TOTHR   EQU  *              NOT IF OR ELSE,UNLESS IT WAS IN A '?'    04810000
*                              LOOP                                     04820000
* NOW SEE IF THE '?' CONDITION EXISTS                                   04830000
*** NOTE ***                                                      75128 04840000
* WE ONLY WANT TO CHECK FROM THIS LEVEL UP,COS OTHERWISE WE WILL  75128 04850000
*  RUN INTO TROUBLE IF USER SAYS;-                                75128 04860000
*        IF A=0 THEN SORT X TO Y;                                 75128 04870000
           LR  R15,R4                                                   04880000
           LA  R14,1                                                    04890000
           LH  R7,LEVEL                                                 04900000
           SLL R7,3   * 8                                               04910000
           LA R7,COND(R7)                                               04920000
P00TQU2    CLI 0(R7),C'?'      ANY PREVIOUS '?'                         04930000
           BE P00THISQ                                                  04940000
           BXLE R7,R14,P00TQU2                                          04950000
* NOW IF THE THING HERE IS AN ELSE, IT JUST HAS TO BE             75128 04960000
*  FALSE, SO WE WILL BRANCH BACK TO THE 'IF' SKIP ROUTINE         75128 04970000
         CLC  =C'ELSE ',TKN     'ELSE'                            75128 04980000
         BE    P00CHKC9       OK,CHECK IF AFTER IF STATEMENT      75128 04990000
           B  P00TDO                                                    05000000
P00CHKC9 CLI   0(R4),C'T'     AFTER 'IF' ?                        75128 05010000
         BE    P00CLREL                                                 05020000
         CLI   0(R4),C' '                                               05030000
         BNE   P00ELSER       YES, GO TO ERRORROUTINE             75128 05040000
P00CLREL EQU *                                                          05050000
         MVI  0(R4),C' '       CLEAR COND                               05060000
         B    P00IFRD1         GO TO SKIP ROUTINE                       05070000
P00ELSER  EQU *                                                         05080000
         JOLERR 303,'ELSE IGNORED, AND NEXT INSTRUCTION(S)'       75128 05090000
         B     P00IFRD1                                           75128 05100000
  SPACE 3                                                               05110000
P00THISQ   EQU  *                                                       05120000
* JUST BEFORE OUTPUTTING TO THE NEXT PHASE CHECK IF THIS CONTRAPTION    05130000
*   IS AN ASSIGNMENT TO A SYMBOLIC PARAMETER AND IF SO GIVE THE POOR    05140000
*   OLD CHAP AN ERROR MESSAGE OF SOME DESCRIPTION                       05150000
           CLI TKN,C'%'        SYMBOLIC REFERENCE ?                     05160000
           BNE P00QOP          OUTPUT IT TO NEXT PHASE                  05170000
           GETTKN NO=2                                                  05180000
           CLI TKN,C'='        ASSIGNMENT ?                             05190000
           BNE P00QOP          OUTPUT IT TO NEXT PHASE                  05200000
         JOLERR 305,'SYMBOLIC ASSIGNMENT IN EXECUTION ''IF'' LOGIC'     05210000
         B   P00MAIN                                                    05220000
P00QOP     EQU  *                                                       05230000
* NOW BEFORE OUTPUTTING THIS INSTRUCTION TO THE NEXT PHASE              05240000
*     WE MUST SEE IF IT IS A MACRO,AND IF SO GIVE CONTROL TO            05250000
*     THE MACRO PROCESSOR                                               05260000
         L     R7,=V(PJOLINST) LOAD ADDRESS OF INSTRUCTION TABLE  75128 05270000
           LM R7,R9,0(R7)                                               05280000
P00TJOLI   CLC ICOMMAND,0(R7)    IS IT A JOL INSTRUCTION ?              05290000
           BE P00ISJOL                                                  05300000
           BXLE R7,R8,P00TJOLI                                          05310000
* NOT A JOL INSTRUCTION                                                 05320000
           B P00FINDM          GO FIND THE MACRO                        05330000
           SPACE                                                        05340000
P00ISJOL   EQU  *                                                       05350000
          $CALL UJP90OP                                                 05360000
P00TDO     CLC =C'DO ',TKN     OS IT A DO ?                             05370000
           BNE P00TEND         TEST IF IT IS AN END                     05380000
         BAL   R10,P00TKN2    TEST IF NEXT TOKEN ' ' / ISSUE ERR  75128 05390000
           LH  R1,NEST                                                  05400000
           LA R1,1(R1)                                                  05410000
           CH  R1,=H'8'        TOO MANY NESTS                           05420000
           BH  P00DOERR                                                 05430000
           STH  R1,NEST                                                 05440000
           B  P00READ                                                   05450000
P00DOERR JOLERR 404,'TOO MANY DO''S'                                    05460000
           B   P00READ                                                  05470000
P00TEND     EQU *                                                       05480000
           CLC =C'END ',TKN    IS IT END ?                              05490000
           BNE  P00TFALS                                                05500000
         BAL   R10,P00TKN2    TEST IF NEXT TOKEN ' ' / ISSUE ERR  75128 05510000
           LH  R1,NEST                                                  05520000
           SH  R1,=H'1'                                                 05530000
           BM P00DROPL         REDUCE LEVEL BY 1                        05540000
           STH R1,NEST                                                  05550000
P00DROP4   BCTR R4,0           -1 FROM R4 TO CLEAR 0(R4)-1        75311 05560000
           B   P00CLRC         CLEAR 0(R4) NOW                    75311 05570000
P00DROPL   LH  R1,LEVEL                                                 05580000
           SH  R1,=H'1'                                                 05590000
           BM  P00LEVER                                                 05600000
           STH R1,LEVEL                                                 05610000
           LA R15,SAVENEST(R1) RESET THE ORIGINAL                       05620000
           MVC NEST+1(1),0(R15) NEST                                    05630000
           SPACE 2                                                      05640000
          $CALL UJS19RSM       RE-ORG SYMBOLIC PARAMETER TABLE    74303 05650000
*                                               AND DROP HIGH LEVEL     05660000
*                                               NAMES AND VALUES        05670000
          $CALL UJP90OP                                                 05680000
*                                                                       05690000
* THE FOLLOWING CODE CORRECTS ERROR JOL30130. THIS ERROR (TOO     76200 05700000
*  MANY ENDS) IS DUE TO NOT RESETTING R4 AT MACRO END    J0L30130 76200 05710000
*  AND HENCE THE LAST 'Q' INDICATOR WAS NEVER GETTING    J0L30130 76200 05720000
*  CLEARED, IE IF THE NEXT INSTRUCTION AFTER A MACRO     J0L30130 76200 05730000
*  END IS ANOTHER END, IT WOULD INCORRECTLY  GET PASSED  J0L30130 76200 05740000
*  OUT TO THE COMPILER PHASE.                            J0L30130 76200 05750000
* WE WILL SIMPLY RESET R4 TO CORRECT THIS PROBLEM.       J0L30130 76200 05760000
*                                                        J0L30130 76200 05770000
         LH    R15,LEVEL      SET LEVEL                  J0L30130 76200 05780000
         SLL   R15,3          MULTIPLY BY 8              J0L30130 76200 05790000
         LA    R4,COND(R15)                              J0L30130 76200 05800000
         AH    R4,NEST                                   J0L30130 76200 05810000
         B     P00CLRC        GO TO MAIN-LINE            J0L30130 76200 05820000
P00LEVER JOLERR 306,'TOO MANY ENDS'                                     05830000
           B P00MAIN           GO BACK TO MAIN LINE                     05840000
P00TFALS   EQU  *                                                       05850000
* NOW SEE IF THE '?' CONDITION EXISTS                                   05860000
*** NOTE ***                                                      75128 05870000
* WE ONLY WANT TO CHECK FROM THIS LEVEL UP,COS OTHERWISE WE WILL  75128 05880000
*  RUN INTO TROUBLE IF USER SAYS;-                                75128 05890000
*        IF A=0 THEN SORT X TO Y;                                 75128 05900000
           LR  R15,R4                                                   05910000
           LA  R14,1                                                    05920000
           LH  R7,LEVEL                                                 05930000
           SLL R7,3   * 8                                               05940000
           LA R7,COND(R7)                                               05950000
P00TQU5    CLI 0(R7),C'?'      ANY PREVIOUS '?'                         05960000
           BE P00CLRC                                             75128 05970000
           BXLE R7,R14,P00TQU5                                          05980000
  SPACE 3                                                               05990000
* WELL THAT WAS TRUE  SO CALL THE APPROPRIATE SKIP ROUTINES             06000000
* OK,NOW SEE IF THE 2ND TOKEN IS AN'=' SIGN                             06010000
* NOTE ***                                                        75128 06020000
*                                                                 75128 06030000
*  DECLARE AND ASSIGNMENTS ARE SPECIAL BECAUSE WE DON'T WANT      75128 06040000
*  SYMBOLICS REPLACED BEFORE THEY ARE ACTIONED                    75128 06050000
*                                                                 75128 06060000
*                                                                 75128 06070000
           GETTKN NO=2                                                  06080000
           CLI TKN,C'='                                                 06090000
           BE  P00ASSIN                                                 06100000
           GETTKN NO=1                                                  06110000
           MVC ICOMMAND,TKN                                             06120000
           CLC =C'DCL ',TKN                                             06130000
           BE  P00DECLR                                                 06140000
           CLC =C'DECLARE ',TKN                                         06150000
           BE  P00DECLR                                                 06160000
           CLC =C'DEFINE ',TKN                                          06170000
           BE  P00DECLR                                                 06180000
***************************************************************    DASD 06190000
*  THIS CHECK FOR A DISPLAY STATEMENT SHOULD STOP DOUBLE      *    DASD 06200000
*  REPLACEMENT OF SYMBOLICS                                   *    DASD 06210000
***************************************************************    DASD 06220000
           CLC =C'DISPLAY ',TKN                                    DASD 06230000
           BE  P00OP5                                              DASD 06240000
           CLC =C'TYPE ',TKN                                       DASD 06250000
           BE  P00OP5                                              DASD 06260000
           B   P00NODCL                                                 06270000
P00DECLR   EQU  *                                                       06280000
          $CALL UJP02DCL                                                06290000
           B P00CLRC           CLEAR COND AND GO TO READ                06300000
P00NODCL   EQU  *                                                       06310000
           SPACE                                                        06320000
P00FINDM   EQU   *                                                      06330000
            $CALL UJS20REP,#TKNSTRG    *********                        06340000
            B   XXXXXX                 *********                        06350000
         $CALL UJS21FNC       PERFORM FUNCTIONS & REPLACE SYMS    75128 06360000
XXXXXX   EQU   *                                                        06370000
         LA    R14,#TKNSTRG                                             06380000
         LH    R1,#WORK                                                 06390000
         LA    R1,2(,R1)   ADJUST FOR PREFIX                            06400006
         LR    R15,R1                                                   06410000
         LA    R0,#WORK                                                 06420000
         MVCL  R14,R0       MOVE THE DATA                               06430000
         MVI   0(R14),C' '  ONE BLANK AFTER THE AREA                    06440000
*          MVC #TKNSTRG(256),#WORK                                      06450000
*          MVC #TKNSTRG+256(256),#WORK+256                              06460000
*          MVC #TKNSTRG+512(256),#WORK+512                              06470000
*          MVC #TKNSTRG+768(234),#WORK+768                              06480000
*          MVC #TKNSTRG+768+234(234),#WORK+768+234                      06490000
*          MVC #TKNSTRG+768+234+234(234),#WORK+768+234+234              06500000
          $CALL UJSPLIT        SPLIT INTO TOKENS,PRINT ERRORS     74303 06510000
           GETTKN 1                                                     06520000
           MVC ICOMMAND,TKN                                             06530000
* THERE IS NO REAL OPTION NOW BUT TO CALL THE APPROPRIATE ROUTINES      06540000
         L     R7,=V(PJOLINST) LOAD ADDRESS OF INSTRUCTION TABLE  75128 06550000
           LM  R7,R9,0(R7)                                              06560000
P00CALLL   CLC ICOMMAND,0(R7)                                           06570000
           BE  GOT00RTN                                                 06580000
           BXLE R7,R8,P00CALLL                                          06590000
* DON'T KNOW WHAT THE INSTRUCTION WAS,BUT I DON'T LIKE IT.              06600000
           SPACE                                                        06610000
           IFNULL ICOMMAND,P00CLRC  NULL INSTRUCTIONS ARE OK,NO ERROR   06620000
          $CALL UJP53MAC                                                06630000
           LTR R15,R15     MACRO PROCESSOR DEAL WITH IT ?               06640000
           BZ  P00MAIN         YES-CLEAR COND & -> READ           75311 06650000
         SPACE 3                                                        06660000
         JOLERR 407,'''',ICOMMAND,''' IS AN INVALID INSTRUCTION'        06670000
           B P00CLRC           CLEAR COND AND GO TO READ                06680000
           SPACE 3                                                      06690000
GOT00RTN   EQU *                                                        06700000
* WELL I DID FIND SOME-ONE TO HANDLE THIS ROUTINE,SO I'LL GIVE HIM      06710000
*    CONTROL                                                            06720000
           L   R15,12(R7)                                               06730000
         L     R15,0(R15)      LOAD PROCESSING ROUTINE ADDRESS    75128 06740000
P00RCALL   LTR  R15,R15                        WATCH FOR WXTRNS         06750000
           BZ P00OP5                                                    06760000
         BALR  R14,R15        BRANCH AND LINK TO PROCESSING RTN   75128 06770000
           B P00CLRC           CLEAR COND AND GO TO READ                06780000
           SPACE 3                                                      06790000
P00ASSIN   EQU *                                                        06800000
* BEFORE HANDING CONTROL TO THE ASSIGNMENT ROUTINE,WE HAD BETTER MAKE   06810000
*    DEAD SURE THAT THIS IS A SYMBOLIC ASSIGNMENT,OLD FRUIT             06820000
           CLI ICOMMAND,C'%'   SYMBOLIC ASSIGNMENT ?                    06830000
           BNE P00OP5          NO,HEAVE OUT TO NEXT PHASE               06840000
           L   R15,=V(UJP85ASN)                                         06850000
           B   P00RCALL        REAL CALL THAT LABEL SAYS                06860000
P00OP5    $CALL UJP90OP                                                 06870000
           B P00CLRC                                                    06880000
         SPACE 3                                                        06890000
P00TKN2  EQU   *                                                  75128 06900000
* THIS SMALL ROUTINE CHECKS THAT AFTER A 'D0' | 'END' THAT THERE  75128 06910000
*  IS NO MORE DATA, THAT IS, THAT THERE WAS A SEMI-COLON FOLLOWING75128 06920000
         GETTKN 2                                                 75128 06930000
         CLI   TKN,C' '                                           75128 06940000
         BE    0(R10)         BACK TO CALLER                      75128 06950000
P00ERR81 GETTKN 2                                                 75128 06960000
P00ERR8  JOLERR 308,'EXCESS INFORMATION STARTING ''',#TKN,''' IGNORED'  06970000
         BR    R10                                                      06980000
         SPACE   3                                                      06990000
P00TSYS  EQU   *                                                        07000000
         CLC   =C'DCL ',ICOMMAND                                        07010000
         BE    P00TSYSI                                                 07020000
         CLC   =C'DEFINE ',ICOMMAND                                     07030000
         BE    P00TSYSI                                                 07040000
         CLC   =C'DECLARE ',ICOMMAND                                    07050000
         BE    P00TSYSI                                                 07060000
         B     P00R0                                                    07070000
P00TSYSI GETTKN               3                                         07080000
         CLI   TKN,C'*'                                                 07090000
         BE    P00R4                                                    07100000
P00R0    SR    R15,R15                                                  07110000
         BR    R10                                                      07120000
P00R4    LA    R15,4                                                    07130000
         BR    R10                                                      07140000
         SPACE 3                                                        07150000
         ENTRY UJP47EXI                                                 07160000
UJP47EXI DS    0H                    EXIT INSTRUCTION                   07170000
         MVI   EOFSYSIN,C'1'         TURN ON EOF ON SYSIN               07180006
         B     P00RETNF                                                 07190000
         LTORG                                                          07200000
         DC   140S(*)                                                   07210000
         TITLE 'HANDLE EOF,'                                FIX-X 76200 07220000
UJP37EOF SR    R15,R15                                      FIX-X 76200 07230000
         ENTRY UJP37EOF                                           76200 07240000
         BR    R14                                          FIX-X 76200 07250000
         TITLE 'READ SYSIN CARD FILE'                       FIX-X 76200 07260000
           SPACE 3                                                      07270000
UJP52CRD   CSECT                                                  74303 07280000
           MVI SYSINMDE,C'1'   TURN ON SYSIN MODE PROCESSING      74303 07290000
           USING UJP52CRD,R15                                     74303 07300000
           L   R15,AUJP52                                         84100 07310000
           BR  R15                                                74303 07320000
AUJP52     DC   A(UJP52CHR)                                             07330006
           LTORG                                                  74303 07340000
           DROP R15                                               74303 07350000
         TITLE 'GET NEXT CHARACTER FROM INPUT STREAM(S)'          86014 07360006
UJP52CHR CSECT                                                    86014 07370000
* NEW CODE IS INTRODUCED FOR FASTER INPUT. IT SAVES USING A       86014 07380000
*     SAVEAREA FOR NORMAL CHARACTER READS                         86014 07390000
* THIS ROUTINE RETURNS THE NEXT CHARACTER FROM FILE SYSIN         86014 07400000
         USING UJP52CHR,R15                                             07410006
         CLI   EOFSYSIN,C' '                                            07420000
         BNE   P52RC12        RETURN A 12                               07430000
         CLI   SYSINMDE,C'1'  ARE WE IN SYSINMODE ?             74303   07440000
         BE    P52OLDRT                                                 07450000
         L     R1,AJOLGEN                                               07460006
         USING GENDETS,R1                                               07470006
         CLC   CP,SM2         RUN OVER CARD BOUNDARY ?                  07480000
         BNL   P52OLDRT                                                 07490000
         LH    R1,CP          LOAD CURRENT CHARACTER POSITION           07500000
         LA    R15,CARD(R1)   GET ABSOLUTE ADDRESS CHAR WE WANT         07510000
         MVC   INCHAR,0(R15)  GET REQD CHARACTER                        07520000
         LA    R1,1(R1)       ADD 1 TO CP                               07530000
         STH   R1,CP          AND RESTORE                               07540000
         SR    R15,R15                                                  07550000
         BR    R14                                                      07560006
P52RC12  MVI   EOFSYSIN,C'1'                                            07570000
         MVI   INCHAR,C' '                                              07580000
         LA    R15,12                                                   07590000
         BR    R14                                                      07600006
* HERE WE NEED TO GO TO THE FULL READ CHARACTER ROUTINE                 07610006
P52OLDRT L     R15,=V(UJP52OLD)                                   86014 07620000
         BR    R15                                                74303 07630000
         DC    10S(*)                                                   07640000
         LTORG                                                          07650000
         DROP  R15                                                74303 07660000
         DROP  R1                                                 86014 07670000
           TITLE 'GET NEXT CHARACTER FROM INPUT STREAM(3)'              07680000
P52SAVE DSECT                                                      DASD 07690000
        DS    18F                                                  DASD 07700000
SAVEEODA DS AL3                        SAVE THE EODAD HERE       A DASD 07710000
P52SAVEL EQU *-P52SAVE                                             DASD 07720000
P52LNERR  DSECT ,                                                  DASD 07730006
P52LN#    DS    CL1        INVALID SKIP LINE #                     DASD 07740006
           JOLSAVE CSECT=UJP52OLD,SIZE=P52SAVEL                    DASD 07750007
           USING  P52SAVE,R13                                      DASD 07760000
* THIS ROUTINE RETURNS THE NEXT CHARCTER FROM FILE SYSIN                07770000
         L     R7,AJOLGEN                                         75128 07780000
         USING GENDETS,R7                                         75128 07790000
         L     R8,ADCBS                                           75128 07800000
         USING DCBS,R8                                            75128 07810000
           CLI  EOFSYSIN,C' '                                           07820000
           BNE  RETNBLAN                                                07830000
           CLI SYSINMDE,C'1'   ARE WE IN SYSINMODE ?              74303 07840000
           BE READCARD                                                  07850000
P52GETCH   EQU *                                                        07860000
           CLC CP,SM2          RUN OVER CARD BOUNDARY ?                 07870000
           BL CARDOK           DON'T NEED TO GET A NEW ONE              07880000
READCARD   EQU *                                                        07890000
* IF WE ARE USING SYSIN DCB,DO A GET,OTHERWISE TEST IF WE CAN           07900000
*    GET A NEW RECORD FROM THE CURRENT BLOCK AND IF NOT READ A          07910000
*    NEW ONE                                                            07920000
           SPACE                                                        07930000
         L     R4,AP52DCBS                                        75128 07940000
           USING P52DCBS,R4                                             07950000
         L     R5,AREADBUF                                        75128 07960000
           USING READAREA,R5                                            07970000
           LA  R15,SYSIN                                          74303 07980000
           FIX 'MAKE L ASYSIN'                                          07990006
           C   R15,CURRDCB                                        74303 08000000
           BE  P52GET                                                   08010000
           SPACE                                                        08020000
* WE ARE READING FROM A LIBRARY OF SOME SORT HERE                       08030000
           SPACE                                                        08040000
P52NEWRC EQU   *                                                  75128 08050000
           L   R1,ACURREC      LOAD ADDRESS OF CURRENT RECORD IN BLOCK  08060000
           L   R15,CURRDCB                                              08070000
           LTR R1,R1                                                    08080000
           BZ P52READB                                                  08090000
           USING IHADCB,R15                                             08100000
           TM  DCBRECFM,X'50'  VB ?                                     08110000
           BO  P52VB                                                    08120000
* FB HERE                                                               08130000
           LA  R14,READAREA    LOAD ADDRESS OF THE READAREA             08140000
           AH  R14,CURRBLKS    + LENGTH OF BLOCK                        08150000
           CR  R1,R14          DO WE NEED A NEW BLOCK ?                 08160000
           BNL P52READB        YEP,GO GET IT.                     74303 08170000
           SPACE 2                                                      08180000
P52MUVFB    MVC CARD,0(R1)     MOVE THE RECORD IN (IT HAD BETTER BE     08190000
*                              80 BYTES AT THE MOMENT)                  08200000
         MVC   CURRLREC,DCBLRECL   SAVE RECORD LENGTH FOR LATER   75128 08210000
           AH  R1,DCBLRECL     RESET NEXT RECORD POINTER                08220000
********* COULD READ THE NEXT BLOCK *******                             08230000
           ST  R1,ACURREC                                               08240000
           B   P52TRECT        TEST IF JOL-CARD OR SYSIN ETC            08250000
           SPACE 3                                                      08260000
P52VB      EQU *                                                        08270000
* VARIABLE BLOCKED INPUT HERE                                           08280000
           MVC DCBLRECL,0(R1)  SHIFT CURRENT RECORD LENGTH TO WORK      08290000
*                              AREA SO WE DON'T GET 0C6'S               08300000
         CLC   =X'FFFF',DCBLRECL                                  75128 08310000
         BE    P52EOM                                             75128 08320000
         MVI   DCBLRECL,0    WIPE OUT ANT NEGATIVE LRECL           DASD 08330000
         MVC   CURRLREC,DCBLRECL SAVE LRECL FOR LATER    JOL30040 76200 08340000
           AH  R1,DCBLRECL     AND ADD                                  08350000
           LA  R14,READAREA    ADDRESS OF BLOCK                         08360000
           AH  R14,CURRBLKS    + LENGTH OF BLOCK                        08370000
           CR  R1,R14          RUN OVER END OF BLOCK ?                  08380000
           BL  P52MUVVB        NO,DECOMPRESS VB RECORD                  08390000
           BNE P52READB        YES, GO GET A NEW BLOCK                  08400000
           MVI DCBLRECL,X'7F'                                     75128 08410000
           SPACE 3                                                      08420000
P52MUVVB L     R0,ACURREC     SAVE  RECORD POINTER FIRST OF ALL   75128 08430000
* NOW VB RECORDS MAY BE 'COMPRESSED' RECORDS,THAT IS ANY SERIES OF      08440000
*    BLANKS FOUND MAY BE REPLACED BY A SERIES OF HEX CHARACTERS         08450000
*    OF LESS THAN X'40) (BLANK) AND RE-EXPANEDE UP TO LOOK LIKE         08460000
*    REAL CARD IMAGES                                                   08470000
         ST    R1,ACURREC     RESET CURRENT RECORD POINTER        75128 08480000
           CLEAR CARD                                                   08490000
         LH    R15,DCBLRECL   LOAD CURRENT LRECL                  75128 08500000
* NOW FIRST 4 BYTES ARE UNUSEABLE, AND IF THE FILE DCB IS         75128 08510000
*  NOT WORKFILE(SYSUT2), IT MUST BE A USER FILE WHICH WE ARE      75128 08520000
*  GOING TO ASSUME IS A TSO VB FILE, IE THE FIRST 8 BYTES HAVE    75128 08530000
*  A LINE NUMBER(WHICH WE DON'T WANT)                             75128 08540000
         LR   R14,R0         LOAD R14 WITH ADDRESS OF CURRENT REC.75128 08550000
         CLC   AWORKFIL+1(3),CURRDCB+1                            75128 08560000
         BNE   P52TSO                                             75128 08570000
* OK, ITS OUR WORKFILE, DO WHAT WE WILL WITH IT                   75128 08580000
         SH    R15,=H'5'      -4 VB OVERHEADS,-1 FOR EX MVC       75128 08590000
         BM    P52NEWRC       NULL RECORD (CAN HAPPEN I GUESS)    75128 08600000
         EX    R15,P52MVCVB   SHIFT 'CARD' TO CARD                75128 08610000
         B     P52TRECT       NOW TEST RECORD TYPE ETC            75128 08620000
P52TSO   SH    R15,=H'13'     -4 VB,-1 EX,-8 TSO LINE NUMBERS     75128 08630000
         BM    P52NEWRC                                           75128 08640000
         EX    R15,P52MVCTS   MOVE TSO RECORD                     75128 08650000
         B     P52TRECT       GO TEST RECORD TYPE                 75128 08660000
         SPACE 3                                                  75128 08670000
P52MVCVB MVC   CARD(*-*),4(R14)    OUR VB RECORD                  75128 08680000
P52MVCTS MVC   CARD(*-*),12(R14)   TSO VB RECORD                  75128 08690000
*********************************************************************** 08700000
           SPACE 3                                                      08710000
P52GET     MVC SYSIN+DCBEODA-IHADCB(3),=AL3(P52RETNF)                   08720000
           GET SYSIN,CARD                                               08730000
           B   P52TRECT        TEST IF A JOL CARD OR SYSIN DATA         08740000
           SPACE 3                                                      08750000
P52READB   EQU *                                                        08760000
* APPARENTLY WE HAVE TO READ A NEW BLOCK                                08770000
           SPACE                                                        08780000
           L  R9,CURRDCB       LOAD DCB ADDR INTO 9                     08790000
           DROP R15                                                     08800000
           XC CALLAREA(24),CALLAREA                               74303 08810000
         MVC   SAVEEODA(3),DCBEODA-IHADCB(R9)      SAVE THE OLD EODAD   08820000
         MVC   DCBEODA-IHADCB(3,R9),=AL3(P52EOFLI) SHIFT IN EODAD       08830000
           READ CALLAREA,SF,(9),(5),MF=(E,CALLAREA)                     08840000
           CHECK CALLAREA                                         74303 08850000
           SPACE 1                                                74303 08860000
P52GOTBL DS    0H                                                C DASD 08870000
* NOW FIND THE NUMBER OF BYTES READ ETC                                 08880000
           USING IHADCB,R9                                              08890000
           L   R1,CALLAREA+16  LOAD ADDRESS OF IOB                74303 08900000
           LH  R14,DCBBLKSI    GET NUMBER OF BYTES REQUESTED IN 'READ'  08910000
           SH  R14,14(R1)      -RESIDUAL COUNT=NUMBER BYTES READ        08920000
           STH R14,CURRBLKS    STORE IN CURRENT BLOCK-SIZE POSN         08930000
* IF VB SET 'ACURREC' TO READAREA+4 (TO SKIP BLKSIZE)                   08940000
*    ELSE SET IT TO A(READAREA)                                         08950000
           ST  R5,ACURREC      ACURREC = A(READAREA)              74303 08960000
           TM  DCBRECFM,X'80'  VARIABLE?                                08970000
         BNZ  READCARD        NO,SO GET NEXT CARD AS NORMAL             08980000
           MVC CURRBLKS(2),READAREA  JS FIX MVS PROBLEM     JS          08990005
           LA  R15,READAREA+4                                     74303 09000000
           ST  R15,ACURREC                                        74303 09010000
           B   READCARD                                                 09020000
           SPACE 3                                                      09030000
P52EOFLI   EQU *                                                        09040000
         MVC   DCBEODA-IHADCB(3,R9),SAVEEODA       RESTORE THE EODAD    09050000
* FOUND END OF MEMBER CONDITION WHEN READ A BLOCK                       09060000
*    FIRST OF ALL WE SHALL RESET THE ERROR INDICATORS SHICH             09070000
*    WOULD HAVE NO DOUBT BEEN SET BY THE EOF CONDITION                  09080000
           NI  DCBCIND1,255-X'10'                                       09090000
           NI  DCBCIND2,255-X'10'                                       09100000
           NI  DCBIFLGS,255-B'11000000'                                 09110000
           SPACE                                                        09120000
* NOW WE MUST 'DROP' THE LEVEL OF DCBS SO WE CAN GET BACK               09130000
*    TO THE NEXT HIGHER MACRO OR INCLUDE DATA SET.                      09140000
P52EOM   EQU   *                                                  75128 09150000
           LH  R1,FILENO       CURRENT 'NEST'                           09160000
           BCTR R1,0           -1                                 74303 09170000
           STH R1,FILENO                                                09180000
           LR  R14,R1                                                   09190000
           MH  R14,=Y(SAVEDCBL)                                         09200000
           LA  R14,P52DCBS(R14)                                         09210000
           MVC CP+1(1),SAVECP-P52DCBS(R14) RESET CHARACTER POINTER75128 09220000
           MVC ACURREC,SAVEPOSN-P52DCBS(R14) AND CURRENT RECORD ADDR    09230000
           MVC CURRBLKS,SAVEBLKS-P52DCBS(R14) AND BLOCKSIZE             09240000
           MVC CURRDCB,SAVEDCB-P52DCBS(R14)  AND DCB                    09250000
         MVC   CURRLREC+1(1),SAVELREC-P52DCBS(R14)        75128         09260000
           L   R1,CURRDCB                                               09270000
           LA  R15,SYSIN                                          74303 09280000
           FIX 'MAKE L ASYSIN'                                          09290006
           CR  R1,R15          HAVE WE DROPPED BACK TO THE SYSIN  74303 09300000
*                              FILE DCB ?                               09310000
           BNE P52READ2                                                 09320000
           MVC CARD,SAVECARD                                            09330000
           MVI PRINTIND,C' '   TURN ON PRINT IN 'COMPILE' LISTING       09340000
*                              COS IT MAY HAVE GOT TURNED OFF           09350000
*                              WHILE PROCESSING THE LAST MACRO          09360000
           B   P52GETCH                                                 09370000
P52READ2   EQU *                                                        09380000
*IF THIS MEMBER THAT WE ARE BACK TO IS NOT THE MACRO FILE,              09390000
*     WE MUST TURM OF THE PRINTIND FOR THE SECOND PHASE                 09400000
           LA  R15,PROCLIB     PROCLIB DCB                        74303 09410000
           FIX 'MAKE L PROCLIB'                                         09420006
           CR  R15,R1          EQUAL ?                            74303 09430000
           BNE P52MACRO                                           74303 09440000
           MVI PRINTIND,C' '                                            09450000
P52MACRO   EQU  *                                                       09460000
           L    R15,AWORKFIL    SEE IF THIS A SWITCH FOR THE       DASD 09470000
           CR   R15,R1          WORKFILE   ECT.. INVOKE O/P        DASD 09480000
           BE   P52WORK                                            DASD 09490000
           L  R15,ACURREC                                               09500000
         SH    R15,CURRLREC                                       75128 09510000
           ST R15,ACURREC                                               09520000
P52WORK    EQU   *                                                 DASD 09530000
           LR  R9,R1                                                    09540000
         MVC   BLDLTTR,SAVETTR-P52DCBS(R14) RESET TTR OF LAST MACRO5128 09550000
         MVC   CURRCONC,BLDLTTR+3 SAVE CONCATENATION #   JOL30006 76200 09560000
         FIND  (9),BLDLTTR,C                                     75128  09570000
           XC CALLAREA(20),CALLAREA                               74303 09580000
           READ CALLAREA,SF,(9),(5),MF=(E,CALLAREA)                     09590000
           CHECK CALLAREA                                               09600000
           CLI  CALLAREA,X'7F'                                    74303 09610000
           BNE  P52RESER                                                09620000
           FIX 'GET RID OF ABOVE TWO INSTRUCTIONS'                      09630005
           L  R15,ACURREC                                               09640000
           MVC CARD,0(R15)                                              09650000
           L   R1,AWORKFIL   CHECK AGAIN FOR WORKFILE              DASD 09660000
           CR  R9,R1         IF SO DONT DISTURB THE RECORD         DASD 09670000
           BE  READCARD      POINTERS                              DASD 09680000
           LA R15,80(R15)                                               09690000
           ST R15,ACURREC                                               09700000
           B  P52GETCH                                                  09710000
P52RESER   EQU  *                                                       09720000
         JOLERR 501,'ERROR REPOSITIONING INPUT FILES'                   09730000
*                              OR INCLUDE END                           09740000
           CHECK  CALLAREA                                              09750000
           JOLRETN                                                      09760000
P52TRECT   EQU *                                                        09770000
* THE NEXT BIT OF CODE GOES LIKE:-                                74303 09780000
*    IF MACROLIB & CARD='**' THEN GOTO ISJOL2;                    74303 09790000
*    IF PARMCOL^='' & PARMCOL=CARD THEN GOTO ISJOL2;              74303 09800000
*    IF SYSINMDE THEN GO TO ISDATA                                74303 09810000
           SPACE 1                                                74303 09820000
* WE ACCEPT MACROLIB & CARD='**' BECAUSE ALL JOL MACROS ARE       74303 09830000
*    CURRENTLY CODED THIS WAY                                     74303 09840000
           SPACE 1                                                74303 09850000
           LA  R1,2            PREPARE TO SET CP=2                74303 09860000
           LA  R15,MACRODCB                                       74303 09870000
           FIX 'MAKE LOAD'                                              09880006
           C   R15,CURRDCB     = ?                                74303 09890000
           BNE P52NMAC3        NOPE                               74303 09900000
*          CLC =X'00FF',CARD     COLS 1 & 2 ='**'                       09910000
           CLC =C'**',CARD     COLS 1 & 2 ='**'                   74303 09920000
           BE  P52STRCP        YES,SET CP=2                       74303 09930000
P52NMAC3 CLC   PARMCOL,BLANKS PARMCOL='  '                        75128 09940000
         BE    P52TSYS9                                           75128 09950000
           CLC PARMCOL,CARD    PARMCOL^='',SEE IF COLS 1 & 2=     74303 09960000
           BE  P52STRCP        YES,IS JOL,SET CP=2                74303 09970000
P52TSYS9   IFNULL SYSINMDE,P52SETCP CHECK IF SYSTN MODE NOW       74303 09980000
* NOW, HERE WE ARE IN SYSIN MODE (IE READING DATA CARDS) AND COLS 74303 09990000
*          1 AND 2 ARE ALLOWED TO BE ' ' OR USED BY THE PROGMR.   74303 10000000
*          THEREFORE,IT SEEMS POSSIBLE THAT THIS CARD IS A DATA   74303 10010000
*          CARD. BUT WE HAD BETTER CHECK IF IT IS 'EOF;'          74303 10020000
           CLC =C'EOF;',CARD                                      74303 10030000
           BNE P52ISDTA        YES,ASSUME DATA CARD HERE          74303 10040000
* HERE, EOF ON A DATA CARD FILE.                                  74303 10050000
           CLEAR SYSINMDE      TURN OFF SYSIN MODE.               74303 10060000
         B     P52ISJOL       HANDLE 'EOF' INSTRUCTION      FIX-X 76200 10070000
P52ISDTA   EQU *                                                  74303 10080000
* SYSIN DATA SET HERE                                                   10090000
           JOLRETN RC=4        SYSIN RETURN CODE                        10100000
P52ISJOL   EQU *               COLS 1 & 2 SIGNIFY JOL CARD        74303 10110000
P52SETCP   EQU *                                                  74303 10120000
           SR  R1,R1           SET R1=0                           74303 10130000
P52STRCP   STH R1,CP           STORE INTO CP                      74303 10140000
           CLEAR SYSINMDE                                               10150000
           LA  R1,CARD(R1)     HAVE A LOOK AT THE FIRST VALID     74303 10160000
*                              CHARACTER IN THE CARD              74303 10170000
           LA  R14,1                                                    10180000
           LA  R15,CARD+71                                              10190000
         CLI   OPERATOR,X'FF'   IN COMMENT ?                       SOCO 10200006
         BE    P52OLDJB                                            SOCO 10210006
           CLI 0(R1),C'*'      IS IT '* JOL'                      74303 10220000
           BE  P52TJOL         WELL GO SEE,AT LEAST WE HAVE THE '*'     10230000
           B   P52OLDJB                                           74303 10240000
P52TJOL     CLC =C'JOL',0(R1)                                           10250000
           BE  JRETN8          RETURN A CODE OF 8 DIRECTLY,       74303 10260000
*                              NOT THROUGH A JOLRETN MACRO.       74303 10270000
           BXLE R1,R14,P52TJOL                                          10280000
           SPACE 2                                                      10290000
P52OLDJB   EQU *                                                  74303 10300000
         CLI   TITLE1,C'*'    IS THERE AN '* JOL' IN THE TITLE?   75128 10310000
         BNE   P52TITOK                                           75128 10320000
         CLI   CARD,C'*'      IS THIS AN '* JOL' ?                      10330000
         BE    P52TITOK                                                 10340000
         MVC   TITLE1,CARD                                              10350000
P52TITOK EQU   *                                                        10360000
         CLEAR THISPRNT                                                 10370000
         LA    R1,CARD          POINT AT CARD BUFFER               DASD 10380005
         LA    R14,1            BXLE INCR                          DASD 10390006
         LA    R15,CARD+71      BXLE LIMIT                         DASD 10400006
P52CKBLN CLI   0(R1),C' '       NON-BLANK ?                        DASD 10410006
         BNE   P52GOTIT         YES, CHECK FOR CONTROL VERB        DASD 10420006
         BXLE  R1,R14,P52CKBLN  LOOK AT NEXT CHAR                  DASD 10430006
         B     P52CKPRT         ALL BLANK SO CONTINUE AS USUAL     DASD 10440006
         SPACE 2                                                   DASD 10450006
P52GOTIT CLC   =C'EJECT ',0(R1) IS IT EJECT ?                      DASD 10460006
         BNE   P52CKSKP         NO, GO CHECK SKIP                  DASD 10470006
         L     R1,APRINTLN                                         DASD 10480006
         MVI   4(R1),C'1'       SET CC TO EJECT PAGE               DASD 10490006
         B     P52SETLN         FINISH LINE                        DASD 10500006
         SPACE 1                                                   DASD 10510006
P52CKSKP CLC   =C'SKIP ',0(R1)  IS IT SKIP ?                       DASD 10520006
         BNE   P52CKPRT         NO, GO ON                          DASD 10530006
         LA    R1,5(R1)         POINT PAST SKIP, LOOK FOR #        DASD 10540006
P52SRCH# CLI   0(R1),C' '       GOT SOMETHING ?                    DASD 10550006
         BNE   P52CHK#          YES, CHECK FOR A #                 DASD 10560006
         BXLE  R1,R14,P52SRCH#  LOOK AT NEXT COLUMN                DASD 10570006
P52SKP1  L     R1,APRINTLN      ALL BLANK SO TREAT SKIP 1          DASD 10580000
         MVI   4(R1),C' '       SET CC TO SKIP 1                   DASD 10590005
P52SETLN MVC   0(4,R1),=AL2(6,0) SET LENGTH                        DASD 10600006
         MVI   5(R1),C' '       BLANK AFTER THE CC                 DASD 10610006
         JOLPRINT ,             OUTPUT THE LITTLE BUGGER           DASD 10620006
         B     READCARD         GO GET THE NEXT CARD               DASD 10630006
         SPACE 2                                                   DASD 10640006
P52CHK#  CLI   0(R1),C'1'       IS IT SKIP 1 ?                     DASD 10650006
         BE    P52SKP1          GO DO IT THEN                      DASD 10660006
         CLI   0(R1),C'2'       IS IT SKIP 2 ?                     DASD 10670006
         BNE   P52CKSK3         NO, GO CHECK FOR SKIP 3            DASD 10680006
         L     R1,APRINTLN                                         DASD 10690006
         MVI   4(R1),C'0'       SET CC TO DOUBLE SPACE             DASD 10700006
         B     P52SETLN         GO FINISH THE LINE                 DASD 10710006
         SPACE 2                                                   DASD 10720006
P52CKSK3 CLI   0(R1),C'3'       IS IT SKIP 3 ?                     DASD 10730006
         BNE   P52#ERR          NO, MUST BE AN ERROR               DASD 10740006
         L     R1,APRINTLN                                         DASD 10750006
         MVI   4(R1),C'-'       SET CC TO TRIPLE SPACE             DASD 10760006
         B     P52SETLN         GO FINISH THE PRINT LINE           DASD 10770006
         SPACE 2                                                   DASD 10780000
         USING P52LNERR,R1                                         DASD 10790005
P52#ERR  JOLERR 102,'INVALID NUMBER OF LINES TO SKIP - ''',        DASD*10800006
               P52LN#,''' DEFAULTING TO SKIP 1'                    DASD 10810006
         B     P52SKP1                                             DASD 10820006
         SPACE 2                                                        10830006
P52CKPRT EQU   *        COME HERE IF NOT EJECT AND NOT SKIP        DASD 10840006
           LA  R15,SYSIN                                          74303 10850000
           C   R15,CURRDCB                                        74303 10860000
           BE  P52PCARD                                                 10870000
* NOW SEE IF WE ARE TO PRINT THIS 'CARD' BECAUSE IT DIDN'T              10880000
*     COME THROUGH THE PRIMARY INPUT STREAM                             10890000
           LA  R15,PROCLIB     ARE WE LOOKING AT                  74303 10900000
           C   R15,CURRDCB     THE INCLUDE LIBRARY?               74303 10910000
           BNE P52MACL         NO,TIS THE MACRO LIBRARY                 10920000
           TM  PARMPRNT,X'80'  DO WE PRINT 'INCLUDES' ?                 10930000
           BZ  P52NPRT1        NO PRINT OFF INCLUDE LIBRARY REQD        10940000
           CLI LEVEL+1,0       IS LEVEL=0 (IE ARE WE IN A MACR0?) 75311 10950000
           BNE P52MACL         NOPE, SO DON'T PRINT MACRO INCLUDES75311 10960000
           B   P52PCARD        GO PRINT THE CARD                        10970000
P52MACL    EQU *                                                        10980000
* THE FOLLOWING CODES FIXES THIS PROBLEM:-                        76200 10990000
*  IF A MACRO OR INVOKE ROUTINE RETURNS 'MACRO; END;' AND         76200 11000000
*  THEN RETURNS OTHER STATEMENTS (QUITE ALLOWABLE), THEN          76200 11010000
*  THEY WILL NOT BE PRINTED. CURRENTLY, STANDARD USE A JOLOPT     76200 11020000
*  INSTRUCTION HERE, BUT THIS MEANS THAT THEY LOSE THE CURRENT    76200 11030000
*  PRINT STATUS AS THERE IS NO 'POP' LIKE ASSEMBLER.              76200 11040000
*                                                                 76200 11050000
*WE CAN COME HERE EVEN IF WE ARE USING AN 'INCLUDE' LIBRARY,      76200 11060000
*  SO LET'S RE-CHECK THAT ...                                     76200 11070000
*                                                                 76200 11080000
         C     R15,CURRDCB    INCLUDE LIBRARY ?                   76200 11090000
         BNE   P52TMPR        TEST IF MACRO TO PRINT.             76200 11100000
         CLI   LEVEL+1,0      IS LEVEL=0 ?                        76200 11110000
         BE    P52PCARD       YES, SO PRETEND THIS CAME FROM      76200 11120000
*                             SYSIN, AND SEE IF WE WANT TO        76200 11130000
*                             PRINT IT                            76200 11140000
P52TMPR  EQU   *                                                  76200 11150000
           TM  PARMPRNT,X'40'  PRINT MACROS ?                           11160000
           BZ  P52NPRT1        NO                                       11170000
P52PCARD   EQU *                                                        11180000
* WE HAVE 2 NEW OPTIONS TO COPE WITH HERE;                              11190000
*    1. NOPRINT - NOLIST                                                11200000
*    2. FLAG                                                            11210000
           TM  PARMPRNT,B'0000010' NOPRINT ?                      75311 11220000
           BO  P52NPRT1        YES, N0PRINT THEN                  75311 11230000
         L     R1,APRINTLN    GET A(PRINT BUFFER-LINE)            75128 11240000
         MVC   0(4,R1),=AL2(100,0)  SET VB RECORD LENGTH          75128 11250000
         MVC   10(4,R1),PRNTSTMT   MOVE IN PRINT STATEMENT NUMBER 75128 11260000
         MVC   19(80,R1),CARD      AND THE CARD TO BE PRINT       75128 11270000
* NOW TEST 'FLAG' OPTION                                          75311 11280000
*          IFNULL FLAGCOL,P52RPRIN FLAG=0,DO PRINT NOW.           7SOCO 11290000
         CLC   FLAGCOL,ZERO         ELIMIANTE THE RETURN           SOCO 11300006
         BE    P52RPRIN             CODE 8 IN THE ASSEMBLY         SOCO 11310006
* OK, THE FLAG OPTION IS IN USE, SO WE'D BETTER POP IN THE '*'    75311 11320000
*    AFTER SHIFTING THE STRING DOWN A BIT.                        75311 11330000
           LH  R14,FLAGCOL     LOAD FLAG COLUMN                   75311 11340000
           LA  R1,19(R1,R14)   CALC SPOT IN PRINT BUFFER TO PUT   75311 11350000
*                              THE '*'; THIS INDICATES END MARGIN 75311 11360000
           SPACE 1                                                75311 11370000
* NOW, THE '*' WILL WIPE OUT THE FIRST COLUMN OF THE FIELD, SO    75311 11380000
* WE HAVE TO SHIFT THE COLUMNS BACK AFTER WE PUT THE '*' IN.      75311 11390000
* SO...                                                           75311 11400000
           LNR R15,R14         LOAD NEG FLAGCOL                   75311 11410000
           LA  R15,79(R15)     =LENGTH OF FLAGCOL TO END OF CARD, 75311 11420000
*                              -1 FOR MVC EXECUTE                 75311 11430000
           LA  R14,CARD(R14)  R14-> DATA AFTER FLAGCOL NOW       75311  11440000
           MVI 0(R1),C'*'      '*' IN                             75311 11450000
           EX  R15,P52MVCFL    SHIFT REST BACK IN                 75311 11460000
P52RPRIN   EQU *                                                  75311 11470000
         JOLPRINT                  PRINT IT                       75128 11480000
         MVI   THISPRNT,C'1'      INDICATE THIS HAS BEEN PRINTED        11490000
         SPACE 3                                                  75128 11500000
P52NPRT1   EQU *                                                        11510000
           IFNULL PRNTSTMT,FIXCP                                        11520000
           LA R1,CARD                                                   11530000
           AH R1,SM3                                                    11540000
            BCTR R1,0     BACKTRACK 1 CHARACTER        75049            11550000
           MVC INLINENO,0(R1)                                           11560000
           CLEAR PRNTSTMT                                               11570000
FIXCP      EQU  *                                                       11580000
CARDOK     EQU *                                                        11590000
           LH R1,CP            LOAD CURRENT CHARACTER POSITION          11600000
           LA R14,CARD(R1)     GET ABSOLUTE ADDRESS CHAR WE WANT        11610000
           MVC INCHAR,0(R14)   GET REQD CHARACTER                       11620000
           LA R1,1(R1)         ADD 1 TO CP                              11630000
           STH R1,CP           AND RESTORE                              11640000
RETN       JOLRETN                                                      11650000
RETNBLAN   EQU *                                                        11660000
P52RETNF   MVI EOFSYSIN,C'1'                                            11670000
           MVI INCHAR,C' '                                              11680000
           JOLRETN RC=12                                                11690000
P52MVCFL   MVC 1(*-*,R1),0(R14) SHIFT DATA AFTER FLAG COL         75311 11700000
           DROP R9                                                      11710000
           FIX 'MAKE LOAD'                                              11720006
           LTORG                                                        11730000
           DC   80S(*)                                                  11740000
         DROP  R7,R8                                              75128 11750000
READAREA DSECT                                                          11760000
           TITLE 'START MACRO PROCESSOR ON ITS WAY'                     11770000
P53SAVE  DSECT                                                          11780000
         DS    18F                                                      11790000
P53LABEL DS    CL8            LABEL SAVED HERE                          11800000
P53INST  DS    CL8            INSTRUCTION SAVED HERE                    11810000
P53SAVEL EQU   *-P53SAVE                                                11820000
           JOLSAVE CSECT=UJP53MAC,SIZE=P53SAVEL                         11830000
           USING P53SAVE,R13                                            11840000
* A MACRO INSTRUCTION (I.E AN INSTRUCTION THAT IS NOT A KNOWN JOL       11850000
*    INSTRUCTION) HAS BEEN FOUND IN THE INPUT STREAM                    11860000
           SPACE 3                                                      11870000
           FIX 'SET %SYSSTMT FOR THE COMMAND LINE'                      11880006
         USING P53SAVE,R13                                        75128 11890000
           LH  R1,LEVEL        ADD                                      11900000
           LA  R1,1(R1)            1                                    11910000
           CH  R1,=H'12'               TO                         82300 11920000
           BL  P53OK3                      LEVEL                        11930000
         JOLERR 402,'TOO MANY LEVELS (IE CONCURRENTLY EXECUTING MACROS)*11940000
               '                                                        11950000
           B   P53RETNF            VET                                  11960000
P53OK3     EQU  *                                                       11970000
* NOW LETS SET UP THE DCBS ETC SO THE NEXT READ WILL GET THE MEMBER     11980000
*    WE WANT                                                            11990000
           GETTKN 1            GET THE MEMBER NAME                      12000000
         MVC   P53INST,TKN    SAVE INSTRUCTION NAME                     12010000
         MVC   P53LABEL,LABEL SAVE LABEL MACRO WAS CALLED WITH          12020000
          $CALL UJP54INC                                                12030000
           LTR R15,R15         DID WE FIND THE MEMBER (OR MACRO)?       12040000
           BZ  P53OK1          YES                                      12050000
           CH  R15,=H'4'      NO DATA RETURNED FROM INVOKED RTN?  75128 12060000
           BNE P53RETNF       NOPE,REAL ERROR                     75128 12070000
           JOLRETN  RC=0                                          75128 12080000
P53OK1     EQU *                                                        12090000
         SPACE 3                                                  75128 12100000
* NOW WE MUST SAVE THIS INSTRUCTION SO THAT WE CAN RE-ANALISE IT  75128 12110000
*  AFTER THE PROTO-TYPE MACRO HAS BEEN SET UP                     75128 12120000
*                                                                 75128 12130000
         L     R1,AMACBUF     USE INSTREAM MACRO AREA TO SAVE THIS75128 12140000
         LA    R0,#TKNSTRG    LOAD ADDRESS OF WHERE DATA IS NOW   75128 12150000
         BAL   R14,MOVEDATA   SHIFT IT TO GOTTEN CORE             75128 12160000
* NOW OUTPUT IT TO THE NEXT PHASE SO THAT IT CAN BE PRINTED             12170000
*     NICELY                                                            12180000
          $CALL UJP90OP OUTPUT TO COMPILER PHASE    75003               12190000
         SPACE 3                                                  75128 12200000
*                                                                 75128 12210000
*                                                                 75128 12220000
* AND WE MUST LET THE DECLARE AND ASSIGNMENT ROUTINES KNOW (IF WE       12230000
*    CALL THEM) THAT THEY ARE BEING CALLED BY A MACRO                   12240000
           MVC ICOMMAND,=CL8'MACRO'                                     12250000
           MVI ISMACRO,C'1'                                             12260000
         L     R14,AJOLGEN                                        75128 12270000
         USING GENDETS,R14                                        75128 12280000
           TM PARMPRNT,X'20'   DO WE PRINT MACRO EXPANSIONS ?           12290000
         DROP  R14                                                75128 12300000
           BNZ P53RDXX         YES                                      12310000
           MVI PRINTIND,C'1'                                            12320000
P53RDXX    EQU  *                                                       12330000
          $CALL UJP50RD        READ FROM MACLIB                         12340000
          $CALL UJSPLIT        SPLIT INTO TOKENS                  74303 12350000
           GETTKN 1                                                     12360000
           CLC =C'MACRO ',TKN                                           12370000
           BE  P53OK2                                                   12380000
         JOLERR 301,'FIRST STATEMENT IS NOT A MACRO BUT ''',#TKN,      *12390000
               ''''                                                     12400000
           B  P53RETNF                                                  12410000
           SP  PCKDSTMT,=P'1'  RESET STMT NO                            12420000
P53RETNF   JOLRETN RC=16                                                12430000
P53OK2     EQU *                                                        12440000
           SPACE 3                                                      12450000
           LH  R1,LEVEL        ADD                                      12460000
           LA R15,SAVENEST(R1)                                          12470000
           MVC 0(1,R15),NEST+1                                          12480000
           XC NEST,NEST        CLEAR THIS NEW NEST FOR THE MACRO        12490000
           LA  R1,1(R1)            1                                    12500000
           STH R1,LEVEL                                                 12510000
         SPACE 3                                                  75128 12520000
* NOW SET UP SOME SYMBOLICS THAT CAN BE REFERENCED BY THE MACRO   75128 12530000
*  WRITER                                                         75128 12540000
         SPACE 3                                                  75128 12550000
         LR    R7,R1          SAVE LEVEL NO                       75128 12560000
         MVC   SYMBOLIC,=CL8'SYSLABEL'                                  12570000
         MVC   WORK(8),P53LABEL GET LABEL WE WERE CALLED WITH     75128 12580000
         MVC   #WORK,=H'8'    SET LENGTH TO 8                     75128 12590000
         BAL  R14,DRPBWORK    DROP TRILING BLANKS                 75128 12600000
         $CALL UJP02DCL       STORE LABEL MACRO WAS CALLED WITH   75128 12610000
         MVC   WORK(8),P53INST    STORE NAME MACRO WAS CALLED WITH75128 12620000
         MVI  #WORK+1,8                                                 12630000
         MVC   SYMBOLIC,=CL8'SYSMACNM' ** IT MAY BE AN ALIAS AND        12640000
         BAL  R14,DRPBWORK    DROP TRILING BLANKS                 75128 12650000
         $CALL UJP02DCL           ** A MACRO WRITER MAY LIKE TO   75128 12660000
         MVC   SYMBOLIC,=CL8'SYSSCMD'  ** KNOW THE NAME T'WAS CALLED    12670000
         MVI  #WORK+1,8                                                 12680000
         BAL  R14,DRPBWORK    DROP TRILING BLANKS                 75128 12690000
         $CALL UJP02DCL           ** WITH                               12700000
         MVI   #WORK+1,1                                                12710000
         MVC   SYMBOLIC(8),=CL8'SYSLEVEL'                               12720000
         STC   R7,WORK                                                  12730000
         OI    WORK,C'0'           EBSIDIC NOW                          12740000
         $CALL UJP02DCL       STORE 'SYSLEVEL'                    75128 12750000
         SPACE 3                                                        12760000
           SPACE 3                                                      12770000
* NOW THE NEXT TASK IS TO SET UP THE MACRO DEFAULT (OR PARAMETER)       12780000
*    INFORMATION                                                        12790000
* A MACRO HAS ACCESS TO ALL SYMBOLICS ETC THAT ARE NORMALLY             12800000
*    DECLARED BUT IF ANY ARE DECLARED IN THIS 'MACRO' THEN ONLY         12810000
*    LOWER LEVELS MAY ACCESS THE INFORMATION.                           12820000
           SPACE 3                                                      12830000
* A TYPICAL SORT OF DEFINITION COULD BE:-                               12840000
*    MACNAME:MACRO(%A=,%B='ABCD');                                      12850000
* THIS NEXT PIECE OF CODE MERELY POPS THE %A IN THE NAME STACK          12860000
*    AND %B WITH ITS VALUE.                                             12870000
**** TWO NEW FEATURES TO HELP THE MACRO WRITER (7 OCT 1973)             12880000
******************************************************************      12890000
* OFTEN IT IS HIGHLY DESIRABLE TO KNOW IF THE USER CODED                12900000
*     AN ITEM,AND OTHER TIMES IT IS HELPFUL TO KNOW WHERE IT            12910000
*     WOULD HAVE BEEN IN THE %LIST                                      12920000
* AND SO:                                                               12930000
*     IF SORT:MACRO(CYLS,%TAPE) WAS CODED (NOTE,NO = SIGNS)             12940000
*         THEN %CYLS = 0 IF NO CYLS WAS CODED BY THE USER               12950000
*             OR ELSE IT IS SET EQUAL TO THE %LIST NUMBER SO            12960000
*             THAT THE MACRO WRITER CAN EASILY GET TO THE PREVIOUS      12970000
*             (OR FOLLOWING) LIST ITEM                                  12980000
*         AND IF THE USER DID CODE TAPE THEN %TAPE='TAPE'               12990000
*             OTHER A NULL STRING                                       13000000
******************************************************************      13010000
           GETTKN 2                                                     13020000
           CLI TKN,C'('                                                 13030000
           BE  P53GET3                                                  13040000
           CLI TKN,C' '                                                 13050000
           BE  P53NODEF        NO DEFAULT DEFINITION                    13060000
* HERE THE TOKEN IS NOT A ' ' OR A '(' SO ASSUMME IT TO BE THE          13070000
*    FIRST PART OF THE DEFINITION                                       13080000
           B   P53GOTS                                                  13090000
P53GET3    GETTKN 3                                                     13100000
P53GOTS    EQU *                                                        13110000
           STH R1,TKNCURR                                               13120000
           CLI TKN,C')'        END ?                                    13130000
           BE  P53NODEF                                                 13140000
* OK THEN,NOW WE SHOULD HAVE A VARIABLE NAME HERE.                      13150000
           CLI TKNTYPE,2       NAME ?                                   13160000
           BE  P53IDNAM                                                 13170000
           CLI TKNTYPE,0       <NUMBER> (MIGHT AS WELL LET THEM         13180000
*                              THROUGH).                                13190000
           BE  P53NUM                                                   13200000
         JOLERR 403,'SYMBOL ''',#TKN,''' INVALID IN MACRO PROTOTYPE'    13210000
           B  P53MOREP         SKIP AND ATTEMPT TO CARRY ON             13220000
P53IDNAM   EQU *                                                        13230000
           CLI TKN,C'%'                                                 13240000
           BE  P53NAMOK                                                 13250000
P53NUM     EQU *                                                        13260000
           MVC SYMBOLIC,TKN         SAVE NAME                     75128 13270000
           GETTKN TKNCURR      GET NEXT TOKEN                           13280000
           CLI TKN,C'='        '=' ?                                    13290000
           BNE P53NAM1         NO,OK                                    13300000
         JOLERR 404,'NAME ''',SYMBOLIC,''' INVALID IN MACRO PROTOTYPE'  13310000
           B  P53MOREP         SKIP AND ATTEMPT TO CARRY ON             13320000
P53NAM1    EQU *                                                        13330000
* HERE LIES A CYLS OR 2314 TYPE PROTOTYPE                               13340000
           MVC #WORK(3),=XL3'000100'                                    13350000
          $CALL UJP02DCL                                                13360000
           B P53TMORE                                                   13370000
P53NAMOK   EQU *                                                        13380000
           MVC SYMBOLIC,TKN+1                                     75128 13390000
           GETTKN LOCN=TKNCURR                                          13400000
           CLI TKN,C'='                                                 13410000
           BE  P53EQUOK                                                 13420000
           MVC #WORK(3),=XL3'0001FF'  SET SPECIAL INDICATOR             13430000
*          STH R1,TKNCURR      SAVE NEXT TKN NUMBER     CVCMOD 80105    13440000
          $CALL UJP02DCL       STORE VALUE                              13450000
           B   P53TMORE        GO AND TEST IF MORE VALUES               13460000
           SPACE                                                        13470000
P53EQUOK   XC  #WORK,#WORK                                              13480000
           MVI WORK,C' '                                                13490000
           GETTKN (R1)         GET THE VALUE                            13500000
           STH R1,TKNCURR                                               13510000
           CLI TKN,C','                                                 13520000
           BE  P53NOVAL                                                 13530000
           CLI TKN,C')'                                                 13540000
           BE  P53NOVAL                                                 13550000
           MVC #WORK(L'TKN+2),#TKN                                      13560000
           GETTKN (1)          GET NEXT                                 13570000
           STH R1,TKNCURR                                               13580000
* NOW HE COULD HAVE CODED %A=(1,2) ETC IN WHICH CASE WE SHALL           13590000
*    JOIN THEM ALL UP FOR HIM.                                          13600000
* ***** NOT NOW                                                         13610000
P53NOVAL   EQU *                                                        13620000
          $CALL UJP02DCL                                                13630000
* NOW ARE WE AT THE END,OR NOT OF THE PROTO-TYPE SET UP PHASE ?         13640000
P53TMORE   EQU *                                                        13650000
           CLC TKNCURR,TKNNO                                            13660000
           BL  P53MOREP                                                 13670000
           B   P53INSTX                                                 13680000
P53MOREP   GETTKN TKNCURR                                               13690000
           CLI TKN,C','        COMMA HERE ?                             13700000
           BNE P53GOTS                                                  13710000
           STH R1,TKNCURR                                               13720000
           B  P53MOREP         SKIP THE COMMA                           13730000
           B   P53GOTS                                                  13740000
           SPACE 3                                                      13750000
P53NODEF   EQU *                                                        13760000
P53INSTX    EQU *                                                       13770000
* NOW THE ORIGINAL INSTRUCTION MUST BE RESTORED FROM GOTTEN CORE  75128 13780000
*    AND ANY OVER-RIDES SET UP IN THE SYMBOLIC TABLE FOR VALUES THAT    13790000
*    WERE IN THE PROTO TYPE                                             13800000
         L     R0,AMACBUF                                         75128 13810000
         LA    R1,#TKNSTRG                                        75128 13820000
         BAL   R14,MOVEDATA        SHIFT STRING BACK              75128 13830000
          $CALL UJSPLIT                                           74303 13840000
           MVC TKNCURR,=H'2'                                            13850000
* NOW A FAIRLY FIDDLY TASK MUST BE PERFORMED                            13860000
*    IN THE SYMBOLIC STACK,WE HAVE STORED ALL THE NAMES.                13870000
*    HOWEVER,THE MACRO CALLER MAY HAVE OVER-RIDDEN THE PROTO-TYPE       13880000
*    AND SO WE MUST DO THAT AND SET UP %LIST VALUES.                    13890000
* FOR PARAMETERS TO BE PASSED AND NOT STORED AS %LIST ITEMS,THE         13900000
*    NAME MUST BE IN THE STACK,SO STARTING AT THE TOP OF THE STACK      13910000
*    FOR THAT LEVEL WE SHALL PROCEED GENTLY DOWN AND FIND THE           13920000
*    CORRESPONDING NAME IN THE TOKEN AREAS.                             13930000
* IF WE FIND A PARAMETER LIKE'FIELDS=(1,72,CH,A)' WE FORM UP            13940000
*    THE BRACKETS AS ONE 'TOKEN' BEFORE STORING THEM                    13950000
           ZAP P53NO,=P'0'     SET %LIST CNTR TO 0                      13960000
           MVC TKNCURR,=H'2'   START AT 2ND SYMBOL                      13970000
P53NEXTT   GETTKN TKNCURR                                               13980000
           STH  R1,TKNCURR                                              13990000
           CLI TKN,C' '        END OF TOKEN STRING ?                    14000000
           BE  P53FIXDF        GO NOW AND SCAN THRU THE TABLE           14010000
*                              AND CHANGE ANY VALUES OF X'00' | X'FF'   14020000
*                              TO 0 OR '' (NULL) FOR THE NEW MACRO      14030000
*                              FEATURE                                  14040000
           CLI TKNTYPE,0       <NUMBER>                                 14050000
           BE  P53NUM5                                                  14060000
           CLI TKNTYPE,2       <IDENTIFIER> ?                           14070000
           BNE P53TCOM          NO TEST IF A COMMA                      14080000
* NOW WE HAVE A TOKEN THAT IS AN <IDENTIFIER> AND WE MUST NOW SEE       14090000
*    IF IT IS A PARAMETER (KEYWORD) DECLARATION.                        14100000
P53NUM5    EQU *                                                        14110000
* NOTE **** WE LET NUMBERS THROUGH NOW.                                 14120000
           LH  R8,TKNCURR      SAVE START NO OF TOKEN COS WE MAY        14130000
*                              HAVE TO 'DELETE' THIS TOKEN LATER        14140000
*                              I.E NOT PUT IT IN AS A %LIST             14150000
* NOW SEARCH THE SYMBOLIC FOR THE NAME (AT THE SAME LEVEL)              14160000
*    WE START AT THE END OF THE TABLE                                   14170000
           L   R7,ASYMTBL      GET ADDRESS OF TABLE                     14180000
           LH  R5,NOSYMS       NO SYMS SO FAR                           14190000
           MH  R5,=H'12'       LENGTH OF TABLE ENTRIES                  14200000
           AR   R5,R7          POINTS AT END OF STACK                   14210000
           LH  R6,=H'-12'      INCREMENT                                14220000
           USING SYMOVLY,R5                                             14230000
P53FSYM1   EQU  *                                                       14240000
           CLC SYMLEVEL(1),LEVEL+1                                      14250000
           BNE P53NOTHR        NOT THERE,COS LEVEL NOT SAME             14260000
           CLC TKN(8),SYMNAME                                           14270000
           BE P53GOTS2                                                  14280000
            BXH R5,R6,P53FSYM1                                          14290000
P53NOTHR   EQU  *                                                       14300000
P53TCOM    EQU  *                                                       14310000
           CLI TKN,C','                                                 14320000
           BE P53NEXTT         SKIP COMMAS HERE                         14330000
           SPACE                                                        14340000
* OK,HERE EITHER THE NAME WAS NOT ALREADY IN THE SYMBOLIC TABLE         14350000
*     OR THIS IS A NUMBER ETC TO BE STORED AS %LIST                     14360000
           AP P53NO,=P'1'                                               14370000
           MVC SYMBOLIC(4),=C'LIST'                               75128 14380000
           UNPK SYMBOLIC+4(4),P53NO                                     14390000
           OI  SYMBOLIC+7,C'0'                                          14400000
           B  P53FORML         FORM UP ( ) LIST IF NECESSARY            14410000
           SPACE 3                                                      14420000
P53GOTS2   EQU *                                                        14430000
           MVC SYMBOLIC,TKN       SAVE NAME FOR ASSIGNMENT ROUTINE      14440000
* NOW IF THE VALUE OF THE STRING IS X'00' | X'FF' WE MUST               14450000
*     CHANGE IT TO THE %LIST VALUE,OR THE TKN VALUE.                    14460000
           L  R15,SYMADDR                                               14470000
           CLC =XL3'000100',0(R15)                                      14480000
           BE  P53MAKL         FIX UP THE LIST NUMBER                   14490000
           CLC =XL3'0001FF',0(R15)                                      14500000
           BNE  P53EQLUP                                                14510000
* NOW THIS ONE MUST BE SET TO THE VALUE OF TOKEN (I.E ITSELF)           14520000
           MVC #WORK(L'TKN+2),#TKN                                      14530000
           B   P53OVRD1                                                 14540000
           SPACE                                                        14550000
P53MAKL    EQU *                                                        14560000
* HERE WE MERELY STORE THE LIST NUMBER                                  14570000
           AP P53NO,=P'1'                                               14580000
           UNPK WORK(4),P53NO                                           14590000
           OI WORK+3,C'0'                                               14600000
           LA R1,4                                                      14610000
P53TLNUM   CLI WORK,C'0'                                                14620000
           BNE P53LOK                                                   14630000
           MVC WORK(4),WORK+1  DROP LEADING ZEROS                       14640000
           BCT R1,P53TLNUM                                              14650000
P53LOK     EQU  *                                                       14660000
           STH R1,#WORK                                                 14670000
           B   P53OVRD1                                                 14680000
* WE HAVE THE NAME.                                                     14690000
*    NOW IF WE GET THE NEXT TOKEN AND SEE IF IT IS AN '=' (WE IGNORE)   14700000
P53EQLUP   EQU *                                                        14710000
           GETTKN TKNCURR                                               14720000
           STH R1,TKNCURR                                               14730000
           CLI TKN,C'='                                                 14740000
           BE P53EQLUP                                                  14750000
           SPACE 3                                                      14760000
P53FORML   EQU *                                                        14770000
* TO EASE THE TASK FOR THE MACRO WRITER,IF THE VALUE STARTS WITH A      14780000
*     '(' WE JOIN THEM ALL UP UNTIL WE FIND A ')'                       14790000
           MVC #WORK(L'TKN+2),#TKN SHIFT TO WORK FOR ASSIGNMENT ROUTINE 14800000
            CLI TKN,C'('        START LIST ?                            14810000
         BNE   P53TDSN        GO TEST IF DSNAME THEN     CHG30014 76200 14820000
         MVC   #WORK(L'TKN),#TKN   OVER-WRITE '(' (LISTS DON'T    75128 14830000
*                                  GET THEM ANYMORE               75128 14840000
* HERE START OF LIST.                                                   14850000
P53CONLT   GETTKN TKNCURR                                               14860000
           STH R1,TKNCURR                                               14870000
         CLI   TKN,C')'       END LIST ?                          75128 14880000
         BE    P53OVRD1       YES, DONT CONCATENATE ')'           75128 14890000
           ORG *-4                                                75311 14900000
           DC  X'47000000'                                        75311 14910000
         CLI   TKN,C' '       END ALL PARMS ?                     75128 14920000
         BE    P53OVRD1       YES -> OUT WE GO                    75128 14930000
P53CONCT EQU   *    CONTINUE CONCATENATION               CHG30014 76200 14940000
           LH   R14,#WORK                                               14950000
           LA  R15,WORK(R14)                                            14960000
           LH  R1,#TKN                                                  14970000
            AR R14,R1                                                   14980000
            CH R14,=AL2(L'WORK)                                         14990000
           BL   P53CONC                                                 15000000
         JOLERR 405,'STRING TOO LONG'                                   15010000
           B   P53RETNF                                                 15020000
P53CONC    STH R14,#WORK                                                15030000
           BCTR R1,0                                                    15040000
           EX  R1,P53MVC1                                               15050000
*        B     P53CONLT                                           75128 15060000
           CLI TKN,C' '                                                 15070000
           BE  P53OVRD1        END LIST IN FACT                         15080000
           CLI TKN,C')'        END LIST ?                               15090000
           BNE  P53CONLT                                          74303 15100000
         B     P53OVRD1       GO STORE VALUE             CHG30014 76200 15110000
         SPACE 4                                         CHG30014 76200 15120000
* NEW FOR RELEASE 3.1 :- JOIN UP DSNAME TYPE TOKENS      CHG30014 76200 15130000
P53TDSN  GETTKN TKNCURR       GET NEXT TOKEN             CHG30014 76200 15140000
         CLI   TKN,C'/'       PASSWORD COMING UP?        JCS OF KCP     15150000
         BE    P53SLASH       YEAH, JUST PASS IT ON      JCS OF KCP     15160000
         CLI   TKN,C'.'       '.'                        CHG30014 76200 15170000
         BNE   P53TBRA6                                  CHG30014 76200 15180000
* THIS TOKEN IS A '.' OR A '/'                           CHG30014 76200 15190000
P53SLASH DS    0H                                                       15200000
         BAL   R14,CONCAT     CONCATENATE TO WORK        CHG30014 76200 15210000
         GETTKN (R1)                                     CHG30014 76200 15220000
         BAL   R14,CONCAT     CONCATENATE TOKEN AS WELL  CHG30014 76200 15230000
         STH   R1,TKNCURR     RESET POINTER              CHG30014 76200 15240000
         B     P53TDSN        GO SEE IF MORE.            CHG30014 76200 15250000
         SPACE 1                                         CHG30014 76200 15260000
P53TBRA6 CLI   TKN,C'('       START OF MBR OR GDG ?   U  CHG30014 76200 15270000
         BNE   P53OVRD1       NO, GO STORE               CHG30014 76200 15280000
         STH   R1,TKNCURR     RESET TOKEN POINTER        CHG30014 76200 15290000
         B     P53CONCT       CONCAT, THEN LOOK FOR ')'  CHG30014 76200 15300000
         SPACE 2                                         CHG30014 76200 15310000
P53OVRD1 CLC =C'LIST0',SYMBOLIC     %LIST MUST BE STORED WITH P02DCL    15320000
         BNE  P53ASN99                                            75311 15330000
         $CALL UJP02DCL                                           75311 15340000
         B    P53NEXTT                                            75311 15350000
P53ASN99 EQU  *                                                   75311 15360000
         $CALL UJP85ASN                                           75311 15370000
           B   P53NEXTT        AND BACK TO THE MAIN LOOP                15380000
           SPACE 3                                                      15390000
P53FIXDF   EQU *                                                        15400000
* NOW SCAN THE SYMBOLIC TABLE AGAIN AND CHANGE ANY X'00' | X'FF'        15410000
*     VALUE TO 0 OR '' (NULL)                                           15420000
           L  R7,ASYMTBL       ADDRESS OF TABLE                         15430000
           LH R5,NOSYMS        NO OF SYMBOLICS                          15440000
           MH R5,=H'12'        LENGTH ENTRIES IN TABLE                  15450000
           AR R5,R7            POINTS TO END OF STACK                   15460000
           LH R6,=H'-12'       INCREMENT                                15470000
P53FSYM2   CLC SYMLEVEL(1),LEVEL+1                                      15480000
           BNE P53RETN0        LEVELS NOT THE SAME,SO RETURN            15490000
           L   R15,SYMADDR     GET ADDRESS OF VALUE OF SYMBOLIC         15500000
           CLC =XL3'000100',0(R15)                                      15510000
           BE  P53MAK0         CHANGE TO ZERO                           15520000
           CLC =XL3'0001FF',0(R15)                                      15530000
           BE  P53MAKNL        CHANGE TO '' (NULL)                      15540000
P53BXH2    BXH R5,R6,P53FSYM2                                           15550000
           B   P53RETN0                                                 15560000
           SPACE 3                                                      15570000
P53MAK0    MVC #WORK(3),=XL3'0001F0'                                    15580000
P53OVRD2   MVC SYMBOLIC,SYMNAME   SET NAME UP FOR ASSIGNMENT ROUTINE    15590000
          $CALL UJP85ASN                                                15600000
           B   P53BXH2                                                  15610000
P53MAKNL   XC  #WORK(2),#WORK                                           15620000
           B   P53OVRD2                                                 15630000
P53RETN0   EQU  *                                                       15640000
         SPACE 3                                                  75128 15650000
* NOW JUST BEFORE WE RETURN, WE MUST SET UP %SYSNLIST WITH THE    75128 15660000
*  NUMBER OF %LIST ITEMS THAT WERE FOUND                          75128 15670000
         MVC   #WORK,=H'3'                                        75128 15680000
         UNPK  WORK(3),P53NO  NO OF %LIST ITEMS                   75128 15690000
         OI    WORK+2,C'0'                                        75128 15700000
         MVC   SYMBOLIC,=CL8'SYSNLIST'                            75128 15710000
         $CALL UJP02DCL                                           75128 15720000
           JOLRETN                                                      15730000
           SPACE 3                                                      15740000
P53MVC1    MVC 0(*-*,R15),TKN  EXECUTED ******                          15750000
         LTORG                                                          15760000
           DC   80S(*)                                                  15770000
           JOLSAVE CSECT=UJP54INC                                       15780000
*    THIS MODULE HAS BEEN CALLED BY THE INCLUDE PROCESSOR WHEN AN       15790000
*          INCLUDE WAS FOUND, OR CALLED BY THE MACRO PROCESSOR.         15800000
* THE CURRENT CARD MUST BE SAVE (IN CASE THERE IS MORE INFORMATION      15810000
*    ON IT) AND WE MUST SAVE THE 'CHARACTER POINTER' (CP),THE TTR       15820000
*    AND ADDRESS IN THE CURRENT BLOCK SO WE CAN GET BACK TO WHERE       15830000
*    WE WERE IN THE INPUT STREAM WHEN WE HAVE FINISHED.                 15840000
           SPACE 3                                                      15850000
         L     R9,AP52DCBS    LOAD DCB SAVE AREAS                 75128 15860000
           USING P52DCBS,R9                                             15870000
         L     R7,ADCBS                                           75128 15880000
         USING DCBS,R7                                            75128 15890000
          MVC  BLDLLEN,=H'58'                                           15900000
          MVC  BLDLNO,=H'1'                                             15910000
           LH  R4,FILENO                                                15920000
           LA  R4,1(R4)                                                 15930000
         CH    R4,=H'30'      TOO MANY LEVELS OR INCLUDES ?       82300 15940000
         FIX 'CHECK THIS'                                               15950005
           BL  P54OK1                                                   15960000
         JOLERR 401,'TOO MANY ACTIVE MACROS/INCLUDES'                   15970000
P54RETNF   JOLRETN RC=16                                                15980000
           SPACE 3                                                      15990000
P54OK1     EQU *                                                        16000000
* NOW LETS SEE WHERE WE ARE (TTR) WITH THE CURRENT DCB                  16010000
           L   R5,CURRDCB                                               16020000
           LA  R1,SYSIN                                           74303 16030000
           FIX 'USE LOAD'                                               16040006
           CR  R5,R1                                              74303 16050000
           BE  P54INCX                                                  16060000
           NOTE (5)                                                     16070000
           LR  R6,R1           SAVE TTR RETURNED TO US                  16080000
* IF CURRENT DCB IS THE WORKFILE DONT WORRY ABOUT THE                   16090005
* CONCATENATION NUMBER    MAYBE ABEND 001 AND S300 WILL GO AWAY ?       16100006
          CLC AWORKFIL+1(3),CURRDCB+1  READING FROM WORKFILE ??         16110006
          BE  *+8                      BLAST AROUND IC                  16120006
         IC    R6,CURRCONC    LOAD CURRENT CONCATENATION NUMBER   75128 16130000
* R6 NOW CONTAINS TTRK                                            75128 16140000
      SPACE 1                                                           16150000
P54INCX   EQU   *                                                       16160000
      SPACE 1                                                           16170000
         SPACE 3                                                  75128 16180000
         MVC   BLDLNAME,ICOMMAND PREPARE FOR MACRO INVOCATION BUT-75128 16190000
         GETTKN  2  GET TKN 2 IN CASE ITS INVOKE | INCLUDE        75128 16200000
* NOW ARE WE INCLUDEING OR MACROING ?                                   16210000
           CLC =C'INCLUDE ',ICOMMAND                                    16220000
         BNE   P54TINV        NO, TEST INVOKE THEN                75128 16230000
         MVC   BLDLNAME,TKN   SHIFT INCLUDE MEMBER NAME           75128 16240000
         LA    R8,PROCLIB     LOAD PROCLIB DCB ADDRESS            75128 16250000
           FIX 'USE LOAD'                                               16260006
         BLDL  (8),BLDL       SEE IF ITS IN PROCLIB               75128 16270000
         B     *+4(R15)       BRANCH ON RETURN CODE TEST          75128 16280000
         B     P54GOTMB       GOT MEMBER,PREPARE TO START PROCESS 75128 16290000
         B     P54NOINC       NO THERE -> ISSUE ERROR MESSAGE     75128 16300000
         B     P54PERME       PERM I/O ERROR ON LIBRARY           75128 16310000
         SPACE 3                                                  75128 16320000
P54NOINC JOLERR 402,'CANNOT FIND MEMBER ''',BLDLNAME,''''               16330000
         JOLRETN RC=16        AND RETURN                          75128 16340000
P54TINV  CLC   =C'INVOKE ',ICOMMAND INVOKE THEN ?                 75128 16350000
         BE    P54INV                                             75128 16360000
* HERE TLS A MACRO INVOCATION                                     75128 16370000
         LA    R8,MACROLIB    GET MACRO DCB                       75128 16380000
         BLDL  MACROLIB,BLDL  SEE IF ITS IN THE MACRO LIB         75311 16390000
         B     *+4(R15)       BRANCH ON RETURN CODE               75128 16400000
         B     P54GOTMB       GOT MEMBER IN MACROLIB              75128 16410000
         B     P54TJOLL       NOT THERE, NOW TRY TO LOAD USERS    75128 16420000
*                             HARD CODE TO DEAL WITH IT           75128 16430000
         B     P54PERME       PERMANENT I/O ERROR ON A LIBRARY    75128 16440000
         SPACE 3                                                  75128 16450000
P54TJOLL L    R8,AJOLLOAD     LOAD DYNAMIC LOAD LIBRARY           75128 16460000
         BLDL  (R8),BLDL      TRY AGAIN                           75128 16470000
         B     *+4(R15)                                           75128 16480000
         B     P54GOTIN       GOT THE MACRO FROM THE INVOKE LIB   75128 16490000
         B     P54RETNF       NOT THERE,SO RETURN                 75128 16500000
         B     P54PERME       PERM ERROR ON LIBRARY               75128 16510000
           SPACE                                                        16520000
P54PERME JOLERR 403,'PERM I/O ERR IN DIRECTORY LOOKING FOR ''',        *16530000
               BLDLNAME,''''                                      75128 16540000
         WTO   'UJP54-03 * JOL LIBRARY HAS PERM I/O ERR *',      75128 *16550000
               ROUTCDE=(11,2),DESC=6                                    16560000
           B   P54RETNF                                                 16570000
           SPACE 3                                                      16580000
P54INV   MVC   BLDLNAME,TKN   SET UP NAME OF ROUTINE TO INVOKE    75128 16590000
         L    R8,AJOLLOAD                                         75128 16600000
         BLDL  (8),BLDL                                  JOL30029 76200 16610000
         B     *+4(R15)                                           75128 16620000
         B     P54GOTIN                                           75128 16630000
         B     P54NOINV                                           75128 16640000
         B     P54PERME                                           75128 16650000
P54NOINV JOLERR 405,'MODULE ''',BLDLNAME,''' CANNOT BE INVOKED-ABSENT'  16660000
         JOLRETN RC=16                                            75128 16670000
         SPACE 3                                                        16680000
P54GOTMB   EQU *                                                        16690000
         BAL   R15,P54STRFI   STORE FILE INFORMATION              75128 16700000
P54DOFND  FIND (8),BLDLTTR,C  POINT TO CORRECT SPOT IN FILE  75128      16710000
P54RETN0 JOLRETN RC=0                                             75128 16720000
         SPACE 3                                                  75128 16730000
P54STRFI EQU   *                                                  75128 16740000
           STH R4,FILENO                                                16750000
* NOW IF WE ARE READING FROM SYSIN AT THE MOMENT,WE MUST SAVE THE       16760000
*    CARD THAT WE ARE LOOKING AT BECAUSE WE CAN'T RE-READ A CARD        16770000
*    CAN WE ?                                                           16780000
           LA  R1,SYSIN                                           74303 16790000
           C   R1,CURRDCB                                         74303 16800000
           BNE P54NSYSI        NOT SYSIN SO DON'T WORRY                 16810000
           MVC SAVECARD,CARD                                            16820000
           SPACE                                                        16830000
P54NSYSI   EQU *                                                        16840000
* NOW WE MUST STORE ODDS AND ENDS LIKE THE TTR WE JUST GOT ETC          16850000
           SH  R4,=H'1'                                                 16860000
           BM  P54FILER                                                 16870000
           MH  R4,=AL2(SAVEDCBL) GET POSN IN TABLE FOR ITEMS            16880000
            LA R4,P52DCBS(R4)  AND ADDRESS                              16890000
*                              *********                           DASD 16900000
          MVI   INCHAR,C' '    STOP ERROR C-2241                   DASD 16910000
*                              *********                           DASD 16920000
           LH  R1,CP           *********                          74303 16930000
           BCTR R1,0           STOP ERROR C-0029                  74303 16940000
           STH R1,CP           *********                          74303 16950000
           MVC SAVECP-P52DCBS(,R4),CP+1                           75128 16960000
         MVC   SAVELREC-P52DCBS(,R4),CURRLREC+1                   75128 16970000
           MVC SAVEDCB-P52DCBS(,R4),CURRDCB                             16980000
           MVC SAVEPOSN-P52DCBS(,R4),ACURREC                            16990000
           MVC SAVEBLKS-P52DCBS(,R4),CURRBLKS                           17000000
           ST  R6,SAVETTR-P52DCBS(R4)                                   17010000
         MVC   CURRCONC,BLDLTTR+3                                 75128 17020000
           SPACE 3                                                      17030000
* NOW SET UP THE POINTERS ETC SUCH THAT WHEN THE READ ROUTINE IS        17040000
*    CALLED,AUTO-MAGICALLY A NEW BLOCK (FROM THE PROCLIB DCB) WILL      17050000
*    BE BROUGHT IN                                                      17060000
           MVI CP,X'7F'        SET CURRENT CHARACTER POINTER HIGH       17070000
           XC  ACURREC,ACURREC                                          17080000
           XC  CURRBLKS,CURRBLKS                                        17090000
         ST    R8,CURRDCB                                         75128 17100000
         BR    R15            BACK TO CALLER                      75128 17110000
P54FILER JOLERR 504,'INTERNAL ERROR'                                    17120000
         JOLRETN RC=16                                                  17130000
         SPACE 3                                                        17140000
P54GOTIN EQU   *                                                        17150000
* HERE WE HAVE FOUND THE USERS ROUTINE THAT IS TO HANDLE THE            17160000
*  INSTRUCTION.                                                         17170000
* NOW WE CAN USE THE BUFFER AREA TO OUTPUT THE DETAILS THAT             17180000
*  THE USER IS GOING TO GIVE US.                                        17190000
         SPACE 3                                                        17200000
* INITIALISE THE OUTPUT BUFFER                                          17210000
         SPACE 3                                                        17220000
         L     R1,AMACBUF                                         75128 17230000
         MVC   0(2,R1),=AL2(4)                                          17240000
         XC    2(20,R1),2(R1)                                           17250000
         CLEAR P98TTR1             CLEAR FIRST TTR OF AREA TOO.   75128 17260000
         SPACE 3                                                        17270000
**************************                                              17280000
* FOR NOW, WE WILL PASS THE FIRST PARAMETER TO THE CALLER,              17290000
* IE IF CODED WAS INVOKE X '123', WE WILL PASS THE 123 WITH             17300000
* OUT THE ''S ON. LATER, THIS MAY BE CAHNGED.                           17310000
**************************                                              17320000
         GETTKN 1                                                       17330000
         CLC  =C'INVOKE ',TKN                                           17340000
         BE  P543                                                       17350000
         GETTKN 2                                                       17360000
         B    P54DROP                                                   17370000
P543     GETTKN 3                                                       17380000
P54DROP  BAL  R14,DROPQUOT                                              17390000
         LA    R1,#TKN        LOAD ADDRESS OF TOKEN      JOL30028 76200 17400000
         ST    R1,DYNPARMS    STORE IN PARM AREA         JOL30028 76200 17410000
         MVI   DYNPARMS,X'80' SET HIGH ORDER BIT ON      JOL30028 76200 17420000
         LA    R1,DYNPARMS    SET R1 -> DYNPARMS         JOL30028 76200 17430000
         ST    R1,CALLAREA    SAVE                       JOL30028 76200 17440000
         B    P54LINK                                                   17450000
         SPACE 3                                                  75128 17460000
* NOW WE HAVE A BIT OF FIDDLING TO DO BEFORE ACTUALLY INVOKING    75128 17470000
*  THE ROUTINE.                                                   75128 17480000
* ORIGINALLY, I THOUGHT IT WOULD BE IN ASSEMBLER, BUT WE MUST     75128 17490000
*  NOW MAKE ALLOWANCES FOR PL1, AND ALSO SOMEONE SUGGESTED        75128 17500000
*  THAT IT MIGHT BE A GOOD IDEA IF WE COULD ALLOW ANY NORMAL      75128 17510000
*  PROGRAM TO BE CALLED - SO WE HAVE A BIT OF FIDDLING TO DO      75128 17520000
*  FOR THAT.                                                      75128 17530000
* LETS SET UP WORK WITH A FEW VALUES.                             75128 17540000
         MVC   WORK(8),ICOMMAND    INVOKE | NAME OF ROUTINE       75128 17550000
         MVC   WORK+8(8),BLDLNAME  NAME OF ROUTINE                75128 17560000
         MVC   #WORK,=H'16'   AND SET THE LENGTH OF IT            75128 17570000
* NOW WE WANT TO SHIFT THE STRING ALONG, DROPPING THE INVOKE AND  75128 17580000
*  THE NAME OF THE ROUTINE CALLED                                       17590000
         GETTKN 1                                                       17600000
         LH    R1,TKNDESC+4   LOAD OFFSET TO 2ND TOKEN            75128 17610000
         CLC   =C'INVOKE ',TKN                                    75128 17620000
         BNE   *+8                                                75128 17630000
         LH    R1,TKNDESC+8   LOAD OFFSET TO 3RD TOKEN            75128 17640000
* NOW WE WANT TO CALCULATE THE LENGTH OF THE STRING MINUS         75128 17650000
*  THE ONE | TWO TOKENS AT THE START OF THE STRING                75128 17660000
         LH    R15,#TKNSTRG   GET CURRENT LENGTH                  75128 17670000
         SR    R15,R1         - OFFSET TO TOKEN FOLLOWING         75128 17680000
         BNM   *+6            IF -VE, NOTOKENS, PASS ZERO PARMS   75128 17690000
         SR    R15,R15        CLEAR 15 THEN                       75128 17700000
         STH   R15,#TKNSTRG   RESET NEW LENGTH                    75128 17710000
* NOW TO SHIFT THE STRING UP. WE WILL USE THE 'MOVEDATA' ROUTINE. 75128 17720000
         LA    R15,#TKNSTRG(R1)                                   75128 17730000
         LR  R0,R15                                                     17740000
         MVC   0(2,R15),#TKNSTRG   SHIFT LENGTH TO STRING-2       75128 17750000
         LH    R15,#TKNSTRG   LOAD LENGTH OF STRING               75128 17760000
         LA    R1,#TKNSTRG                                              17770000
         ST  R1,DYNPARMS                                                17780000
         BAL   R14,MOVEDATA       GO TO MOVEDATA ROUTINE                17790000
* WELL THE ABOVE ISN'T VERY PRETTY,BUT  ....                            17800000
        $CALL  UJSPLIT        RE-SPLIT TOKENS                           17810000
         LTR   R15,R15        DID WE ?                                  17820000
         BNZ   P54RETNF       NOPE -> (ERROR ALREADY GIVEN)             17830000
* NOW SET UP THE OTHER PARAMETERS, THEN LINK                      75128 17840000
* NOW WE CAN ALMOST DO THE LINK                                   75128 17850000
         LA    R1,DYNPARMS    POINT TO THE PARM AREA              75128 17860000
         OI    DYNPARMS,X'80' TELL ANY PROGRAM THAT DOESN'T KNOW  75128 17870000
*                             WHATS HAPPENING THAT THERE IS ONLY  75128 17880000
*                             ONE PARAMETER                       75128 17890000
P54LINK   TIME  BIN    GET CURRENT BINARY TIME                     DASD 17900000
          ST    R0,USER1    SAVE IN SAVE AREA                      DASD 17910000
         LA    R1,DYNPARMS    POINT TO THE PARM AREA               DASD 17920000
         LINK  DE=BLDLNAME,DCB=(8),SF=(E,CALLAREA)                 DASD 17930000
P54CHKRC EQU   *                                            FIX-X 76200 17940000
        ST     R15,USER3  SAVE R15                                 DASD 17950000
        TIME   BIN    GET CURRENT BIN YIME                         DASD 17960000
        C      R0,USER1   HAVE WE ROLLED BY MIDNITE                DASD 17970000
        BNL    *+8        IF NOT  LETS SKIP THE NEXT ADJ           DASD 17980000
        A      R0,=A(24*(360000))  ADD IN 24 HOURS                 DASD 17990000
        S      R0,USER1                                            DASD 18000000
        A      R0,USER5   ADD TO ACCUM                             DASD 18010000
        ST     R0,USER5   AND SAVE                                 DASD 18020000
        L      R0,USER4   LOAD CURRENT INVOKE COUNT                DASD 18030000
        A      R0,ONE    UP THE INVOKE CTR BY ONE                  DASD 18040000
        ST     R0,USER4                                            DASD 18050000
        L      R15,USER3  RELOAD REG 15                            DASD 18060000
         LTR   R15,R15                                            75128 18070000
         BZ    P54INVK0                                           75128 18080000
         JOLERR 406,'DYNAMIC LOADED MODULE RETURNED NON-ZERO' 75128     18090000
         JOLRETN RC=16                                                  18100000
*P54LINK  LA    R15,BLDLNAME                                       DASD 18110000
*         ST    R15,CALLAREA                                       DASD 18120000
*         ST    R8,CALLAREA+4                                      DASD 18130000
*         LINK  EP=UJP38INV,SF=(E,CALLAREA+16),DCB=(8)             DASD 18140000
*         B   P54CHKRC    GO CHECK RETURN CODES.                   DASD 18150000
         SPACE 3                                                  75128 18160000
P54INVK0  LA   R8,WORKFILE     GET CORRECT FILE AS CURRENT    75128     18170000
* NOW CHECK THAT THE DYNAMIC ROUTINE DID PUT ANYTHING                   18180000
* IN THE WORK DATA SET PROVIDED FOR IT.                                 18190000
         IFVALUE   P98TTR1,P54INVDT     GO HOME, DYNAMIC                18200000
         L   R1,AMACBUF   ANY DATA IN BLOCK READY TO GO?                18210000
         CLC 0(2,R1),=H'4'  IS THERE????                                18220000
         BNE  P54INVDT                                                  18230000
* HERE, MERELY RETURN A 4, NO DATA ON WORK FILE                         18240000
         JOLRETN RC=4     TELLS P53 TO GO HOME TOO.                     18250000
P54INVDT EQU  *                                                         18260000
*                                  ROUTINE HAS DONE IT ALL        75128 18270000
         BAL   R15,P54STRFI   STORE CURRENT FILE INFORMATION      75128 18280000
         SPACE 1                                                  75128 18290000
* NOW BECAUSE THERE IS NO 'EOF' ON THE FILE, WE MUST PUT IN       75128 18300000
*  A X'FFFF' TO TELL THE READ ROUTINE IT HAS REACHED EOF          75128 18310000
         L     R1,AMACBUF                                         75128 18320000
         LH    R14,0(R1)      LOAD CURRENT LENGTH OF THE BLOCK    75128 18330000
         LA    R15,0(R1,R14)  CALC NEXT SPOT IN BLOCK             75128 18340000
         MVC   0(2,R15),=X'FFFF' SHIFT THE X'FFFF'                75128 18350000
         LA    R14,4(R14)     RESET LENGTH OF BLOCK               75128 18360000
         STH   R14,0(R1)      ** DONE                             75128 18370000
* NOW WE MUST OUTPUT THE BLOCK TO THE WORK FILE                   75128 18380000
         BAL   R14,OPBLOCK    OUTPUT THE BLOCK                          18390000
         IFVALUE P98TTR1,P54SCUDC                                       18400000
         ST   R1,P98TTR1   SET 1ST TTR BLOCK                            18410000
P54SCUDC MVC   BLDLTTR,P98TTR1 SHIFT IN NEW TTR THAT READ ROUTINES75128 18420000
*                             WILL USE TO START READING NEW RECORD75128 18430000
         MVC   CURRDCB,AWORKFIL AND TELL IT WHICH DCB TO USE      75128 18440000
         L     R8,AWORKFIL                                              18450000
*******************************************************************SOCO 18460000
* THIS CHANGE OF A BRANCH TO DO A FIND MACRO TO A POINT MACRO      SOCO 18470000
* SHOLUD FIX THE SYSTEM 001 ABEND CODE ON THE $$JWORK2 FILE.       SOCO 18480000
*******************************************************************SOCO 18490000
******************************                                     SOCO 18500000
******** B  P54DOFND *********                                     SOCO 18510000
         POINT (8),BLDLTTR     POINT TO FIRST WORK FILE BLOCK      SOCO 18520000
*                                                                  SOCO 18530000
         JOLRETN                                                        18540000
           LTORG                                                        18550000
           DC S(*),S(*),S(*)                                            18560000
         DC    S(*,*,*,*)                                               18570000
         DC    S(*,*,*,*)                                               18580000
         DC    S(*,*,*,*)                                               18590000
         DC    S(*,*,*,*)                                               18600000
         DC    S(*,*,*,*)                                               18610000
           DC  S(*,*,*,*)                                               18620000
           DC  S(*,*,*,*)                                               18630000
           DC  S(*,*,*,*)                                               18640000
           DC  S(*,*,*,*)                                               18650000
           DC  S(*,*,*,*)                                               18660000
           DC  S(*,*,*,*)                                               18670000
           DC  S(*,*,*,*)                                               18680000
           DC  S(*,*,*,*)                                               18690000
           DC  S(*,*,*,*)                                               18700000
           DC  S(*,*,*,*)                                               18710000
           DC  S(*,*,*,*)                                               18720000
          DROP  R7    DROP DCBS                                   75128 18730000
         SPACE 3                                                        18740000
         JOLSAVE CSECT=UJP98OP                                    75128 18750000
* CSECT IS CALLED BY THE 'INVOKED' MODULE, AND IS RESPONSIBLE     75128 18760000
*  FOR STORING THE INVOKED MODULES OUTPUT IN 'WORKFILE' DATA SET  75128 18770000
         SPACE 2                                                  75128 18780000
* ON ENTRY R1 POINTS TO THE RECORD THAT THE USER HAS CREATED      75128 18790000
*  FOR US TO EXECUTE.                                             75128 18800000
***************************************************************    DASD 18810000
* MOD HERE TO ALLOW 80 BYTES RECORDS TO PASS FROM A INVOKE RTN*    DASD 18820000
* ALSO A ATTEMPT TO ALLOW A RECORD AS BIG AS THE INSTREAM     *    DASD 18830000
* BUFFER WAS TAKEN OUT---THE READ ROUTINE CHOPS IT OFF AT 72  *    DASD 18840000
***************************************************************    DASD 18850000
         L     R8,0(R1)       GET ADDRESS OF THE RECORD           75128 18860000
P98TRY2  L     R4,AMACBUF                                         75128 18870000
         LH    R5,0(R4)       LOAD CURRENT BLOCK LENGTH           75128 18880000
         LH   R9,0(R8)         LOAD LENGTH OF RECORD              75128 18890000
         LR    R6,R5          LOAD CURRENT BLOCK LENGTH TO R6,TOO 75128 18900000
         AR    R6,R9          ADD NEW BLOCK LENGTH                75128 18910000
         LH    R15,LMACBUF    GET LENGTH OF THE WORK BUFFER       75128 18920000
         SH    R15,=H'16'      -16,COS INEED SOME ROOM AT THE END 75128 18930000
*                             OF THE LAST BLOCK                   75128 18940000
*        CH    R15,0(R8)  WILL RECORD FIT ALL BY IT SELF  ??       DASD 18950000
*        BNH   P98BIG     WOW  LETS SPLIT                          DASD 18960000
         CR    R6,R15         WILL RECORD FIT ?                   75128 18970000
         BNH   P98MUV         NO                                  75128 18980000
* HERE WE MUST OUTPUT THE BLOCK                                   75128 18990000
         LR    R1,R4          TELL 'OPBLOCK' WHERE THE BLOCK IS   75128 19000000
*                             THAT HAS TO BE OUTPUT               75128 19010000
         BAL   R14,OPBLOCK                                        75128 19020000
         MVC   0(4,R4),=AL2(4,0)                                  75128 19030000
         CLC   P98TTR1,ZERO   HAS THE FIRST BLOCK BEEN OUTPUT ?   75128 19040000
         BNE   P98TRY2        YES, GO O/P RECORD AGAIN            75128 19050000
         ST    R1,P98TTR1     NO,SET UP FIRST BLOCK INDICATOR     75128 19060000
* WE ALSO HAVE TO UPDATE THE TTR POINTER IN THE OPBLOCK            DASD 19070000
* ROUTINE SO WE CAN WRITE OUT MULTIPLE BLOCKS                      DASD 19080000
        ST     R1,SYS1NEXT     UP THE BLOCK ADDRESS                DASD 19090000
         B     P98TRY2                                            75128 19100000
P98MUV   L     R4,AMACBUF                                         75128 19110000
*                             AS AN OUTPUT AREA                         19120000
         LR    R5,R4          AND SAVE IT IN R5                         19130000
         LR    R6,R9          SAVE RECORD LENGTH TO GO                  19140000
         LR    R7,R6          SAVE IT IN R7 TOO                         19150000
          CH    R6,=H'80'      > 80 BYTES ?                        DASD 19160000
          BNH   P98SMALL       NO,SO JUST OUTPUT IT                DASD 19170000
          LA    R6,80                                              DASD 19180000
P98SMALL LA    R6,3(R6)                                           75128 19190000
         AH    R5,0(R4)       CALC ADDRESS OF RECORD AREA         75128 19200000
         EX    R6,P98MVC                                          75128 19210000
*        LR   R0,R8      MOVE THIS GUY TO THE BUFFER               DASD 19220000
*        LR   R1,R5                                                DASD 19230000
*        LA   R1,2(R1)   TO HERE                                   DASD 19240000
*        BAL  R14,MOVEDATA                                         DASD 19250000
         LA    R6,1(R6)    +1 EX MVC ANDFOR RECORD DESC                 19260000
         SLL   R6,16      ZERO BOTTOM BYTES                             19270000
         ST    R6,AVTBLE   SAVE IT A SECOND IN UNUSED AREA              19280000
         MVC   0(4,R5),AVTBLE  SHIFT TO RECORD DESCRIPTOR               19290000
         LH    R1,0(R4)       LOAD BLOCK LENGTH                   75128 19300000
         AH    R1,AVTBLE      ADD RECSIZE                         75128 19310000
         STH   R1,0(R4)       RESET BLOCK LENGTH                  75128 19320000
         JOLRETN                                                        19330000
P98MVC   MVC   2(*-*,R5),0(R8)                                75128DASD 19340000
*P98BIG  CVD  R15,DBL                                              DASD 19350000
*       UNPK OP(5),DBL                                             DASD 19360000
*       OI   OP+4,C'0'                                             DASD 19370000
*       MVC  #OP,=H'5'                                             DASD 19380000
*       JOLERR 401,'INVOKE ROUTINE RETURNED A RECORD LARGER THAN THE IN*19390000
               STREAM BUFFER SIZE OF-->',#OP                       DASD 19400000
*         MVC #OP,=H'50'                                           DASD 19410000
*         MVC OP(50),2(R8) MOVE IN PART OF RECORD                  DASD 19420000
*         JOLERR 402,'RECORD ''',#OP,'''...ECT    DROPPED'         DASD 19430000
*       JOLRETN                                                    DASD 19440000
          LTORG                                                         19450000
           DC  S(*,*,*,*)                                               19460000
           DC  S(*,*,*,*)                                               19470000
           DC  S(*,*,*,*)                                               19480000
           DC  S(*,*,*,*)                                               19490000
           DC  S(*,*,*,*)                                               19500000
           DC  S(*,*,*,*)                                               19510000
           PRINT OFF                                                    19520006
         DCBD  DSORG=PS,DEVD=DA                                   75128 19530000
           PRINT ON,DATA                                                19540006
            LTORG                                                       19550000
