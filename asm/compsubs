           TITLE 'JOL SUBROUTINES'                                74303 00010000
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1971,1972,1973,1974,1975       00020000
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1976,1977,1978,1979,1980.      00030000
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1981.                          00040000
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1982.                          00050000
* REFER TO INSTRUCTIONS ON COPYRIGHT NOTICE FORM NO CCS-C001.           00060000
           SPACE 3                                                      00070000
*                   J             000000            L                   00080000
*                   J            0      0           L                   00090000
*                   J           0        0          L                   00100000
*                   J          0          0         L                   00110000
*                   J         0            0        L                   00120000
*                   J         0            0        L                   00130000
*                   J         0            0        L                   00140000
*                   J         0            0        L                   00150000
*                   J         0            0        L                   00160000
*                   J         0            0        L                   00170000
*                   J         0            0        L                   00180000
*        J          J         0            0        L                   00190000
*         J        J           0          0         L                   00200000
*          J      J             0        0          L                   00210000
*           J    J               0      0           L                   00220000
*            JJJJ                 000000            LLLLLLLLLLL         00230000
           SPACE 3                                                      00240000
         COPY JOLCOM                                                    00250000
           TITLE 'GENERAL PURPOSE STORE ROUTINE'                        00260000
         PRINT DATA                                               75128 00270000
           JOLSAVE CSECT=UJS10STR,BASE=1                          74303 00280000
* THIS CSECT RECIEVES CONTROL FROM THE JOLSTOR MACRO.                   00290000
* ON ENTRY,R14 POINTS TO THE PARAMETER LIST DESCRIBED BELOW AS UJS10DST 00300000
           USING JOLCOM,R2                                              00310000
           USING UJS10DST,R14                                           00320000
* WHAT WE WANT TO END UP WITH IS THIS:-                                 00330000
* R4=L'ERROR MESSAGE                                                    00340000
* R5=L'RECEIVE                                                          00350000
* R6=L'SEND                                                             00360000
* R7=A(ERROR MESSAGE)                                                   00370000
* R8=A(RECEIVE)                                                         00380000
* R9=A(SEND)                                                            00390000
           LH R15,S10RETN4     LOAD AN LA 15 INSTRUCTION                00400000
           STH R15,CALLAREA+24                                    74303 00410000
           STH R15,CALLAREA+28                                    74303 00420000
           MVI CALLAREA+25,0     MOW AN LA R0 INSTRUCTION         74303 00430000
           MVC CALLAREA+26(2),S10SSEND                            74303 00440000
           MVC CALLAREA+30(2),S10SREC                             74303 00450000
           EX  0,CALLAREA+24   LA R0,SEND                         74303 00460000
           EX  0,CALLAREA+28   LA R15,RECEIVE                           00470000
           DROP R1                                                74303 00480000
           LR  R11,R1          SWITCH TO A NICER BASE REGISTER    74303 00490000
           USING UJS10STR,R11                                     74303 00500000
           LR  R9,R0           R9=A(SEND)                               00510000
           LR  R8,R15          R8=A(RECEIVE)                      74303 00520000
           SR  R4,R4                                                    00530000
           SR  R5,R5                                                    00540000
           SR  R6,R6                                                    00550000
           IC  R4,S10LERR      LENGTH ERROR MESSAGE                     00560000
           IC  R5,S10LREC      LENGTH RECEIVE AREA                      00570000
           IC  R6,S10LSEND     LENGTH SEND AREA                         00580000
           LA  R7,S10ERRMS                                              00590000
           LTR R6,R6           IS LENGTH SEND=0?,IE VARYING STRING      00600000
           BNZ S10NOVR                                                  00610000
           LH  R6,0(R9)        LOAD LENGTH OF STRING                    00620000
           LA  R9,2(R9)        POINT 9 TO REAL DATA                     00630000
* NOW SAVE R14 (-> PARM AREA)                                           00640000
S10NOVR    LR  R10,R14                                                  00650000
           DROP R14                                                     00660000
           USING UJS10DST,R10                                           00670000
         SPACE 2                                         JOL30136 76200 00680000
* CHECK LENGTH TO BE NON-ZERO                            JOL30136 76200 00690000
         LTR   R6,R6                                     JOL30136 76200 00700000
         BZ    S10RETN0                                  JOL30136 76200 00710000
         SPACE 2                                         JOL30136 76200 00720000
* NOW LETS SEE IF WE HAVE TO TEST THE FIELD TO BE NUMERIC.              00730000
* WE DO THIS IF:-                                                       00740000
*    1. THE S10VAL IS ^=0                                               00750000
*    2. THE RECEIVE AREA IS NOT CHAR                                    00760000
           LH  R12,S10VAL                                               00770000
           LH  R1,=X'FFFF'     IF S10VAL=-1,WANT MAX VALUE IN R12,      00780000
           NR  R12,R1          NOT -1                                   00790000
           LTR R12,R12                                                  00800000
           BNZ S10TNUM         GO TEST IF NUMERIC                       00810000
           CLI S10TREC,C'C'    CHARACTER STRING?                        00820000
           BE  S10CHAR         YES                                      00830000
           LH  R12,=X'7FFF'    MAX NUMBER IN HALF WORD            74303 00840000
* HERE WE MUST TEST THE CHAR STRING TO BE NUMERIC.                      00850000
S10TNUM    LR  R0,R6           R0=LENGTH STRING                         00860000
           LR  R1,R9           R1=A(STRING)                             00870000
           L   R15,ATNUM                                          75311 00880000
           BALR R14,R15        BALR TO IT                               00890000
           LTR R15,R15         DID IT CONVERT ?                         00900000
         BNZ   S10NUMER       NO,SO ERROR IN <NUMBER>             75128 00910000
         LR    R15,R1                                             75128 00920000
* OK,HERE IT CONVERTED,BUT IS IT IN RANGE ?                             00930000
           CLI S10TREC,C'C'    CHARACTER STRING?                        00940000
           BE  S10CHAR         YES,SO MERELY PUT IT AWAY,WE HAVE        00950000
*                              CHECKED IT TO BE NUMERIC.                00960000
*                              THE S10CHAR ROUTINES WILL DO MORE        00970000
*                              CHECKING FOR US,IE IS RECEIVE '' AND     00980000
*                              LONG ENOUGH TO CONTAIN THE DATA.         00990000
* NOW HERE WE HAVE A VALID NUMERIC IN R15.                              01000000
* WE WILL STORE THE NUMBER IF THE RECEIVING FIELD IS 0 AND IF IT        01010000
* WILL FIT. HOWEVER R12 NOW CONTAINS A NUMBER THAT MUST BE USED         01020000
* TO CHECK THE RANGE AS WELL.                                           01030000
           CR  R15,R12         CR REGISTERS                             01040000
           BH  S10NUMRG        RANGE FAILURE                            01050000
           CLI S10LREC,1       IS LENGTH RECEIVE ONLY 1?                01060000
           BE  S10NUML1                                                 01070000
           CH  R15,=H'32767'                                            01080000
           BH  S10NUMBG        TOO BIG,ERROR                            01090000
           CLC 0(2,R8),=H'0'   IS RECEIVE FIELD =0?                     01100000
           BNE S10NOTNL        NO -> GIVE ERROR IF OVER-RIDE=' '        01110000
           STH R15,0(R8)       STORE THE VALUE.                         01120000
S10RETN0   SR  R15,R15                                                  01130000
* NOW WE MUST UPDATE THE RETURN ADDRESS                                 01140000
* R10 POINTS TO THE PARAMETER LIST NOW. WE MUST SKIP IT,AND ADD         01150000
*    THE LENGTH OF THE ERROR MSSGE CONSTANT AND ROUND UP                01160000
S10RETN    SR  R14,R14                                                  01170000
           IC  R14,S10LERR                                              01180000
           LA  R14,S10ERRMS-UJS10DST+1(R10,R14)                         01190000
           SRL R14,1           /2                                       01200000
           SLL R14,1           ROUND UP                                 01210000
           L   R1,4(R13)       GET OLD SAVE ADDRESS                     01220000
           ST  R14,12(R1)      RESET R14 IN SAVE AREA                   01230000
           JOLRETN RC=(15)     AND RETURN                               01240000
           SPACE 1                                                      01250000
S10RETN4   LA  R15,4                                                    01260000
           B   S10RETN                                                  01270000
           SPACE 1                                                      01280000
S10NUML1   EQU *                                                        01290000
* HERE,WE ARE STORING INTO A 1 BYTE FIELD                               01300000
           CLI 0(R8),0         IS FIELD 0 OR HAS SOMETHING BEEN STORED  01310000
*                              IN IT ALREADY ?                          01320000
           BNE S10NOTNL        NOT NULL,GIVE ERROR                      01330000
           STC R15,0(R8)       STORE THE CHARACTER (1 BYTE NUMBER)      01340000
           B   S10RETN0        RETURN GRACEFULLY.                       01350000
           SPACE 2                                                      01360000
S10CHAR    EQU *                                                        01370000
* WE HAVE BEEN REQUESTED TO STORE A CHARACTER STRING.                   01380000
* LETS REDUCE THE LENGTHS OF THE RECEIVING AND SENDING STRINGS          01390000
* SO THAT WE CAN DO SOME CLC'S AND MVC'S WITH AN 'EXECUTE'              01400000
           BCTR R5,0           RECEIVE                                  01410000
           BCTR R6,0           SEND                                     01420000
           SPACE 1                                                      01430000
          CLI   0(R8),C' '   IS THIS FELLOW STARTING WITH A BLANK  DASD 01440000
          BNE   S10NOTNC     NOPE -  ERROR                         DASD 01450000
          LTR   R15,R5       LOAD R5 AND DECREMENT BY 1 FOR EXEC   DASD 01460000
          BZ    S10BYEX      ONLY 1 BYTE LONG                      DASD 01470000
          BCTR  R15,0        REDUCE                                DASD 01480000
           EX  R15,S10TNULL     TEST NULL                          DASD 01490000
           BNE S10NOTNC        NOT,SO GIVE A MESSAGE.                   01500000
           SPACE 1                                                      01510000
S10BYEX    EQU  *                                                  DASD 01520000
           CR  R6,R5           TEST IF IT WILL FIT                      01530000
           BH  S10TOOBG        WON'T FIT,ERROR                          01540000
* WELL IT WILL FIT SO LET'S SHIFT IT.                                   01550000
           EX  R6,S10MUVCH     DONE                                     01560000
           B   S10RETN0        AND RETURN                               01570000
*S10TNULL   CLC 0(*-*,R8),BLANKS                TEST BLANK         DASD 01580000
S10TNULL   CLC 1(*-*,R8),0(R8)                  TEST BLANK         DASD 01590000
S10MUVCH   MVC 0(*-*,R8),0(R9)                 MOVE DATA                01600000
S10NOTNL   BCTR R6,0           REDUCE <NUMBER> LENGTH BY 1              01610000
S10NOTNC   EQU *               CHARACTER LENGTH ALREADY REDUCED         01620000
           CLI OVERRIDE,C' '   ARE WE IN AN OVER-RIDE TYPE SITUATION?   01630000
         BNE   S10RETN4       YES,BACK-NO ACTION-NO ERROR MSSGE   75311 01640000
           BAL R12,S10SETUP    SET-UP FIRST PART OF ERROR MESSAGE       01650000
         JOLERR 301,#OP,''' FIELD ALREADY CONTAINS DATA'                01660000
           B   S10RETN4                                                 01670000
           SPACE 2                                                      01680000
S10NUMBG   BCTR R6,0           REDUCE LENGTH OF NUMBER BY ONE           01690000
S10TOOBG   BAL  R12,S10SETUP   SET UP FIRST PART OF MESSAGE.            01700000
         JOLERR 302,#OP,''' FIELD AS IT IS TOO SHORT TO RECEIVE THE DATA01710000
               A'                                                       01720000
           B   S10RETN4        RETURN                                   01730000
           SPACE 2                                                      01740000
S10NUMRG   BCTR R6,0           NUMBER OUT OF RANGE                      01750000
           BAL R12,S10SETUP                                             01760000
           LH  R1,#OP                                                   01770000
           LA  R15,OP(R1)                                               01780000
           MVC 0(31,R15),=C' FIELD AS IT IS GREATER THAN '''            01790000
           LH  R12,10(R10)                                              01800000
           CVD R12,DBL                                                  01810000
           UNPK 31(5,R15),DBL                                           01820000
           OI   35(R15),C'0'                                            01830000
           MVI  36(R15),C''''                                           01840000
           LA  R1,36(R1)                                                01850000
           STH R1,#OP                                                   01860000
           JOLERR 303,#OP                                               01870000
           B   S10RETN4                                                 01880000
           SPACE 2                                                      01890000
S10NUMER   BCTR R6,0           NOT NUMERIC ERROR                        01900000
           BAL R12,S10SETUP                                             01910000
         JOLERR 304,#OP,''' FIELD AS IT IS NOT NUMERIC'                 01920000
           B   S10RETN4                                                 01930000
           SPACE 2                                                      01940000
* S10SETUP,INITIALISE ERROR TEXT                                        01950000
S10SETUP   MVI OP,C''''        SHIFT ' INTO ERROR MESSAGE TEXT          01960000
           LA  R1,OP+1         LOAD ADDRESS NEXT BYTE                   01970000
           EX  R6,S10MUVE1     MOVE IN DATA IGNORED                     01980000
           LA  R1,1(R1,R6)     GET ADDRESS NEXT BYTE                    01990000
           MVC 0(21,R1),=C''' NOT STORED IN THE '''                     02000000
           EX  R4,S10MUVE2     SHIFT IN FIELD NAME IGNORED              02010000
           LA  R1,21(R1,R4)    ADDRESS NEXT BYTE                        02020000
           LA  R15,OP          A(START STRING)                          02030000
           SR  R1,R15          = LENGTH OF STRING                       02040000
           STH R1,#OP          STORED.                                  02050000
           BR  R12                                                      02060000
* NOW 'OP' CONTAINS 'DATA' NOT STORED AS 'LABEL                         02070000
           SPACE 3                                                      02080000
S10MUVE1   MVC 0(*-*,R1),0(R9)                                          02090000
S10MUVE2   MVC 21(*-*,R1),0(R7)                                         02100000
           LTORG                                                        02110000
           DROP R10                                                     02120000
           DC S(*,*,*,*)                                          74303 02130000
           DC S(*,*,*,*)                                          74303 02140000
           DC S(*,*,*,*)                                          74303 02150000
           DC S(*,*,*,*)                                          74303 02160000
           DC S(*,*,*,*)                                          74303 02170000
           DC S(*,*,*,*)                                          74303 02180000
           DC S(*,*,*,*)                                          74303 02190000
           DC S(*,*,*,*)                                          74303 02200000
UJS10DST   DSECT                                                        02210000
S10SREC    DS  S                                                        02220000
S10SSEND   DS  S                                                        02230000
S10LERR    DS  AL1                                                      02240000
S10LREC    DS  AL1                                                      02250000
S10LSEND   DS  AL1                                                      02260000
S10TREC    DS  C                                                        02270000
S10VAL     DS  H                                                        02280000
S10ERRMS   DS  C                                                        02290000
         TITLE 'OUTPUT TO WORK FILE'                                    02300000
           JOLSAVE CSECT=UJS15OP                                        02310000
* THIS ROUTINE ACTUALLY OUTPUTS TO THE WORKFILE                         02320000
           L   R3,0(R1)        LOAD ADDRESS OF RECORD TO GO OUT   74303 02330000
           USING JOLCOM,R2                                              02340000
* R3 POINTS TO THE INFORMATION TO BE WRITTEN OUT                        02350000
           LH  R0,0(R3)        LOAD LENGTH OF RECORD              75128 02360000
           LTR R0,R0                                              75128 02370000
           BP   S15POS                                                  02380000
         JOLERR 501,'-VE OR 0 LEN RECORD'                               02390000
S15RETNF   L  R15,4(R13)                                                02400000
           SR R1,R1                                                     02410000
           ST R1,24(R15)                                                02420000
           JOLRETN RC=16                                                02430000
S15POS     EQU   *                                                      02440000
           L   R0,AWRKCNTL                                        75128 02450000
         LR    R1,R3          SWAP TO CORRECT REG FOR S30OP       75128 02460000
         $CALL UJS30OP        CALL OP ROUTINE                           02470000
         L     R15,4(R13)                                               02480000
         ST    R1,24(R15)                                               02490000
          L   R14,AERRCNTL                                              02500000
         USING CATX,R14                                           76200 02510000
          MVC   WORKBLKN,24(R15)   SHIFT CURRENT BLKNO                  02520000
            DROP  R14                                                   02530000
          JOLRETN                                                       02540000
         LTORG                                                          02550000
           DC   S(*),S(*),S(*),S(*)                                     02560000
           DC   S(*),S(*),S(*),S(*)                                     02570000
           DC   S(*),S(*),S(*),S(*)                                     02580000
           DC   S(*),S(*),S(*),S(*)                                     02590000
           DC   S(*),S(*),S(*),S(*)                                     02600000
         TITLE 'FIND/GET/POINT TO INFO ON WORK FILE'                    02610000
         JOLSAVE CSECT=UJS16GID                                   75128 02620000
* THIS CSECT GETS AN IDENTIFIER AND TRANSFERS IT TO TRANS         75128 02630000
         LR    R4,R1           SAVE R1                            87150 02631002
         CLEAR TRANS                                              75128 02640000
         LR    R1,R4           RESTORE R1                         87150 02641002
         $CALL UJS16PID  SEARCH NAME TABLE,GET RECORD INTO CORE   75128 02650000
*                        IF ITS NOT ALREADY                       75128 02660000
         LR    R5,R0     SET R5=CORE ADDRESS                      75128 02670000
         LR    R6,R1     GET TABLE POSITION (MAY BE RQD BY CALLER)75128 02680000
         LTR   R15,R15   DID WE FIND IT                           75128 02690000
         BNZ   S16FAIL   NO->                                     75128 02700000
* NOW R5 CONTAINS THE CORE ADDRESS FOR THE RECORD                       02710000
         MVC   DBL(2),0(R5)   GET REC LEN (NO 0C6)                      02720000
         LH    R7,DBL         GET LENGTH INTO R7                        02730000
         BCTR  R7,0           -1 FOR MVC EXECUTE                        02740000
         CH    R7,=AL2(L'TRANS-1) WILL IT FIT IF WE MOVE IT ?           02750000
         BH    S16FAIL0       NOPE                                      02760000
         EX    R7,S16MVC1     YES, SHIFT IT                             02770000
         SR    R15,R15        CLEAR RETURN CODE                         02780000
S16FAIL  L     R9,4(R13)      GET OLD SAVE AREA                         02790000
         STM   R5,R6,20(R9)  RESET CALLERS R0,R1                        02800000
         JOLRETN RC=(15)                                                02810000
         SPACE 2                                                        02820000
S16FAIL0 JOLERR 502,'RECORD TOO LARGE'                            75311 02830000
         LA    R15,4          SET R15 NON-ZERO FOR ERROR          75128 02840000
         B     S16FAIL                                                  02850000
S16MVC1  MVC   TRANS(*-*),0(R5)                                         02860000
         DC    S(*,*,*,*)                                               02870000
         DC    S(*,*,*,*)                                               02880000
         DC    S(*,*,*,*)                                               02890000
         DC    S(*,*,*,*)                                               02900000
         DC    S(*,*,*,*)                                               02910000
         DC    S(*,*,*,*)                                               02920000
         JOLSAVE CSECT=UJS16PID                                   75128 02930000
* THIS CSECT WILL FIND AND LOAD THE REQD INFORMATION FOR AN IDENTIFIER  02940000
*                                                                       02950000
* SEVERAL CHANGES HAVE BEEN MADE HERE; ORIGINALLY EVERY DECODED   75128 02960000
* DSID ETC WAS OUTPUT AS A SEPERATE BLOCK ON DISK, NOW WE BLOCK   75128 02970000
* THINGS UP A BIT.                                                75128 02980000
*                                                                       02990000
* NOW WE HAVE THESE 3 PROBLEMS :                                  75128 03000000
*    THE THING WE WANT MAY BE IN THE BLOCK BEING FILLED           75128 03010000
*    THE THING WE WANT MAY BE ON DISK                             75128 03020000
*    THE THING WE WANT MAY BE IN THE INPUT BUFFER                 75128 03030000
* SO:-                                                            75128 03040000
           L   R3,0(R1)        LOAD PARM                          74303 03050000
         L   R10,AERRCNTL                                               03060000
         USING ACATBUF,R10                                        76200 03070000
           USING JOLCOM,R2                                              03080000
           USING IDFNAME,R3    JUST A DS CL8 DSECT                      03090000
          $CALL UJS17FID,IDFNAME                                  74303 03100000
* NOW THE ADDRESS IS RETURNED IN THE FORM - BLOCKNO/OFFSET IN R1  75128 03110000
           LR  R4,R1                                                    03120000
           LTR R15,R15                                                  03130000
           BNZ S16RETN                                                  03140000
           USING IDTABLE,R4                                             03150000
           LH  R5,IDADDR+2     ADDRESS IN THE BLOCK               75128 03160000
           LTR  R5,R5                                                   03170000
           BNZ  S16TDISK                                                03180000
         JOLERR 401,'IDENTIFIER ''',IDFNAME,''' IS A NAME ONLY AND CAN *03190000
               ONLY BE TESTED WITH AN IF'                               03200000
            LA R15,16       ERROR INDIC                   75051         03210000
           B  S16RETN                                                   03220000
S16TDISK   EQU  *                                                       03230000
         CLC   WORKBLKN,IDDISK IS IT IN THE CURRENT BLOCK ?       75128 03240000
           BNE S16NOTC         NOPE                               75128 03250000
* HERE IT IS IN THE CURRENT BLOCK.                                75128 03260000
           L   R1,AWORKBUF     LOAD ADDRESS BUFFER                75128 03270000
S16AR      AR  R5,R1           R5 -> RECORD IN CURRENT BUFFER     75128 03280000
           B   S16MUVRC                                           75128 03290000
           SPACE 1                                                75128 03300000
S16NOTC    EQU *                                                  75128 03310000
* WELL LETS SEE IF IT IS IN THE INPUT WORK BUFFER                 75128 03320000
           CLC IDDISK,WORK2BLK                                    75128 03330000
           BNE S16READ         NOPE,WE'LL HAVE TO READ IT IN      75128 03340000
S16LWK2    L   R1,AWORK2BF                                              03350000
           B   S16AR                                                    03360000
S16MUVRC LR    R3,R5                                              75128 03370000
S16RETN0   SR  R15,R15                                                  03380000
S16RETN    EQU  *                                                       03390000
           L  R1,4(R13)                                                 03400000
         STM   R3,R4,20(R1)                                       75128 03410000
           JOLRETN RC=(15)                                              03420000
S16READ    EQU *                                                        03430000
* REQD INFO IS ON DISK,HAUL IT IN.                                      03440000
         LH   R15,IDDISK      GET BLOCK NO. CONTAINING INFO       75128 03450000
         STH  R15,WORK2BLK    RESET CURRENT INPUT BLOCK NUMBER    75128 03460000
*                             SO WE WON'T RE-READ THIS BLOCK SHOUL75128 03470000
*                             D WE WANT MORE INFO OUT OF IT       75128 03480000
         SLL  R15,2            * 4                                      03490000
         L     R6,ADCBS       GET DCB ADDRESSES                   75128 03500000
         USING DCBS,R6                                            75128 03510000
           POINT WORKFILE,WORKTTR1(R15)                                 03520000
         DROP  R6                                                 75128 03530000
           L   R6,AWORK2BF                                              03540000
           READ WORKINDB,SF,,(6),MF=(E,WORKINDB)                  75128 03550000
           CHECK WORKINDB                                               03560000
           B   S16LWK2                                                  03570000
           LTORG                                                        03580000
         DROP  R10                                                      03590000
           DC   S(*),S(*),S(*),S(*)                                     03600000
           DC   S(*),S(*),S(*),S(*)                                     03610000
           DC   S(*),S(*),S(*),S(*)                                     03620000
           DC   S(*),S(*),S(*),S(*)                                     03630000
           DC   S(*),S(*),S(*),S(*)                                     03640000
S16DSECT   DSECT                                                  74303 03650000
IDFNAME    DS  CL8                                                74303 03650103
         EJECT                                                          03650203
S16EDSEC DSECT                                                          03650303
         DS    18F                                                      03650403
S16SAVEC DS    CL8             SAVE COMMAND AREA                        03650503
         COPY  DDEXTRA                                                  03650603
S16EXTEN EQU   *-S16EDSEC                                               03650703
         JOLSAVE CSECT=UJS16EXT,SIZE=S16EXTEN                     75128 03651003
         USING S16EDSEC,R13                                       87150 03651104
* THIS CSECT EXAMINES THE DDDSNDET RECORD AND READS ANY EXTRA     87150 03652003
* INFORMATION SUCH AS SUBSYS OR LONG VOLUMES, AND OUTPUTS         87150 03652103
* A RECORD TO THE GENERATE PHASE WITH THE EXTRA INFORMATION.      87150 03652203
*                                                                       03653003
         L     R3,0(R1)        LOAD PARM(DDDSNDET)                87150 03659403
         USING DDDSNDET,R3                                              03659503
         CLC   DDAEXTRA,ZERO                                            03659604
         BNE   S16GEXT                                                  03659704
         JOLRETN                                                        03659804
S16GEXT  L     R10,AERRCNTL                                             03659904
         USING ACATBUF,R10                                        76200 03660004
* FOR PATH ON THE DDCARD, I HAVE COPIED IT INTO GOTTEN STORAGE,   J60   03660105
* SOMETHING I WOULD NEVER NORMALLY DO.                            J60   03660205
         CLI   DDTYPE,DDPATH                                      J60   03660305
         BNE   S16NOTGT                                           J60   03660406
         L     R4,DDAEXTRA                                        J60   03660506
*                                                                       03660605
         JOLRETN                                                        03660706
*                                                                       03660803
S16NOTGT DS    0H                                                 J60   03660905
* NOW WE HAVE THESE 3 PROBLEMS :                                  87150 03661003
*    THE THING WE WANT MAY BE IN THE BLOCK BEING FILLED           87150 03661103
*    THE THING WE WANT MAY BE ON DISK                             87150 03661203
*    THE THING WE WANT MAY BE IN THE INPUT BUFFER                 87150 03661303
* SO:-                                                            87150 03661403
* NOW THE ADDRESS IS IN THE FORM - BLOCKNO/OFFSET IN R1           87150 03661503
         LH    R4,DDAEXTRA     GET THE ADDRESS OF THE BLOCK       87150 03661603
         LH    R5,DDAEXTRA+2   ADDRESS IN THE BLOCK               87150 03661703
         CH    R4,WORKBLKN     IS IT IN THE CURRENT BLOCK ?       87150 03662303
         BNE   S16NOTCU        NOPE                               87150 03662403
* HERE IT IS IN THE CURRENT BLOCK.                                75128 03662503
         L     R1,AWORKBUF     LOAD ADDRESS BUFFER                75128 03662603
S16AR3   AR    R5,R1           R5 -> RECORD IN CURRENT BUFFER     75128 03662703
         B     S16WRITE                                           87150 03662803
         SPACE 1                                                  87150 03662903
S16NOTCU EQU   *                                                  87150 03663003
* WELL LETS SEE IF IT IS IN THE INPUT WORK BUFFER                 87150 03663103
         CH    R4,WORK2BLK                                        87150 03663203
         BNE   S16READX        NOPE,WE'LL HAVE TO READ IT IN      87150 03663303
S16LDWK  L     R1,AWORK2BF                                              03663404
         B     S16AR3                                                   03663503
S16READX EQU   *                                                        03664203
* REQD INFO IS ON DISK,HAUL IT IN.                                      03664303
         LR   R15,R4          GET BLOCK NO. CONTAINING INFO       87150 03664403
         STH  R15,WORK2BLK    RESET CURRENT INPUT BLOCK NUMBER    87150 03664503
*                             SO WE WON'T RE-READ THIS BLOCK SHOUL87150 03664603
*                             D WE WANT MORE INFO OUT OF IT       87150 03664703
         SLL  R15,2            * 4                                      03664803
         L     R6,ADCBS       GET DCB ADDRESSES                   75128 03664903
         USING DCBS,R6                                            75128 03665003
         POINT WORKFILE,WORKTTR1(R15)                                   03665103
         DROP  R6                                                 75128 03665203
         L     R6,AWORK2BF                                              03665303
         READ WORKINDB,SF,,(6),MF=(E,WORKINDB)                    75128 03665403
         CHECK WORKINDB                                                 03665503
         B     S16LDWK                                                  03665604
S16WRITE DS    0H                                                 87150 03665704
* NOW R5 CONTAINS THE CORE ADDRESS FOR THE RECORD                       03666003
         LH    R7,0(R5)       GET REC LEN (NO 0C6)                      03666103
         BCTR  R7,0           -1 FOR MVC EXECUTE                        03666303
         CH    R7,=AL2(LENDDEXT) WILL IT FIT IF WE MOVE IT ?            03666403
         BH    S16FAIL2       NOPE                                      03666503
         EX    R7,S16MVC2     YES, SHIFT IT                             03666603
         MVC   ITEXT,#DDSUBS   MOVE IN SUBSYS ONLY FOR NOW              03667603
         LA    R1,IBODY+2                                               03667703
         AH    R1,#DDSUBS                                               03667803
         STH   R1,ILENGTH                                               03667903
         MVC   S16SAVEC,ICOMMAND                                        03668003
         MVC   ICOMMAND,=CL8'SUBSYS'                                    03668103
         OPINST INST                                                    03668303
         MVC   ICOMMAND,S16SAVEC                                        03668403
         JOLRETN RC=0                                                   03668503
S16FAIL2 JOLRETN RC=16                                                  03668603
         LTORG                                                          03668703
         DROP  R10                                                      03668803
S16MVC2  MVC   DDLENXTR(*-*),0(R5)                                      03668903
         DC    S(*),S(*),S(*),S(*)                                      03669003
         DC    S(*),S(*),S(*),S(*)                                      03669103
         DC    S(*),S(*),S(*),S(*)                                      03669203
         DC    S(*),S(*),S(*),S(*)                                      03669303
         DC    S(*),S(*),S(*),S(*)                                      03669403
         DC    S(*),S(*),S(*),S(*)                                      03669503
           TITLE 'UJS17FID:FIND ADDRESS OF IDENT IN TABLE'              03670000
UJS17FID   CSECT                                                  74303 03680000
           USING *,R15                                            74303 03690000
           STM R4,R7,CALLAREA+20 SAVE 4 TO 7                      74303 03700000
           USING JOLCOM,R2                                              03710000
           LA  R5,20           LENGTH OF TABLE                    74303 03720000
           LNR R6,R5           -20 IN R6                          74303 03730000
           MH  R5,NOIDS        R5= 20*NOIDS                       74303 03740000
           L   R7,AIDTBL       R7=START OF TABLE                  74303 03750000
           AR  R5,R7           R5=START OF TABLE+NOIDS * 20       74303 03760000
           L   R4,0(R1)        R4=ADDR OF ITEM WE ARE LOOKING FOR 74303 03770000
           LR  R1,R5           SAVE NEXT HOLE IN TABLE            74303 03780000
S17BXH     BXH R5,R6,S17COMP   DO BXH FIRST,COS R5 IS 20 TOO HIGH 74303 03790000
*                              INITIALLY                          74303 03800000
          CLC 0(8,R5),0(R4)   CHECK FIRST ENTRY                         03810000
          BE S17FOUND         FOUND FIRST ENTRY                         03820000
* NOT FOUND HERE                                                  74303 03830000
           LA  R15,4           NOT FOUND INDIC                    74303 03840000
           LM  R4,R7,CALLAREA+20 RELOAD 4 TO 7                    74303 03850000
           BR  R14             BACK TO CALLER                     74303 03860000
S17COMP    CLC 0(8,R5),0(R4)   DO WE HAVE THE RIGHT SPOT ?        74303 03870000
           BNE S17BXH                                             74303 03880000
* HERE WE HAVE FOUND THE NAME                                     74303 03890000
S17FOUND   LR   R0,R1      RETURN NEXT HOLE IN R0                       03900000
           LR   R1,R5     R1=POSN OF ITEM FOUND                         03910000
           LM  R4,R7,CALLAREA+20 RELOAD 4 TO 7                    74303 03920000
           SR  R15,R15         CLEAR R15                          74303 03930000
           BR  R14             BACK TO CALLER                     74303 03940000
           LTORG                                                  74303 03950000
           DC   S(*),S(*),S(*),S(*)                                     03960000
           DC   S(*),S(*),S(*),S(*)                                     03970000
           DC   S(*),S(*),S(*),S(*)                                     03980000
           DC   S(*),S(*),S(*),S(*)                                     03990000
           DC   S(*),S(*),S(*),S(*)                                     04000000
           DC   S(*),S(*),S(*),S(*)                                     04010000
           DC   S(*),S(*),S(*),S(*)                                     04020000
           DC   S(*),S(*),S(*),S(*)                                     04030000
           DC   S(*),S(*),S(*),S(*)                                     04040000
           DROP R15                                               74303 04050000
          TITLE 'GET A RECORD SEQUENTIALLY FROM THE WORK FILE'          04060000
         JOLSAVE CSECT=UJS31IN,SIZE=S31DSIZE                            04070000
* THIS CSECT IS CALLED WHEN IT IS NECESSARY TO READ A RECORD            04080000
*  FROM THE WORKFILE, IN A SEQUENTIAL MANNER.                           04090000
         SPACE                                                          04100000
* ON ENTRY, R0 -> CONTROL AREA                                          04110000
*           R1 -> RECEIVE AREA                                          04120000
*                                                                       04130000
* THE CONTROL AREA IS THE SAME ONE AS USED FOR UJS30OP ABOVE            04140000
         LR    R4,R0          CHANGE REGISTERS                          04150000
         LR    R5,R1          CHANGE REGISTERS                          04160000
         USING JOLCOM,R2                                                04170000
         USING S30PARM,R4                                               04180000
         USING S30OP,R5                                                 04190000
         USING S31SAVE,R13                                              04200000
* NOW I HAVE TO KNOW                                                    04210000
*  1. THE BLOCKLENGTH                                                   04220000
*  2. THE OFFSET IN THE BLOCK OF THE LAST READ RECORD                   04230000
*                                                                       04240000
* THE MAIN CONTROLLING MODULES WOULD HAVE SET THE CURRENT               04250000
* BLOCKLENGTH TO 0, THE OFFSET IN THE BLOCK VERY HIGH,                  04260000
* AND THE CURRENT BLOCKNO TO -1 FOR THE VERY FIRST READ.                04270000
*                                                                       04280000
*                                                                       04290000
         L     R7,S30ABUF     LOAD ADDRESS OF THE BUFFER                04300000
         LR    R8,R7          SAVE IT                                   04310000
         CLC   S30LASTL,0(R8) WILL WE RUN OVER THE BLOCK ?              04320000
         BL    S31MUV         NOPE,-> MERELY SHIFT THE RECORD           04330000
         SPACE 3                                                        04340000
* HERE WE HAVE TO READ A NEW BLOCK INTO STORAGE, IF THERE ARE           04350000
*  ANY LEFT                                                             04360000
         SPACE                                                          04370000
         LH    R14,S30BLKNO   LOAD CURRENT BLOCK NUMBER                 04380000
         A     R14,ONE        ADD  1 TO IT                              04390000
         CH    R14,S30MAXBL   IS THIS BLOCK THE LAST ONE ?              04400000
         BNH   S31MORE        NO STILL MORE(PROBABLY)              DASD 04410000
*        BL    S31MORE        NO, STILL MORE (PROBABLY)            DASD 04420000
S31EOF   JOLRETN RC=4         EOF                                       04430000
         SPACE 2                                                        04440000
S31MORE  STH   R14,S30BLKNO   RESET BLOCK NUMBER                        04450000
         SLL   R14,2          MULT BY 4                                 04460000
         LA    R15,S30TTR1-4(R14) LOAD A(TTR OF BLOCK)                  04470000
         CLC   0(4,R15),ZERO  IS IT EMPTY (IE LAST BLOCK WAS LAST       04480000
*                             OF DATA?)                                 04490000
         BE    S31EOF         EOF, RETURN A 4                           04500000
         L     R14,AWORKFIL                                             04510000
         POINT (R14),(R15)    POINT TO THE TTR                          04520000
         READ  WORKINDB,SF,,(8),MF=E READ IT                            04530000
         CHECK WORKINDB       WAIT FOR IT                               04540000
         MVC  S30LASTL,=H'4'    SET OFFSET TO FIRST RECORD TO 4         04550000
         SPACE 3                                                        04560000
S31MUV   EQU   *                                                        04570000
         AH    R7,S30LASTL    ADD OFFSET TO POINT TO THIS RECORD        04580000
* HERE ALL WE HAVE TO DO IS SHIFT THE RECORD TO THE AREA                04590000
*  SPECIFIED, AND RETURN                                                04600000
         LR    R1,R5          LOAD R1 WITH A(RECEIVE)                   04610000
         LR    R0,R7          LOAD SEND ADDRESS                         04620000
         BAL   R14,MOVEDATA   SHIFT IT (LOOKS AFTER > 256 BYTES)        04630000
         LH    R1,S30LASTL                                              04640000
         MVC   S31WORK,0(R7)  SHIFT LAST RECORD LRECL SO NO 0C6         04650000
         AH   R1,S31WORK      CALC NEW OFFSET                           04660000
         STH   R1,S30LASTL    RESET OFFSET IN BLOCK                     04670000
         JOLRETN                                                        04680000
         LTORG                                                          04690000
         DC    S(*,*,*,*)                                               04700000
         DC    S(*,*,*,*)                                               04710000
         DC    S(*,*,*,*)                                               04720000
         DC    S(*,*,*,*)                                               04730000
         DC    S(*,*,*,*)                                               04740000
         DC    S(*,*,*,*)                                               04750000
         DC    S(*,*,*,*)                                               04760000
         DC    S(*,*,*,*)                                               04770000
         DC    S(*,*,*,*)                                               04780000
         DC    S(*,*,*,*)                                               04790000
         DC    S(*,*,*,*)                                               04800000
         SPACE 3                                                        04810000
S31SAVE  DSECT                                                          04820000
         DS    18F                                                      04830000
S31WORK  DS    H                                                        04840000
         DS    H                                                        04850000
S31DSIZE EQU   *-S31SAVE                                                04860000
S30PARM    DSECT                                                        04870000
S30ABUF    DS  A               ADDRESS OF BUFFER                        04880000
S30LBUF    DS  H               LENGTH OF BUFFER                         04890000
S30BLKNO   DS  H               CURRENT BLOCK NUMBER                     04900000
S30MAXBL   DS  H               MAX NO OF BLOCKS                         04910000
S30LASTL   DS  H               LAST BLOCK LENGTH                        04920000
S30TTR1    DS  A               TTRS OF BLOCKS                           04930000
S30OP      DSECT                                                        04940000
#S30REC    DS  H               LENGTH OF RECORD TO GO OUT               04950000
S30REC     DS  CL1             RECORD                                   04960000
           TITLE 'ANALYSE/FIX DSNAME PROCESSING'                  75311 04970000
* THIS IS A NEW CSECT DESIGNED TO HANDLE DSNAME PROCESSING.             04980000
* ON ENTRY, CALLAREA CONTAINS '||' | X'0000' (IF FROM UJC02PGM)         04990000
*                                                                       05000000
* ON RETURN, #WORK CONTAINS A DSNAME (WITHOUT QUOTES)                   05010000
*          AND WORK+ 100 CONTAINS                                       05020001
*              1. BLANKS IF NO MEMBER NAME OR GDG                       05030000
*           OR 2. THE MEMBER NAME                                       05040000
*           OR 3. THE GDG GENERATION IN THIS FORM                       05050000
*               A. ( NNNN      ABSOLUTE OR 0 GENERATION                 05060000
*               B. (+NNNN      FOR + GDGS                               05070000
*               C. (-NNNN      FOR - GDGS                               05080000
*          AND WORK+ 120 CONTAINS A PASSWORD IF CODED.                  05090001
*                                                                       05100000
* WE CAN BE CALLED FROM UJC02PGM, UJC03DS OR UJC05CAT ETC.              05110000
*                                                                       05120000
* TOKENS:-                                                              05130000
*    ON RETURN, TKNCURR POINTS TO THE TOKEN AFTER THE LAST              05140000
*              USED ONE, AND SIMILARLY WITH 'TKN'                       05150000
*                                                                       05160000
* IF THE TOKEN WE ENTER WITH HAS QUOTES, THEY ARE REMOVED.              05170000
*                                                                       05180000
* THE CONCATENATE SYMBOL CANNOT BE USED IN UJC02PGM, BECAUSE            05190000
*  IT MAY GET CONFUSED WITH CONCATENATED DDNAMES.                       05200000
           JOLSAVE CSECT=UJS60DSN                                       05210000
           USING TKNX,R3                                                05220000
           MVC WORK+100(20),BLANKS                                      05230000
           MVC WORK+120(8),BLANKS                                       05240000
* NOW CHECK IF DSNAME HAS QUOTES, AND IF SO REMOVE THEM                 05250000
           CLI TKN,C'('        BRACKETS CODED ?                         05260000
           BNE S60NB#          NO                                       05270000
           GETTKN TKNCURR      GET NEXT TOKEN                           05280000
           STH R1,TKNCURR      SO THAT WE CAN SKIP THE BRACKET          05290000
S60NB#     CLI TKN,C''''       GOT QUOTES ?                             05300000
           BNE S60NOQ          NOPE, ENTER DIFFERENT TYPE OF            05310000
*                              PROCESSING                               05320000
           SPACE 3                                                      05330000
* HERE, THE DSNAME HAS GOT QUOTES AROUND IT.                            05340000
           BAL R14,DROPQUOT                                             05350000
           BAL R14,DROPQUOT    DO IT AGAIN FOR DOS QUOTED DSNAMES       05360000
           MVC #WORK(L'TKN),#TKN SHIFT DSNAME TO WORK                   05370000
           GETTKN TKNCURR      GET NEXT TOKEN TO SEE IF PASSWORD 80290  05380000
           CLI  TKN,C'/'       START OF PASSWORD?                80290  05390000
           BNE  S60#1                                            80290  05400000
           GETTKN (R1)         GET NEXT TOKEN AFTER PASSWORD     80290  05410000
           MVC  WORK+120(8),TKN SAVE THE PASSWORD                80290  05420000
           STH  R1,TKNCURR     UPDATE CURRENT TOKEN POINTER      80290  05430000
* NOW FIND '(' ETC (IF PRESENT)                                         05440000
S60#1      LH  R15,#WORK       LOAD LENGTH OF DSN                       05450000
           LA  R1,WORK                                                  05460000
           AR  R15,R1                                                   05470000
           LA  R14,1           THERE... BXLE LOOP SET UP NOW            05480000
           SPACE 1                                                      05490000
           LR  R7,R1           SAVE R1 IN R7 FOR NOW                    05500000
           CLI 0(R1),C'('                                               05510000
           BE  S60OPEN                                                  05520000
           BXLE R1,R14,*-8                                              05530000
* NO MEMBER, NO GDG, RETURN                                             05540000
           JOLRETN                                                      05550000
           SPACE 2                                                      05560000
S60OPEN    EQU *                                                        05570000
* R1 POINTS TO THE '(', SO                                              05580000
S6000       CLI  0(R15),C' '                                            05590000
            BNE  S6001                                                  05600000
            BCT  R15,S6000                                              05610000
S6001      CLI 0(R15),C')'     IS THERE A CLOSING BRACKET ?             05620000
           BNE S60NCLB         NO                                       05630000
           MVI 0(R15),C' '     YES, CLEAR ')',COS WE DONT WANT IT       05640000
           BCTR R15,0          BACK TRACK ANOTHER BYTE                  05650000
S60NCLB    EQU *                                                        05660000
           MVC TKN(12),1(R1)   SHIFT MEMBER OR WHATEVER TO TKN          05670000
*                              (AND DROP '(')                           05680000
           MVC 0(12,R1),BLANKS CLEAR MEMBER | GDG BIT IN WORK           05690000
           SR  R15,R1          CALC                                     05700000
           STH R15,#TKN        - OF MBR BIT                             05710000
           SPACE 1                                                      05720000
           SR  R1,R7           CALC                                     05730000
           STH R1,#WORK        - DSNAME                                 05740000
           SPACE 3                                                      05750000
* NOW DETEMINE WHAT WE HAVE GOT IN THE MEMBER BIT, AND                  05760000
*  DECODE IT A BIT.                                                     05770000
           LA  R8,C' '         LOAD A BLANK INTO R8                     05780000
           CLI TKN,C'+'        + GDG ?                                  05790000
           BE  S60PLUS         YES                                      05800000
           CLI TKN,C'-'        - GDG ?                                  05810000
           BE  S60MINUS        YES                                      05820000
           TNUM #TKN           SEE IF ABSOLUTE GENERATION NUMBER        05830000
           LTR R15,R15                                                  05840000
           BNZ S60MEMBR        ITS A MEMBER, NO A GDG THINGO            05850000
S60CVD     CH  R1,=H'9999'     > 9999                                   05860000
           BH  S60GDGER        ERROR                                    05870000
         LTR   R1,R1          GEN (0)                    JOL30063 76200 05880000
         BNZ   S60NZ2                                    JOL30063 76200 05890000
         LA    R8,C'+'        SET + IN R8                JOL30063 76200 05900000
S60NZ2   EQU   *                                                        05910000
           CVD R1,DBL                                                   05920000
           UNPK WORK+102(4),DBL                                         05930000
           OI  WORK+105,C'0'   MAKE NORMAL NUMBER                       05940000
           MVI WORK+100,C'('   INDICATE GDG                             05950000
           STC R8,WORK+101     STORE '+' | '-' IN MEMBER BIT.           05960000
           JOLRETN RC=4        RETURN, INDICATING GDG                   05970000
           SPACE 3                                                      05980000
S60PLUS    EQU *                                                        05990000
S60MINUS   EQU *                                                        06000000
           IC  R8,TKN          LOAD + | - INTO R8                       06010000
           MVI TKN,C' '        CLEAR TKN                                06020000
           TNUM #TKN           CONVERT TO NUMERIC                       06030000
           LTR R15,R15         DID IT CONVERT                           06040000
           BZ  S60CVD                                                   06050000
S60GDGER   MVC WORK+100(20),BLANKS                                      06060000
           JOLRETN RC=12       RETURN GENERATION NUMBER ERROR           06070000
           SPACE 3                                                      06080000
S60MEMBR   MVC WORK+100(8),TKN SHIFT MEMBER TOKEN                       06090000
           JOLRETN RC=8        RETURN, INDICATING MEMBER NAME           06100000
           SPACE 3                                                      06110000
S60NOQ     EQU *                                                        06120000
* HERE, WE HAVE THE START OF A DSNAME BUT WE HAVE TO FORM IT            06130000
*  UP INTO A PROPER DSNAME NOW BY GETTING MORE TOKENS AS NECESSARY      06140000
           MVC #WORK(L'TKN+2),#TKN SHIFT FIRST PART TO WORK             06150000
           CLI WORK,C'&&'      START OF TEMPORARY DSNAME ?              06160000
           BNE S60NOTMP        NOT A TEMPORARY DSNAME                   06170000
           GETTKN TKNCURR      GET NEXT TOKEN                           06180000
           CLI TKN,C'&&'       NEXT A '&' TOO ?                         06190000
           BNE S60GOTTM                                                 06200000
           GETTKN (R1)         SKIP 2ND AMPERSAND                       06210000
S60GOTTM   STH R1,TKNCURR                                               06220000
           BAL R14,CONCAT      CONCATENATE NAME TO #WORK                06230000
* NOW CHECK IF THE NEXT TOKEN INDICATES A MEMBER NAME, WED BETTER       06240000
*    PROCESS IT.                                                        06250000
           GETTKN (R1)         GET NEXT                                 06260000
           CLI TKN,C'('        START OF MEMBER ?                        06270000
           BE  S60MEMST        GO TO START OF MEMBER PROCESSING         06280000
           CLI  TKN,C'/'       START OF PASSWORD?                80290  06290000
           BNE  S60RETN0                                         80290  06300000
           GETTKN (R1)         GET NEXT TOKEN AFTER PASSWORD     80290  06310000
* SKIP PASSWORDS FOR TEMPORARY DATA SETS                         80290  06320000
           STH  R1,TKNCURR     UPDATE CURRENT TOKEN POINTER      80290  06330000
S60RETN0   JOLRETN RC=0        NO, JUST RETURN THEN                     06340000
           SPACE 3                                                      06350000
S60MEMST   EQU *                                                        06360000
* TKN CONTAINS A '(' NOW                                                06370000
           LA  R8,C' '         SET R8=' ' NOW (MAY HAVE + | - LATER)    06380000
           GETTKN (R1)         GET NEXT TOKEN                           06390000
           STH R1,TKNCURR      SAVE CURRENT TOKEN NUMBER                06400000
           CLI TKN,C'+'                                                 06410000
           BE  S60PLUS2                                                 06420000
           CLI TKN,C'-'                                                 06430000
           BE  S60MIN2                                                  06440000
* HERE IT COULD BE A MEMBER OR A SPECIFIC GENERATION                    06450000
           CLI TKNTYPE,2       <IDENTIFIER> (MEMBER NAME) ?             06460000
           BE  S60MEM2         YES                                      06470000
S60GEN2    TNUM #TKN           CONVERT NUMBER TO NUMERIC                06480000
           LR  R6,R15          SAVE RETURN CODE                         06490000
           LR  R7,R1           SAVE BINARY NUMBER IN R7                 06500000
           GETTKN TKNCURR      SEE IF NEXT ')'                          06510000
           CLI TKN,C')'        IS IT A ')'                              06520000
           BNE *+8             NO, USER DIDN'T CODE IT                  06530000
           STH R1,TKNCURR      YES, SET TKNCURR 1 HIGHER                06540000
*                              SO NO-ONE ELSE WILL GET ')' AGAIN        06550000
           LR  R1,R7           SET R1 TO BINARY NUMBER FROM TNUM        06560000
           LTR R15,R6          TEST RETURN CODE                         06570000
           BNZ S60GDGER        ERROR, DIDN'T CONVERT                    06580000
           B   S60CVD          CONVERT TO ZONED, RETURN                 06590000
           SPACE 3                                                      06600000
S60PLUS2   EQU *                                                        06610000
S60MIN2    EQU *                                                        06620000
           IC  R8,TKN          LOAD '+' | '-'                           06630000
           GETTKN TKNCURR      GET WHAT SHOULD BE A NUMBER              06640000
           STH R1,TKNCURR                                         75311 06650000
           SPACE 1                                                75311 06660000
* NOW WE MUST CHECK TO SEE IF 'GDG.X(+-2)' WAS CODED              75311 06670000
           CLI TKN,C'-'                                           75311 06680000
           BNE S60GEN2         NOPE, BETTER BE A NUMBER THEN      75311 06690000
           IC  R8,TKN          LOAD '-'                           75311 06700000
           GETTKN (R1)         GET NEXT TOKEN                     75311 06710000
           STH R1,TKNCURR      BACK TO GDG PROCESSING             75311 06720000
           B   S60GEN2                                                  06730000
           SPACE 3                                                      06740000
S60MEM2    EQU    *                                                     06750000
           MVC   WORK+100(8),TKN      SHIFT MEMBER NAME                 06760000
           GETTKN TKNCURR                                               06770000
           CLI   TKN,C')'                                               06780000
           BNE   S60TPASS      TEST FOR A PASSWORD                80290 06790000
           STH   R1,TKNCURR                                             06800000
S60TPASS   GETTKN TKNCURR      GET NEXT TOKEN TO SEE IF PASSWORD 80290  06810000
           CLI  TKN,C'/'       START OF PASSWORD?                80290  06820000
           BNE  S60RETN0                                         80290  06830000
           GETTKN (R1)         GET NEXT TOKEN AFTER PASSWORD     80290  06840000
           MVC  WORK+120(8),TKN SAVE THE PASSWORD                80290  06850000
           STH  R1,TKNCURR     UPDATE CURRENT TOKEN POINTER      80290  06860000
           JOLRETN RC=0                                                 06870000
S60NOTMP   EQU *                                                        06880000
* NOT A TEMPORARY DSNAME HERE, SO, LETS GO.                             06890000
           LH  R1,TKNCURR      SET R1 TO LATEST TOKEN NUMBER.           06900000
S60LOOP    GETTKN (R1)         GET ITEM AFTER DSN START                 06910000
           CLI TKN,C'('        START OF MEMBER ? (OR GDG)               06920000
           BE  S60MEMST        YES, GO PROCESS                          06930000
* NOW HERE IT COULD BE '.' | '||'. IF NOT, END OF DSNAME                06940000
*                                                                       06950000
* WATCH C02PGM, WHICH DOESN'T ALLOW '||'                                06960000
*                                                                       06970000
           CLC TKN(2),CALLAREA '||' ?                                   06980000
           BE  S60CON3         IGNORE IT TOTALLY                        06990000
           CLI TKN,C'.'        CONNECTOR ?                              07000000
           BE  S60STOP                                                  07010000
* OK, DSN FORMED UP HERE, RETURN                                        07020000
           BCTR  R1,0              DROP R1 BY 1                         07030000
           STH R1,TKNCURR                                               07040000
           B   S60TPASS       TEST FOR A PASSWORD                 80290 07050000
           SPACE 3                                                      07060000
S60STOP    EQU *                                                        07070000
           BAL R14,CONCAT      CONCAT '.' INTO #WORK                    07080000
S60IGNRS   GETTKN (R1)         GET NEXT                                 07090000
           CLI TKN,C'.'        ANOTHER '.'                              07100000
           BE  S60IGNRS        IGNORE IT                                07110000
S60CON4    BAL R14,CONCAT      CONCAT ITEM AFTER '.' OR '||'            07120000
           B   S60LOOP                                                  07130000
S60CON3    GETTKN (R1)         SKIP '||' SYMBOL                         07140000
           B  S60CON4                                                   07150000
           SPACE 3                                                      07160000
           LTORG                                                        07170000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07180000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07190000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07200000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07210000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07220000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07230000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07240000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07250000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07260000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07270000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07280000
          DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                                07290000
S61SAVE  DSECT                                                          07300000
         DS    18F            SAVE AREA                                 07310000
S61OLDGN DC  P'000000'       OLD GEN                                    07320000
S61NEWGN DC  P'000000'       OLD GEN                                    07330000
S61ENDDS DS  A                A(END DSN)                                07340000
S61LOCAT DS  A                                                          07350000
S61PARM1 DS  A               CATLG SEARCH PARM AREA (RE-ENTRANT)        07360000
S61PARM2 DS  A               CATLG SEARCH PARM AREA (RE-ENTRANT)        07370000
S61PARM3 DS  A               CATLG SEARCH PARM AREA (RE-ENTRANT)        07380000
S61PARM4 DS  A               CATLG SEARCH PARM AREA (RE-ENTRANT)        07390000
S61PARM5 DS  A               CATLG SEARCH PARM AREA (RE-ENTRANT)        07400000
S61LDSN  DS     0D   DSNAME IS REALLY IN DDDSNAME                  DASD 07410000
S61LAREA DS     265C   WORK AREA FOR CAMLST ,LOCATE SVCS           DASD 07420000
S61SAVEL EQU   *-S61SAVE                                                07430000
S61GENDT DSECT                                                          07440000
S61BRAC  DS  CL1             '('                                        07450000
S61GDGTY DS  CL1             '+' | '-' | ' '                            07460000
S61GENNO DS  CL4             GENERATION NUMBER                          07470000
         JOLSAVE CSECT=UJS61DD,SIZE=S61SAVEL                            07480000
* THIS ROUTINE GETS CONTROL WHEN WE HAVE TO FIX A                       07490000
*  GENERATION NUMBER.                                                   07500000
* IT IS CALLED FROM UJC24RUN AND UJCO5CAT                               07510000
*                                                                       07520000
* WHAT HAPPENS IS THIS:-                                                07530000
*  THE DDSNAME FIELD CONTAINS A DATA SET NAME                           07540000
*  WORK (8 CHARS) CONTAINS WHAT MAY BE A RELATIVE GENERATION            07550000
*  NAME, AND THE DSNAME MAY ALSO CONTAIN ONE.                           07560000
*                                                                       07570000
* WHAT WE HAVE TO DO IS TRY AND GET A VALID GENERATION NUMBER           07580000
*  FROM ALL THIS                                                        07590000
* 1. DSN=T.X        WORK=0    OUTPUT=T.X(0)                             07600000
* 2. DSN=T.X        WORK=+1   OUTPUT=T.X(+1                             07610000
* 3. DSN=T.X(+1)    WORK=+1   OUTPUT=T.X(+2)                            07620000
* 4. DSN=T.X(9)    WORK=+1    OUTPUT=T.X(10)                            07630000
* 5. DSN=T.X(22)    WORK=-1   OUTPUT=T.X(21)                            07640000
* GOT THE PICTURE ?                                                     07650000
         SPACE 3                                                        07660000
           LM  R9,R10,0(R1)    LOAD PARAMETERS                          07670000
           USING DDDSNDET,R9                                            07680000
           USING S61GENDT,R10                                           07690000
         USING S61SAVE,R13                                              07700000
           XC    S61PARM1(20),S61PARM1      CLEAR CATLG SEARCH AREA     07710000
           LA    R1,S61PARM1               CAMLST PARAMETER             07720000
           ST    R1,S61LOCAT               CAMLST PARAMETER             07730000
           MVI   S61PARM1,68                SET CAT SEARCH CODES        07740000
           LA    R1,DDDSNAME                                            07750000
           ST    R1,S61PARM2                SET DSNAME ADDRESS          07760000
           LA    R1,S61LDSN                                             07770000
           ST   R1,S61PARM4                 SET WORK AREA ADDRESS       07780000
         CLEAR S61OLDGN,S61NEWGN                                        07790000
* FIRST OF ALL, CHECK THAT THE NEW GENERATION HAS SOMETHING IN IT       07800000
           CLI S61BRAC,C'('    IS IT A GDG OF SOME DESCRIPTION ?  75311 07810000
           BE  S61ISGD1        YES                                75311 07820000
           CLI S61BRAC,C' '    IS THERE A MEMBER SPECIFIED ?      75311 07830000
           BE  S61RETN0        NOPE, JUST RETURN                  75311 07840000
           MVC DDMBR,S61BRAC   COPY MEMBER NAME                   75311 07850000
           MVI DDTYPE,DDMEMSPC TURN ON MEM INDIC                  75311 07860000
S61RETN0   JOLRETN RC=0                                           75311 07870000
           CLC S61GENNO,BLANKS                                          07880000
         BE    S61RETN0       DON'T DO A THING                          07890000
* NOW SEE IF WE ARE DEALING WITH A VALID DATA SET TYPE                  07900000
         CLI   DDTYPE,DDREALDS                                          07910000
           BL  S61ERR2                                                  07920000
           AGO .S61IG01                                           75311 07930000
* LETS GET THE END OF THE DSNAME, AND THE PRECEEDING DOT, IF            07940000
*  THERE IS ONE                                                         07950000
         LA    R5,DDDSNAME                                              07960000
         LA    R6,DDDSNAME+L'DDDSNAME-1                                 07970000
S61LOOP1 CLI   0(R6),C' '                                               07980000
         BNE   S61GOTEN                                                 07990000
         CR    R5,R6                                                    08000000
         BH    S61ERR02       INTERNAL ERROR, BLANK DSN                 08010000
         BCT   R6,S61LOOP1                                              08020000
S61GOTEN   ST  R6,S61ENDDS     SAVE END OF DSNAME                       08030000
.S61IG01   ANOP                                                   75311 08040000
         SPACE 1                                                        08050000
S61ISGD1  EQU   *                                                       08060000
*******************************************************            DASD 08070000
* NOW WE MUST CHECK BOTH GDG NUMBERS FOR NUMERICS     *            DASD 08080000
*******************************************************            DASD 08090000
*  USING INLINE TNUM MACRO                                         DASD 08100000
          CLC   DDMBR,BLANKS   DON'T CHECK NUMERICS ON BLANKS      DASD 08110000
          BE    S60CKNXT                                           DASD 08120000
          L    R15,ATNUM       LOAD ADDRESS OF NUMERIC CHECK RTN   DASD 08130000
          LA   R0,4            CHECK 4 BYTES                       DASD 08140000
          LA   R1,DDMBR+2      FIELD TO CHECK                      DASD 08150000
          BALR R14,R15         GO CHECK THE FIELD                  DASD 08160000
          LTR  R15,R15         IS IT GOOD                          DASD 08170000
          BZ   S60CKNXT        OK KEEP GOING                       DASD 08180000
           JOLERR 103,'DSNAME ''',DDDSNAME,''' DECLARED AT ',          *08190000
               DDSTMT,' HAS NON NUMERIC VALUE IN GDG NUMBER',          *08200000
               ', SET TO ABSOLUTE ZERO'                            DASD 08210000
          MVC  DDMBR(8),=C'( 0000  '                               DASD 08220000
S60CKNXT  EQU  *                                                   DASD 08230000
           SPACE  1                                                     08240000
* NOW WE HAVE SIX POSSIBILITEES                                         08250000
         SPACE 2                                                        08260000
* ..--***OLD***--..    ..--***NEW***--..                         RESULT 08270000
*      ABSOLUTE             ABSOLUTE         CASE 1    OK,ERR,ABS   ABS 08280000
*      ABSOLUTE             RELATIVE         CASE 2    OK           ABS 08290000
*      RELATIVE             ABSOLUTE         CASE 3    TAKE ABS,ERR ABS 08300000
*      RELATIVE             RELATIVE         CASE 4    OK           REL 08310000
*      INDEX                ABSOLUTE         CASE 5    OK           ABS 08320000
*      INDEX                RELATIVE         CASE 6    OK           REL 08330000
           SPACE 1                                                      08340000
* SO NOW WE'D BETTER WORK OUT EXACTLY WHAT WE HAVE GOT, AND             08350000
*  PERFORM APPROPRIATE ACTIONS.                                         08360000
*                                                                       08370000
* SEE IF EITHER RELATIVE (-) AND CHANGE SIGN BIT BEFORE PACK            08380000
          CLI DDMBR+1,C'-'                                              08390000
          BNE S60NNEG1                                                  08400000
          NI  DDMBR+5,X'0F'                                             08410000
          OI  DDMBR+5,B'11010000'                                       08420000
S60NNEG1  CLI S61GDGTY,C'-'                                             08430000
          BNE S60NNEG2                                                  08440000
          NI  S61GENNO+3,X'0F'                                          08450000
          OI  S61GENNO+3,B'11010000'                                    08460000
S60NNEG2  EQU  *                                                        08470000
           PACK S61OLDGN,DDMBR+2(4)                                     08480000
           PACK S61NEWGN,S61GENNO                                       08490000
* NOW WE'D BETTER CHECK IF BOTH ARE BLANK, AND RETURN (EMERGENCY        08500000
*    TYPE EXIT REALLY)                                                  08510000
           IFNULL DDMBR,S61BRAC(8),S61RETN0 BOTH=' ', RETURN            08520000
* NOW LETS DO THE SIMPLE CASES OF 5,6 (INDEX, AND REL | ABS SPECIFIED)  08530000
           IFVALUE DDMBR,S61NOT56 NOT CASES 5,6                         08540000
S61COPYN   MVC DDMBR,S61GENDT  FIXES CASES 5,6                          08550000
         OI    DDMBR+5,C'0'   MAKE PRINTABLE             JOL30070 76200 08560000
* END 5,6                                                               08570000
           SPACE 3                                                      08580000
S61SETYP   EQU *                                                        08590000
* NOW WE MUST RESET THE 'DDTYPE' FIELD                                  08600000
           CLI DDMBR+1,C'-'                                             08610000
           BE  S61REL01                                                 08620000
           CLI DDMBR+1,C'+'                                             08630000
           BE  S61REL01                                                 08640000
           CLC DDMBR+2(4),=C'0000'                                      08650000
           BE  S61REL01                                                 08660000
           MVI DDTYPE,DDGDGABS                                          08670000
           JOLRETN                                                      08680000
           SPACE                                                        08690000
S61REL01   MVI DDTYPE,DDGDGREL                                          08700000
           JOLRETN                                                      08710000
           SPACE 3                                                      08720000
S61NOT56   EQU *                                                        08730000
* NOW SEE IF 'INPUT' ONE IS ABS / REL                                   08740000
           CLI DDMBR+1,C'-'                                             08750000
           BE  S61CASE3                                                 08760000
           CLI DDMBR+1,C'+'                                             08770000
           BE  S61CASE3                                                 08780000
           CLC =C'0000',DDMBR+2                                         08790000
           BE  S61CASE3                                                 08800000
           SPACE 2                                                      08810000
* HERE WE HAVE ABSOLUTE GENERATION ON THE INPUT, SO CASES 1 AND 2       08820000
*    APPLY                                                              08830000
           SPACE 1                                                      08840000
           CLC =C' 0000',S61GDGTY  IS OVER-RIDE (0) ?                   08850000
           BE  S61SETYP        YES, DON'T DO ANYTHING, GO HOME.         08860000
           SPACE                                                        08870000
           CLI S61GDGTY,C'+'   NEW REL (+)                              08880000
           BE  S61REL02        YES                                      08890000
           CLI S61GDGTY,C'-'   NEW REL (-)                              08900000
           BE  S61REL02        YES                                      08910000
* HERE MUST BE 2 ABSOLUTES, TAKE THE NEW ABSOLUTE AFTER ERROR           08920000
*    MESSAGE                                                            08930000
S61ERR1    JOLERR 301,'DSNAME ''',DDDSNAME,''' DECLARED AT ',          *08940000
               DDSTMT,' SPECIFIES ABSOLUTE GENERATION, AND ABSOLUTE ', *08950000
               'ALSO SPECIFIED ON PROGRAM OR DISPOSITION, DSID GEN IGNO*08960000
               RED'                                                     08970000
           B   S61COPYN        COPY NEW ONE                             08980000
           SPACE 3                                                      08990000
S61REL02   EQU *                                                        09000000
* HERE ABSOLUTE ON DSID, REL ON PROGRAM. (+)                            09010000
*****************************************************              DASD 09020000
* PROBLEM HERE DOING GDG ARITHMETIC.                *              DASD 09030000
* NON VIRGIN GDG'S DO NOT HAVE ALL ENTRIES IN THE   *              DASD 09040000
* CATALOG DO TO UNCATLGING WITH IEHPROGM AND THE    *              DASD 09050000
* LIKE.  SOO WE MUST SEE WHERE THE ABSOLUTE GDG #   *              DASD 09060000
* SITS IN THE CATALOG AND IF DOING MINUS GDG ARITH  *              DASD 09070000
* LOCATE -NNN DEEP INSTEAD OFF SUBTRACTING          *              DASD 09080000
* EXAMPLE.                                          *              DASD 09090000
* CATALOG CONTAINS (0) G0069V00                     *              DASD 09100000
*                 (-1) G0003V00                     *              DASD 09110000
*                 (-2) G0001V00                     *              DASD 09120000
* JOL WHEN DOING THIS CALCULATION OF 69 MINUS 1     *              DASD 09130000
* WILL GET G0068V00  WHICH IS WRONG BECAUSE         *              DASD 09140000
* THE (-1) GENERATION IS G0003V00   OK??            *              DASD 09150000
*****************************************************              DASD 09160000
         CLI   S61GDGTY,C'-'        ARE WE DOING NEGATIVE GDG WORK DASD 09170000
         BNE   S61NONEG            NOPE GO DO IT THE OLD WAY       DASD 09180000
         CLI   DDMBR+1,C' '         ABS ON OLD                     DASD 09190000
         BNE   S61NONEG             NOPE JUMP OVER THIS            DASD 09200000
         LA    R1,DDDSNAME         POINT TO DSNAME                 DASD 09210000
         ST    R1,S61LOCAT+4       USE THIS FOR THE LOCATE AREA    DASD 09220000
         LA    R15,43(R1)          POINT TO END OF DSNAME          DASD 09230000
         LA    R14,1               INCR BY 1                       DASD 09240000
S61GFIND CLI   0(R1),C' '          END OF DSNAME YET ??            DASD 09250000
         BE    *+8                 YES SIR                         DASD 09260000
         BXLE  R1,R14,S61GFIND     WELL LETS JUST KEEP LOOKING     DASD 09270000
         ST    R1,CALLAREA         LETS SAVE THE ADDRRESS   OK     DASD 09280000
         MVC   0(3,R1),=C'(0)'     MOVE IN REL GDG ZERO            DASD 09290000
S61LOOK  EQU   *                                                   DASD 09300000
         LOCATE S61LOCAT           LET OS FIND THE SUCKER          DASD 09310000
         LTR    R15,R15            I HOPE R15 IS ZERO              DASD 09320000
         BZ     S61GODL1           GREATE ITS CATALOGED            DASD 09330000
S61CLEAN L      R1,CALLAREA        RELOAD POINTER                  DASD 09340000
         MVC    0(9,R1),BLANKS     CLEAR OUT JUNK                  DASD 09350000
         B     S61NONEG            DOIT THE OLD WAY                DASD 09360000
S61GODL1 L     R1,CALLAREA                                         DASD 09370000
         PACK  2(4,R1),2(4,R1)     NOW PACK THIS GUY               DASD 09380000
         OI    S61OLDGN+3,X'0F'    TURN OFF NEG SIGN               DASD 09390000
         CP    S61OLDGN,2(4,R1)    NOW CHECK FOR ABS # TO REL(0)   DASD 09400000
         BE    S61GDGEQ            GREAT REL(0) IS THE ABS #       DASD 09410000
         BL    S61LOW              ABS # IS LOWER THAN CATALOG     DASD 09420000
* ABS # IS HIGHER THAN REL(0) IN CATALOG                           DASD 09430000
         ZAP   CALLAREA+8(4),S61NEWGN SAVE ORG #                   DASD 09440000
         ZAP   CALLAREA+4(4),S61OLDGN  NOW SUBTRACT ABS# FROM REL  DASD 09450000
         SP    CALLAREA+4(4),2(4,R1)                               DASD 09460000
         AP    S61NEWGN,CALLAREA+4(4) BACKOFF TO CORRECT REL #     DASD 09470000
         BM    S61GDGEQ               IF STILL NEG GREAT           DASD 09480000
         ZAP   S61NEWGN,CALLAREA+8(4)  RESTORE TO OLD VALUE        DASD 09490000
         B     S61CLEAN                NOW DOIT THE OLD WAY        DASD 09500000
S61LOW   EQU   *                                                   DASD 09510000
         ZAP   CALLAREA+4(4),=P'0'     CLEAR                       DASD 09520000
S61LOWL  EQU   *                                                   DASD 09530000
         AP    CALLAREA+4(4),=P'1'     INCR LOCATE LELVE           DASD 09540000
         MVC   1(10,R1),BLANKS       CLEAR OUT TRASH               DASD 09550000
         UNPK  2(4,R1),CALLAREA+4(4)    UNPACK NEW REL #           DASD 09560000
         OI    5(R1),C'0'             TURN OFF SIGN                DASD 09570000
         MVC   0(2,R1),=C'(-'                                      DASD 09580000
         MVI   6(R1),C')'               SB DSNAME(-NNNN)           DASD 09590000
         LOCATE S61LOCAT           NOW GO FIND THE RIGHT GUY       DASD 09600000
         LTR   R15,R15             IS ALL WELL ??                  DASD 09610000
         BNZ   S61LERR             NOPE   BAD  NOT IN CATALOG RIGHTDASD 09620000
         L     R1,CALLAREA         RELOAD POINTER TO END OF DSNAME DASD 09630000
         PACK  2(4,R1),2(4,R1)    PACK GDG ABS # FROM LOCATE       DASD 09640000
         CP    S61OLDGN,2(4,R1)    HAVE WE FOUND THE # YET         DASD 09650000
         BL    S61LOWL              NOPE BACK WE GO                DASD 09660000
         OI    S61NEWGN+3,X'0F'     TURN OFF NEG SIGN              DASD 09670000
         AP    S61NEWGN,CALLAREA+4(4) ADD OLD -NNN TO CURRENT ABS LDASD 09680000
* NOW GO GET THE PROPER LEVEL                                      DASD 09690000
S61GDGEQ EQU   *                                                   DASD 09700000
         MVC   1(10,R1),BLANKS       CLEAR OUT TRASH               DASD 09710000
         UNPK  2(4,R1),S61NEWGN         EDIT REL #                 DASD 09720000
         OI    5(R1),C'0'             TURN OFF SIGN                DASD 09730000
         MVC   0(2,R1),=C'(-'                                      DASD 09740000
         MVI   6(R1),C')'               SB DSNAME(-NNNN)           DASD 09750000
         LOCATE S61LOCAT           NOW GO FIND THE RIGHT GUY       DASD 09760000
         LTR   R15,R15             IS ALL WELL ??                  DASD 09770000
         BNZ   S61LERR             NOPE   BAD  NOT IN CATALOG RIGHTDASD 09780000
         L     R1,CALLAREA         RELOAD POINTER TO END OF DSNAME DASD 09790000
         MVC   DDMBR+2(4),2(R1)    NOW WE HAVE THE CORRECT ABS #   DASD 09800000
         MVC   0(9,R1),BLANKS      LITTLE CLEAN UP HERE            DASD 09810000
         MVI   DDMBR+1,C' '        MAKE ABS                        DASD 09820000
         B     S61SETYP                                            DASD 09830000
S61NONEG   AP  S61OLDGN,S61NEWGN                                   DASD 09840000
         CP    S61OLDGN,=P'0'        DID WE GO NEGATIVE  JOL30049 76200 09850000
         BP    S61UNPK              NOPE                 JOL30049 76200 09860000
         CLI   DDMBR+1,C' '         CASE 2 ?             JOL30049 76200 09870000
         BNE   S61UNPK              NOPE                 JOL30049 76200 09880000
         AP    S61OLDGN,=P'10000'   BRING ABS NUMBER BACKJOL30049 76200 09890000
S61UNPK  EQU   *                                         JOL30049 76200 09900000
         UNPK  DDMBR+2(4),S61OLDGN  MOVE IN NEW GUY      JOL30049 76200 09910000
         OI    DDMBR+5,C'0'         FIX UP SIGN          JOL30049 76200 09920000
         CLI DDMBR+1,C' '           CASE 2               JOL30049 76200 09930000
         BE    S61SETYP                                  JOL30049 76200 09940000
         MVI   DDMBR+1,C'+'         SET TO POSIVIVE INITIJOL30049 76200 09950000
         TM    S61OLDGN+3,X'0D'     CHECK TO SEE IF NEGATJOL30049  DASD 09960000
         BNO   S61SETYP             IF NOT  GO           JOL30049 76200 09970000
         MVI   DDMBR+1,C'-'         SET TO NEGATIVE      JOL30049 76200 09980000
         B     S61SETYP             ALL DONE HERE        JOL30049 76200 09990000
           SPACE 3                                                      10000000
S61CASE3   EQU *                                                        10010000
* NOW CHECK IF CASE 3 | 4.                                              10020000
           SPACE                                                        10030000
* FIRST, IF NEW=(0), IGNORE, GO HOME                                    10040000
           CLC =C' 0000',S61GENDT                                       10050000
           BE  S61SETYP        YES, IGNORE, GO HOME                     10060000
           CLI S61GDGTY,C'+'                                            10070000
           BE  S61REL02                                                 10080000
           CLI S61GDGTY,C'-'                                            10090000
           BE  S61REL02                                                 10100000
* HERE RELATIVE AND ABSOLUTE, TAKE ABSOLUTE                             10110000
           B   S61ERR1                                                  10120000
           SPACE 3                                                      10130000
S61LERR  L     R1,CALLAREA                                         DASD 10140000
          MVC   0(9,R1),BLANKS     CLEAR OUT THE MUCK              DASD 10150000
S61ERR2    JOLERR 302,'DSNAME ''',DDDSNAME,''' DECLARED AT STMT ',     *10160000
               DDSTMT,' IS NOT A REAL DATA SET, NO GENERATION OVERRIDE *10170000
               CAN OCCUR'                                               10180000
           JOLRETN RC=16                                                10190000
            LTORG                                                       10200000
*S61LOCAT CAMLST NAME,S61LDSN,,S61LAREA                                 10210000
            DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                              10220000
            DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                              10230000
            DC  S(*,*,*,*,*,*,*,*,*,*,*,*)                              10240000
         LTORG                                                          10250000
         JOLSAVE CSECT=UJS98QU                                    76200 10260000
* THIS CSECT HAS A PARAMETER -) VARYING CHARACTER STRING.         76200 10270000
* THE IDEA IS TO DROP QUOTES FROM EITHER END, THEN CHECK FOR      76200 10280000
* DOUBLE QUOTES IN THE MIDDLE AND MAKE THEM 1, IF ANY ARE FOUND.  76200 10290000
         SPACE 2                                                  76200 10300000
         L     R5,0(R1)       POINT TO PARM              JOL30027 76200 10310000
         CLC   0(2,R5),ZERO   ZERO LENGTH ?              JOL30027 76200 10320000
         BE    S98RETN                                   JOL30027 76200 10330000
         MVC   DBL(2),0(R5)   SHIFT LENGTH SO NO 0C6     JOL30027 76200 10340000
         LH    R6,DBL         LOAD ITS LENGTH.           JOL30027 76200 10350000
         CLI   2(R5),C''''    QUOTE ON START OF STRING ? JOL30027 76200 10360000
         BNE   S98FDBLQ       NO,SO JUMP INTO DBL QUOTE  JOL30027 76200 10370000
         SPACE 2                                         JOL30027 76200 10380000
         BCTR  R6,0           -1 FROM R6                 JOL30027 76200 10390000
         BCTR  R6,0           -1 FROM R6 =-2             JOL30027 76200 10400000
         LTR   R7,R6          SAVE NEW LENGTH            JOL30027 76200 10410000
         BZ    S98RETZ        IF ZERO NOW, STORE LEN, RET OL30027 82200 10420000
         BCTR  R6,0           -1 FOR MVC EXECUTE         JOL30027 76200 10430000
****************************************************************** DASD 10440000
* ABEND 002 OCCURED BY A MINUS VALUE IN REG-6 WHICH SHIFTED      * DASD 10450000
* THE BUFFER ADDRESS (WHICH IS GETMAINED AFTER THE TKN AREA)       DASD 10460000
* ONE BYTE WHICH LEFT A BIG RDW IN THE VB LENGTH                 * DASD 10470000
* A TEST HERE FOR A MINUS VALUE SHOULD DO IT                     * DASD 10480000
****************************************************************** DASD 10490000
         LTR   R6,R6   DID REGISTER 6 GO NEGATIVE  ??              DASD 10500000
         BM    S98RETN YEP   LETS NOT DO ANY MORE                  DASD 10510000
         EX    R6,S98MVC1     MOVE AND DROP 1ST QUOTE    JOL30027 76200 10520000
         LA    R8,3(R5,R6)    POINT TO LAST QUOTE-1      JOL30027 76200 10530000
         MVC   0(2,R8),BLANKS BLANK THEM OUT             JOL30027 76200 10540000
         STH   R7,DBL         RESET -                    JOL30027 76200 10550000
         MVC   0(2,R5),DBL    -STRING LENGTH NOW         JOL30027 76200 10560000
         SPACE 2                                         JOL30027 76200 10570000
S98FDBLQ EQU   *                                         JOL30027 76200 10580000
         LH    R6,0(R5)    LOAD STRING LENGTH                     76200 10590000
         SPACE 1                                         JOL30027 76200 10600000
         LA    R1,2(R5)       LOAD START ADDRESS OF STR. JOL30027 76200 10610000
         LA    R14,1          SET LOOP INCR=1            JOL30027 76200 10620000
         LA    R15,1(R5,R6)   POINT TO END-1             JOL30027 76200 10630000
S98LUP   CLC   0(2,R1),=C'''''' DOUBLE QUOTE PERHAPS?    JOL30027 76200 10640000
         BE    S98DBL         YES ->                     JOL30027 76200 10650000
         BXLE  R1,R14,S98LUP                             JOL30027 76200 10660000
S98RETZ  STH   R6,DBL         END --- RESET LENGTH       JOL30027 76200 10670000
         MVC   0(2,R5),DBL    DONE                       JOL30027 76200 10680000
S98RETN  JOLRETN RC=0                                    JOL30027 76200 10690000
         SPACE 2                                         JOL30027 76200 10700000
S98DBL   EQU   *                                         JOL30027 76200 10710000
* CALCULATE LENGTH TO SHIFT                              JOL30027 76200 10720000
         LR    R9,R15         LOAD END POINTER           JOL30027 76200 10730000
         SR    R9,R1          -CURRENT BYTE ADDRESS      JOL30027 76200 10740000
         EX    R9,S98MVC2     SHIFT BACK A BYTE          JOL30027 76200 10750000
         S     R6,ONE         -1 FOR LENGTH NOW          JOL30027 76200 10760000
         BP    S98LUP         STILL DATA THERE?->CONTINUEJOL30027 76200 10770000
         B     S98RETN        ELSE RETN                  JOL30027 76200 10780000
         SPACE 3                                         JOL30027 76200 10790000
S98MVC1  MVC   2(*-*,R5),3(R5)                           JOL30027 76200 10800000
S98MVC2  MVC   0(*-*,R1),1(R1)                           JOL30027 76200 10810000
         LTORG                                           JOL30027 76200 10820000
         CNOP  0,8                                       JOL30027 76200 10830000
         DC    S(*,*,*,*,*,*,*,*,*,*,*,*)                JOL30027 76200 10840000
         DC    S(*,*,*,*,*,*,*,*,*,*,*,*)                JOL30027 76200 10850000
         DC    S(*,*,*,*,*,*,*,*,*,*,*,*)                JOL30027 76200 10860000
         DC    S(*,*,*,*,*,*,*,*,*,*,*,*)                JOL30027 76200 10870000
           END                                                          10880000
