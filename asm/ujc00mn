UJC00MN    TITLE 'MAIN COMPILER ROUTINE FOR JOL'                        00010016
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1971,1972,1973                 00011016
*  1974,1975                                                            00012016
* COPYRIGHT CCS 1971-1976                                               00020000
* COPYRIGHT CCS 1980                                                    00030000
* COPYRIGHT CCS 1982                                                    00040003
* COPYRIGHT CCS-JOL 1988                                                00041016
          COPY   JOLCOM                                                 00050000
* REFER TO INSTRUCTIONS ON COPYRIGHT NOTICE FORM NO CCS-C001.           00080000
           SPACE 3                                                      00090000
*                   J             000000            L                   00100000
*                   J            0      0           L                   00110000
*                   J           0        0          L                   00120000
*                   J          0          0         L                   00130000
*                   J         0            0        L                   00140000
*                   J         0            0        L                   00150000
*                   J         0            0        L                   00160000
*                   J         0            0        L                   00170000
*                   J         0            0        L                   00180000
*                   J         0            0        L                   00190000
*                   J         0            0        L                   00200000
*        J          J         0            0        L                   00210000
*         J        J           0          0         L                   00220000
*          J      J             0        0          L                   00230000
*           J    J               0      0           L                   00240000
*            JJJJ                 000000            LLLLLLLLLLL         00250000
           SPACE 6                                                      00270022
*********************************************************************** 00280000
*                                                                       00290000
* NOTE                    NOTE                    NOTE                  00300000
*     NOTE            NOTE    NOTE            NOTE    NOTE              00310000
*         NOTE    NOTE            NOTE    NOTE            NOTE    NOTE  00320000
*             NOTE                    NOTE                    NOTE      00330000
*                                                                       00340000
*********************************************************************** 00350000
*                                                                       00360000
* VERSION 0 OF JOL, (THE PL1 VERSION) USED TO GENERATE 'REAL' JCL.      00370000
*  THIS WAS CONSIDERED BY SOME TO BE SLOW AND INEFFICENT. UNFORTUNATELY 00380000
*  I TENDED TO AGREE, AND WROTE A MONITOR FOR JOL.                      00390000
* THIS IS RELATIVELY EFFICENT, BUT NOW WE BACK-TRACK AND PROVIDE        00400000
*  AN OPTION TO GENERATE 'REAL' JCL FOR THESE REASONS:-                 00410000
*          1.  IT WILL FUNCTION ON ANY VERSION OF THE IBM               00420000
*              OPERATING SYSTEM.                                        00430000
*          2.  IT WILL BE MUCH, MUCH MORE MARKETABLE.                   00440000
*              (AND THAT IS EXTREMELY,REPEAT, IMPORTANT)                00450000
*                                                                       00460000
*********************************************************************** 00470000
*                                                                       00480000
* ALSO, WE WILL NOW GENERATE REAL STEPNAMES FOR THE MONITOR VERSION,    00490000
*  AND FOR THE 'REALJCL' VERSION.                                       00500000
*                                                                       00510000
* WHEN A STEP IS OUTPUT, IT IS NOW KEPT IN THE STACK. IF A DUPLICATE    00520000
*  STEP IS OUTPUT, IT IS CHANGED TO A $$STMT TYPE OF NAME SO THAT       00530000
*  THERE ARE NO DUPLICATES OUT THERE.                                   00540000
* MACROS CAUSE ALL SORTS OF PROBLEMS BECAUSE OF THEIR NAMES, AND        00550000
*  THEY MOST OFTEN HAVE DUPLICATE NAMES.                                00560000
*  THE REAL PROBLEMS THERE ARE :-                                       00570000
*          1.  A MACRO MAY HAVE A NAME THAT HAS ALREADY BEEN CREATED    00580000
*              IN A PREVIOUS INVOCATION OF THE SAME MACRO.              00590000
*              SO: ANY IF STATEMENT REFERRING TO THE SECOND EXEC        00600000
*                  CAN BE CHANGED TO COND=($$NNNN) TYPE THING.          00610000
*                                                                       00620000
*              WHERE THE PROBLEM IS IS THIS:-                           00630000
*                  WE HAVE TO HOLD THE NAME OF ANY PROGRAM EXECUTED     00640000
*                  IN THE TABLE SO WE KNOW IF THE NAME IS 'RUN' TWICE,  00650000
*              THIS MEANS THAT THE LEVEL HAS TO BE SET TO 0 BEFORE      00660000
*                  THE TABLE IS RE-ORGED, UNLESS THE NAME WAS ALREADY   00670000
*                  IN THE STACK AT LEVEL 0.                             00680000
*                                                                       00690000
*                                                                       00700000
*                                                                       00710000
*              SO...                                                    00720000
*          2.  THE SECOND PROBLEM IS THIS:-                             00730000
*              A MACRO INVOCATION GENERALLY HAS A LABEL ON IT, AND      00740000
*              THIS LABEL IS THE LABEL THAT PEOPLE REFER TO WHEN        00750000
*              THEY TEST THE RETURN CODE.                               00760000
*              SO WE HAVE TO REMEMBER THE STEP NAME WE USED ON THE      00770000
*              MACRO TO GENERATE COND TESTS.                            00780000
*                                                                       00790000
*              WE DO THIS BY COPYING INTO THE ADDRESS AND STMT FIELDS   00800000
*              IN THE IDTABLE THE STEP-NAME WE USED.                    00810000
*                                                                       00820000
*          3.  WE WANT TO KNOW WHEN 2 STEPS ARE EXECUTED IN A MACRO     00830000
*              WHEN WE ARE GENERATING REAL ICL, COS WE CAN ONLY         00840000
*              ALLOW THE USER TO TEST THE FIRST STEP OF A MACRO,        00850000
*              WHEREAS THE MONITOR RETURNS THE HIGHEST NUMBER           00860000
*              TO THE LABEL FOR TESTING.                                00870000
*                                                                       00880000
*                                                                       00890000
* NOW LETS LOOK AT SOME OF THE PROBLEMS INVOLVED IN GENERATING          00900000
*  REAL JCL.                                                            00910000
*                                                                       00920000
*    1. CATLG ETC CAN EASILY BE MANAGED BY EXTRA STEPS WITH DISPOSITION 00930000
*       PROCESSING                                                      00940000
*    2. IF STATEMENTS ARE THE BIG PROBLEM.                              00950000
*       WE WILL DEVOTE THE REST OF THIS SECTION TO DESCRIBING THE 'IF'  00960000
*       PROBLEMS.                                                       00970000
*                                                                       00980000
*    IF...                                                              00990000
*                                                                       01000000
*    1. JCL SAYS IF A=10 THEN BYPASS STEP(S).                           01010000
*       JOL ADDS A RIDER TO THAT AND SAYS IF STEP A EXECUTED AS WELL.   01020000
*    2. JOL ALLOWS YOU TO TEST A RETURN CODE WITH ANOTHER.              01030000
*       THAT IS IMPOSSIBLE WITH JCL.                                    01040000
*    3. JOL ALLOWS VERTUALLY UNLIMITED NUMBER OF TESTS.                 01050000
*    4. JOL ALLOWS EXPRESSIONS LIKE (A=10|B=20 & C=30) & A=20.          01060000
*    5. JOL ALLOWS MULTIPLE IFS                                         01070000
*                                                                       01080000
*                                                                       01090000
*                                                                       01100000
*                                                                       01110000
*                                                                       01120000
*                                                                       01130000
*    SO ONWARDS AND LETS SEE WHAT WE CAN DO, AND WHAT WE CANNOT DO.     01140000
*                                                                       01150000
*                                                                       01160000
*    1. IF A THEN...                                                    01170000
*       A. THIS CAN BE ACCOMPISHED BY EITHER IGNORING THE TEST IF       01180000
*          THE STEP ALWAYS EXECUTED (WHICH WE KNOW IN THE COMPILE       01190000
*          STAGE) OR                                                    01200000
*                                                                       01210000
*       B. //$$STMT EXEC PGM=UJERETN1,COND=((A,NE,0),(A,EQ,0))          01220000
*          IF $$STMT STEP DID EXECUTE, THEN STEP A DID NOT.             01230000
*          SO ON THE STEP THAT IS TO EXECUTE SUBJECT TO THE TEST,       01240000
*          WE CAN SAY                                                   01250000
*          //REALSTEP EXEC PGM=REALPROG,COND=($$STMT,EQ,1) AND          01260000
*          THIS STEP WILL THEREFORE BE BYPASSED IF A DID NOT EXECUTE.   01270000
*                                                                       01280000
*                                                                       01290000
*    2. IF A=10 THEN ...                                                01300000
*                                                                       01310000
*       A. IF THE STEP IS ALWAYS EXECUTED                               01320000
*          //REALSTEP EXEC PGM=REALPROG,COND=(A,NE,10)                  01330000
*          ALL WE HAVE TO DO IS REVERSE ALL THE                         01340000
*              =   TO  NE                                               01350000
*              ^=      EQ                                               01360000
*              ETC                                                      01370000
*                                                                       01380000
*       B. IF THE STEP MAY HAVE EXECUTED, THEN                          01390000
*                                                                       01400000
*          //$$STMT EXEC PGM=UJERETN1,COND=(A,EQ,10)                    01410000
*          THE ABOVE STEP WILL ONLY EXECUTE IF A DID NOT EXECUTE,       01420000
*          OR DID EXECUTE, BUT THE RETURN CODE WAS NOT EQUAL 10.        01430000
*          //REALSTEP EXEC PGM=REALNAME,COND=($$STMT,EQ,1)              01440000
*          THE REALSTEP WILL EXECUTE ONLY IF THE $$STMT DID NOT.        01450000
*          HENCE, IF A=10 THEN ...                                      01460000
*                                                                       01470000
*    3. IF A=10 | B=20 THEN ...                                         01480000
*                                                                       01490000
*       A. IF A AND B MUST ALWAYS HAVE EXECUTED, THEN                   01500000
*          //REALSTEP EXEC PGM=REALPROG,COND=((A,NE,10),(B,NE,20))      01510000
*                                                                       01520000
*       B. IF A AND B MAY NOT HAVE EXECUTED                             01530000
*          //$$STEP01 EXEC PGM=UJERETN1,COND=(A,EQ,10)                  01540000
*          //$$STEP02 EXEC PGM=UJERETN1,COND=(B,EQ,20)                  01550000
*          //REALSTEP EXEC PGM=REALPROG,COND=(($$STEP01,EQ,1),          01560000
*          //          ($$STEP02,EQ,1))                                 01570000
*                                                                       01580000
*                                                                       01590000
*                                                                       01600000
*                                                                       01610000
*    4. IF A=10 & B=20 THEN ...                                         01620000
*                                                                       01630000
*       A. IF A AND B MUST ALWAYS HAVE EXECUTED                         01640000
*          //$$STMT EXEC PGM=UJERETN1,COND=((A,EQ,10),(B,EQ,20))        01650000
*          THE ABOVE WILL EXECUTE ONLY IF A^=10 OR B^=10                01660000
*          THEN:                                                        01670000
*          //REALSTEP EXEC PGM=REALPROG,COND=($$STMT,EQ,1)              01680000
*                                                                       01690000
*       B. IF A AND B MAY NOT HAVE EXECUTED                             01700000
*          AS ABOVE                                                     01710000
*                                                                       01720000
*                                                                       01730000
*    5. IF A=10 THEN DO;                                                01740000
*                                                                       01750000
*          WE CREATE A STEP FOR EACH'DO' AND TEST IT.                   01760000
*          EACH LEVEL OF DO CREATES A NEW STEP WHICH IS TESTED          01770000
*          ALONG WITH ANY OTHER COND.                                   01780000
*                                                                       01790000
*          FOR EXAMPLE:-                                                01800000
*              IF A=10 THEN DO;                                         01810000
*                  RUN B;                                               01820000
*                  IF B=25 THEN RUN C;                                  01830000
*              END;                                                     01840000
*          THIS WILL PRODUCE                                            01850000
*          //$$STMT01 EXEC PGM=UJERETN1,COND=(A,EQ,10)                  01860000
*          //B  EXEC PGM,COND=($$STMT01,EQ,1)                           01870000
*          //C  EXEC PGM,COND=(($$STMT01,EQ,1),(B,NE,25))               01880000
*                                                                       01890000
*          IF RUNC HAD BEEN ANOTHER DO, A GENERATE OF ANOTHER           01900000
*          STEP WOULD SUFFICE FOR THE NEXT 'DO' LEVEL.                  01910000
*                                                                       01920000
*    6.    IF  (A/B) &C                                                 01930000
*                                                                       01940000
*          NOT SUPPORTED.                                               01950000
*                                                                       01960000
*    7.    ELSE                                                         01970000
*          SIMPLY (?) TAKE THE REVERSE COND.                            01980000
*                                                                       01990000
*********************************************************************** 02000000
* IMPLEMENTATION                                                        02010000
*                                                                       02020000
* WHEN 'REAL' JCL IS TO BE GENERATED, A FURTHER GETMAIN WILL BE         02030000
*  PERFORMED FOR A TABLE CONTAINING,LEVELS AND NESTS (AS USUAL)         02040000
*  BUT INSTEAD OF HAVING 'T'|'F'|'?' INIT IT WILL HAVE ANY              02050000
*  STEPNAMES THAT MAY HAVE BEEN GENERATED FOR DO GROUPS.                02060000
* THIS TABLE WILL BE                                                    02070000
*              8 CHARS                                                  02080000
*            X 8 NESTS                                                  02090000
*            X 6 LEVELS                                                 02100000
*            = 384 BYTES.                                               02110000
*                                                                       02120000
* IN ADDITION, A STRING OF 200 BYTES WILL BE OBTAINED WHERE THE         02130000
*    LAST CONDITION CODE WILL BE STORED.                                02140000
*                                                                       02150000
* THE TABLE WILL BE RESET (CLEARED) BY THE END PROCESSOR WHEN IT        02160000
*  IS CLEARING THE SMALLER TABLE                                        02170000
*                                                                       02180000
           PRINT DATA                                                   02190000
           JOLSAVE CSECT=UJC00MN                                        02200000
*    THIS IS THE MAIN CONTROLLING MODULE OF THE COMPILER SECTION OF     02210000
*          JOL                                                          02220000
*    WHEN THIS CSECT GAINS CONTROL,ALL PRE-PROCESSING,INCLUDES ETC      02230000
*          HAVE BEEN PERFORMED.                                         02240000
*    THIS CSECT CALLS THE APPROPRIATE ROUTINES TO HANDLE DECLARES,      02250000
*          RUNS,CATALOGUES ETC.                                         02260000
           SPACE 3                                                      02270000
           USING JOLCOM,R2                                              02280000
           SPACE                                                        02290000
* FIRST OFF INITIALISE THE ODD VARIABLE                                 02300000
         CLEAR LEVEL,NEST,COND,SAVENEST,TOTIDS,OVERRIDE,STARTAT         02310008
         CLEAR STOPAT                                       FIX-X 76200 02320000
         ZAP   PCKDSTMT,=P'0'  FOR $$VRNNNN USED IN VREFS         87150 02321019
         CLEAR         CURREALL,                                  75311*02330019
               NOSTEPS                                            75311 02340019
         LA    R0,200                                              DASD 02350019
         STH   R0,MAXSTEPS                                        75311 02360019
         STH   R0,MAXREALL                                        75311 02370019
         L     R1,AIDTBL                                                02380019
         L     R3,ATKN1                                                 02390019
         USING TKNX,R3                                                  02400019
         L     R10,ACATCNTL                                       76200 02410000
         USING CATX,R10                                           75128 02420000
         MVC   PRLASTL,=X'7FFF'   SET OFFSET IN BLOCK VERY HIGH         02430000
         MVC   PRBLKN,ZERO  SET CURRENT BLOCK NO=ZERO                   02440000
         L     R15,APRBUF                                               02450000
         MVC   0(4,R15),ZERO  CLEAR CURRENT BLOCKLENGTH                 02460000
         DROP  R10                                                75128 02470000
         MVC   LINECNT,=H'100' NEW PAGE BY SETTING A HIGH LINE COUNT    02480019
         MVC     WORK2BLK,=H'100'   SO INPUT RTNS DON'T THINK           02490019
*                                   BLOCK ZERO IS IN                    02500000
         SPACE 2                                                        02510019
* NOW IT WOULD SEEM APPROPRIATE TO READ THE FIRST STATEMENT             02520000
           SPACE 2                                                      02530000
           MVC TITLE2,=CL20'COMPILER PHASE'                       74303 02540000
          $CALL UJC50RD                                                 02550000
           B   C00R01(R15)                                              02560000
C00R01     B   C00FIRST        GOT STATEMENT 1 IN NORMALLY.             02570000
           B   C00ERR1         FIRST READ SHOULDN'T HAVE ANYTHING       02580000
           B   C00ERR1         BUT A ZERO VALUE,SO WE'LL QUITE          02590000
           B   C00ERR1         HAPPILY ABORT HIM.                       02600000
C00ERR1  JOLERR 401,'PREPROCESSOR DID NOT GENERATE ANY STATEMENTS'      02610000
C00RETNF   JOLRETN RC=16                                                02620000
           SPACE 3                                                      02630000
C00FIRST   EQU *                                                        02640000
* THE FIRST STATEMENT APPARENTLY MADE THE GRADE SUCCESSFULLY SO         02650000
*    NOW WE HAD BETTER GO TO THE APPROPRIATE HANDLING ROUTINES          02660000
           B   C00GOTIN                                                 02670000
           SPACE                                                        02680000
C00SPLIT  $CALL UJSPLIT                                                 02690000
C00READ    EQU  *                                                       02700000
C00MAINL   EQU *               THIS IS THE MAIN-LINE.                   02710000
           MVI OVERRIDE,C' '   CLEAR OVERRIDE INDICATOR                 02720000
          $CALL UJC50RD                                                 02730000
           B   C00R02(R15)                                              02740000
C00R02     B   C00GOTIN        GOT INSTRUCTION,DEAL WITH IT             02750000
           B   C00RETN0        EOF RETN                                 02760000
           B   C00RETNF        ERROR                                    02770000
           B   C00RETNF        ERROR                                    02780000
           B   C00RETNF        ERROR                                    02790000
           SPACE 3                                                      02800000
C00GOTIN   EQU *               GOT AN INSTRUCTION,SO DEAL WITH IT.      02810000
           GETTKN  NO=1        GET THE STATEMENT TYPE                   02820000
* NOW SET UP A FEW VALUES IN THE SECTION 'INSTRUCT' WHICH WILL BE       02830000
*    WRITTEN OUT WHEN THE INSTRUCTION HAS BEEN DECODED                  02840000
           MVC ISTMT,STMT                                               02850000
           OC ISTMT,=C'0000'                                            02860000
           MVC  ICOMMAND,TKN   SAVE INSTRUCTION IN ICOMMAND             02870000
           MVC ILABEL,LABEL                                             02880000
           MVC ILENGTH,=AL2(IBODY)                                      02890000
           CLEAR TRANS                                                  02900000
           MVC  ILEVEL,LEVEL+1                                          02910000
           MVC INEST,NEST+1                                             02920000
           SPACE 3                                                      02930000
           LH  R4,LEVEL        LEVEL INDICATOR                          02940000
           SLL R4,3            *8 (WE ALLOW 8 NESTS PER LEVEL)          02950000
           LH R0,NEST                                                   02960000
           AR R4,R0                                                     02970000
           LA  R4,COND(R4)     THERE NOW WE CAN LOOK AT THE CONDS       02980000
           CLI LABEL,C' '                                               02990000
           BNE C00LABOK                                                 03000000
           MVC LABEL(2),=C'$$'                                          03010000
           MVC LABEL+2(4),STMT                                          03020000
C00LABOK   EQU  *                                                       03030000
           CLC =C'IF ',TKN     IS IT AN 'IF'?                           03040000
           BNE C00TDO          NO,TEST IF A 'DO'                        03050000
           MVI 0(R4),C'T'      SET COND INITIALLY TRUE.                 03060000
          $CALL UJC04IF        EVALUATE THE 'IF'                        03070000
           B  C00IFRT(R15)                                              03080000
C00IFRT    B   C00READ         TRUE,GO TO READ                          03090000
           B   C00IFQU         UNDETERMINED,ALREADY OUTPUT FOR          03100000
*                              EXECUTE PHASE,SO SET COND='?',           03110000
*                              GO TO READ.                              03120000
           B   C00IFQU                                                  03130000
           B   C00IFERR                                                 03140000
           B   C00IFERR                                                 03150000
C00IFQU    MVI 0(R4),C'?'      SET '?' INDICATOR                        03160000
           B   C00READ                                                  03170000
C00IFERR   EQU  *                                                       03180000
P00IFALS   EQU  *                                                       03190000
C00IFALS   EQU  *                                                       03200000
           MVI 0(R4),C'F'      SET FALSE IN COND                        03210000
           SPACE 3                                                      03220000
* HERE WE HAD AN ERROR,OR THE 'IF' WAS FALSE                            03230000
*     WE MUST SKIP ANY 'DO' 'END' GROUPS,OR SINGLE                      03240000
*     INSTRUCTIONS. HOWEVER,IF THE INSTRUCTION IS NOT A VALID           03250000
*     INSTRUCTION OF JOL'S,IT WOULD HAVE BEEN EXPANDED BY THE           03260000
*     MACRO PHASE,AND SO WE MAY HAVE A LOT OF INSTRUCTIONS              03270000
*     TO SKIP.                                                          03280000
C00IFRD1  $CALL UJC50RD        READ NEXT INSTRUCTION                    03290000
           LTR R15,R15                                                  03300000
           BNZ C00R01(R15)     FIX EOF ETC                              03310000
           CLC =C'DO ',ICOMMAND DOS REQUIRE LOOKING UNTIL MATCHING      03320000
           BE  C00IFDO1        'END' FOUND                              03330000
           SPACE                                                        03340000
           CLC =C'IF ',ICOMMAND  IF THEN,IF THEN ?                      03350000
           BE  C00IFRD1        YES,SKIP THIS 'IF'                       03360000
           SPACE                                                        03370000
           BAL R14,C00TINST    SEE IF A NORMAL JOL INSTRUCTION,         03380000
*                              IF NOT,MUST BE AN EXPANDED MACRO         03390000
*                              AND WE MUST IGNORE ALL TILL A MATCHING   03400000
*                              'END' (JUST LIKE A 'DO').                03410000
           LTR R15,R15                                                  03420000
           BZ  C00READ         SKIP NORMAL INSTRUCTION NOW.             03430000
           SPACE                                                        03440000
C00IFDO1   EQU *                                                        03450000
           LA  R4,1            SET NUMBER OUTSTANDING 'ENDS'=1          03460000
C00IFRD2  $CALL UJC50RD       $CALL READ ROUTINE                        03470000
           LTR R15,R15                                                  03480000
           BNZ C00R01(R15)     FIX EOF ETC (SHOULD GIVE ERROR?)         03490000
* OK,GOT NEXT AFTER DO OR MACRO START.                                  03500000
           CLC =C'END ',ICOMMAND                                        03510000
           BNE C00IFTDO        TEST IF ANOTHER 'DO' ETC                 03520000
           SH  R4,=H'1'        SET END COUNTER=ITSELF -1                03530000
           BZ  C00READ         GOOD,FINISHED IF FALSE CONDITION         03540000
           B   C00IFRD2        GO READ AGAIN                            03550000
           SPACE 3                                                      03560000
C00IFTDO   EQU *                                                        03570000
           CLC =C'DO ',ICOMMAND                                         03580000
           BNE C00TIFMC        TEST IF ANOTHER MACRO START              03590000
C00IFDO2   EQU *                                                        03600000
C00IFD02   LA  R4,1(R4)        INCREASE END COUNTER                     03610000
           B   C00IFRD2        AND READ AGAIN                           03620000
           SPACE                                                        03630000
C00TIFMC   BAL R14,C00TINST    JOL OR MACRO TESTER                      03640000
           LTR R15,R15                                                  03650000
           BZ  C00IFRD2        WAS JOL INSTRUCTION,READ A NEW ONE       03660000
           B   C00IFDO2        WAS MACRO,SET END COUNTER UP AGAIN       03670000
           SPACE 3                                                      03680000
           SPACE 3                                                      03690000
C00TDO     CLC =C'DO ',TKN     OS IT A DO ?                             03700000
           BNE C00TEND         TEST IF IT IS AN END                     03710000
           LH  R1,NEST                                                  03720000
           LA R1,1(R1)                                                  03730000
           CH  R1,=H'8'        TOO MANY NESTS                           03740000
           BH  C00DOERR                                                 03750000
           STH  R1,NEST                                                 03760000
           MVC INEST,NEST+1                                             03770000
         OPINST INST                                                    03780000
           B  C00READ                                                   03790000
C00DOERR JOLERR 406,'TOO MANY CONCURRENT DO''S'                         03800000
           B   C00READ                                                  03810000
C00TEND     EQU *                                                       03820000
           CLC =C'END ',TKN    IS IT END ?                              03830000
           BNE C00TELSE                                                 03840000
           LH  R1,NEST                                                  03850000
           SH  R1,=H'1'                                                 03860000
           BM C00DROPL         REDUCE LEVEL BY 1                        03870000
           STH R1,NEST                                                  03880000
C00PUT   EQU   *                                                  75128 03890000
         OPINST INST                                              75128 03900000
C00CLRC    MVI 0(R4),C' '      CLEAR CURRENT COND                       03910000
           B   C00READ                                                  03920000
           B *+4                                                        03930000
           B *+4                                                        03940000
           B *+4                                                        03950000
           SPACE 2                                                      03960000
UJC47EXI DS    0H                                                 87150 03961009
         MVC   ICOMMAND,=CL8'END'                                       03961110
         ENTRY UJC47EXI                                           87150 03962009
C00DROPL   LH  R1,LEVEL                                                 03970000
           SH  R1,=H'1'                                                 03980000
           BM  C00LEVER                                                 03990000
           STH R1,LEVEL                                                 04000000
           LA R15,SAVENEST(R1) RESET THE ORIGINAL NEST FOR THE          04010000
           MVC NEST+1(1),0(R15) PREVIOUS LEVEL                          04020000
           MVC INEST,0(R15)                                             04030000
* HERE THERE USED TO BE A CALL TO UJS18RID,WHICH MERELY RESET     74303 04040000
*    THE NOIDS FIELD WHEN THE END OF A MACRO WAS FOUND.           74303 04050000
* THE FOLLOWING CODE DOES THE SAME,BUT SAVES SOME 200 ODD BYTES   74303 04060000
           LA  R14,20          LENGTH OF TABLE                    74303 04070000
           LR  R15,R14         INTO R15 AS WELL                         04080000
           MH  R15,NOIDS       * NOIDS                                  04090000
           L   R1,AIDTBL       LOAD START ADDRESS OF TABLE IN R1        04100000
           AR  R15,R1          R15=END OF TABLE                         04110000
           SR  R15,R14         SO WE DON'T GO TOO FAR (BXLE^BXH)        04120000
         LR    R4,R1         WE WILL MOVE ANY IDS BACK THERE      75128 04130000
* NOTE ABOVE INSTRUCTION: NOIDS=1 IF ONE IDENTIFIER NAME IN             04140000
*    TABLE.BY MULTIPLYING 1 X 20 AND ADDING THE ADDRESS WE              04150000
*    HAVE THE STOP ADDRESS=120 (IF TABLE STARTS AT 100)                 04160000
           USING IDTABLE,R1                                             04170000
C00TLEVZ EQU   *                                                  75128 04180000
           CLC IDLEVEL,LEVEL+1                                          04190000
           BH  C00END99                                                 04200000
         MVC   0(IDNEST+L'IDNEST-IDNAME,R4),IDNAME                75128 04210000
         LA    R4,IDNEST+L'IDNEST-IDNAME(R4) STEP UP R4           75128 04220000
C00END99 BXLE  R1,R14,C00TLEVZ ROUND LOOP                         75128 04230000
          LR  R1,R4       GET LAST USEFUL POSN IN TABLE                 04240000
           ST  R1,ANEXTID      R1 POINTS TO NEXT FREE LOCATION          04250000
           LH R15,NOIDS                                                 04260000
           SR  R0,R0           GET READY TO DIVIDE R0,R1 BY 20          04270000
           STH R0,NOIDS        SET TO 0,SAVES DOING IT LATER MAYBE      04280000
           S   R1,AIDTBL       R1= DIFFERNCE,IE NO ENTRIES * 20         04290000
           BNP C00PUT          IF ^>0,NOIDS=0,2 LINES ABOVE             04300000
           D   R0,=F'20'       /20                                      04310000
           CH  R15,TOTIDS                                               04320000
           BL  *+8                                                      04330000
           STH R15,TOTIDS                                               04340000
           STH R1,NOIDS                                                 04350000
           B  C00PUT                                                    04360000
           SPACE 2                                                      04370000
C00LEVER JOLERR 207,'TOO MANY END''S'                                   04380000
           B  C00READ                                                   04390000
C00TELSE   EQU  *                                                       04400000
           CLC =C'ELSE ',TKN                                            04410000
           BNE  C00TOTHR       NOT ELSE EITHER                          04420000
             OPINST INST    OP THE ELSE                                 04430000
            B      C00MAINL  AND BACK TO MAIN-LINE                      04440000
            AGO .SKIPOEL                                                04450000
           CLI 1(R4),C' '      ELSE AFTER A COMDITION TEST ?            04460000
           BNE  C00ELSOK                                                04470000
         JOLERR 303,'ELSE IGNORED'                                      04480000
C00FIXEL   MVC TKNSTRG(4),BLANKS  DROP THE ELSE                         04490000
           B   C00SPLIT        RESPLIT THE TOKENS AND PERFORM INSTRUCT  04500000
C00ELSOK   CLI 0(R4),C'T'      WAS LAST CONDITION 'TRUE'                04510000
           BNE C00TELSF        NO,TEST IF FALSE                         04520000
           MVI 0(R4),C'F'      SET COND TO FALSE                        04530000
           B   C00IFALS        GO TO FALSE IF PROCESSOR                 04540000
           SPACE                                                        04550000
C00TELSF   EQU  *                                                       04560000
           CLI 0(R4),C'F'      LAST 'IF' FALSE                          04570000
           BNE C00TOTHR        NO GO AND DEAL WITH IT AS A '?' INSTRUCT 04580000
           MVI 0(R4),C'T'      SET COND TO 'T'                          04590000
           B   C00FIXEL                                                 04600000
.SKIPOEL    ANOP                                                        04610000
C00TOTHR   EQU  *              NOT IF OR ELSE,UNLESS IT WAS IN A '?'    04620000
*                              LOOP                                     04630000
* WELL THAT WAS TRUE  SO CALL THE APPROPRIATE SKIP ROUTINES             04640000
* OK,NOW SEE IF THE 2ND TOKEN IS AN'=' SIGN                             04650000
           GETTKN NO=2                                                  04660000
           CLI TKN,C'='                                                 04670000
           BE  C00ASSIN                                                 04680000
           GETTKN NO=1                                                  04690000
           CLC =C'DCL ',TKN    IS IT 'DCL'                              04700000
           BE  C00DCL                                                   04710000
           CLC =C'DECLARE ',TKN OR IS IT 'DECLARE'                      04720000
           BE  C00DCL                                                   04730000
           CLC =C'DEFINE ',TKN OR MAYBE A DEFINE ?                      04740000
           BE  C00DCL                                                   04750000
           B   C00FNDRT        GO FIND ADDRESS OF THE ROUTINE FROM      04760000
*                              THE JOLINST TABLE                        04770000
C00DCL     EQU *                                                        04780000
* BEFORE TRYING TO FIND THE ADDRESS OF THE CORRECT PROCESSING ROUTINE   04790000
*    FOR DECLARES WE MUST FIRST OF ALL SEE IF WE ARE IN THE MIDDLE OF   04800000
*    DO LOOP,BECAUSE IF WE ARE WE CAN'T HANDLE A DECLARE (OR AN         04810000
*    ASSIGNMENT).                                                       04820000
* HOWEVER, A MACRO((IE.DIFFERENT LEVEL) CAN HAVE A DECLARE AS           04830000
*   LONG A S  IT ISN'T AFTER AN 'IF ' STATEMENT                         04840000
           LH R1,LEVEL                                                  04850000
           SLL R1,3            MULT *8                                  04860000
           LA R1,COND(R1)      NOW LOOKING AT COND(LEVEL)               04870000
           LR  R15,R4                                                   04880000
           LA  R14,1                                                    04890000
C00TQ5     CLI 0(R1),C'?'      Q CONDITION ?                            04900000
           BE  C00ERR2                                                  04910000
           BXLE R1,R14,C00TQ5                                           04920000
           B   C00DCLOK                                                 04930000
           SPACE                                                        04940000
C00ERR2    EQU *                                                        04950000
         JOLERR 402,'DECLARATION FOUND AFTER EXECUTION ''IF'''          04960000
           B  C00CLRC          CLEAR CURRENT COND,GET NEXT INSTRUCTION  04970000
C00DCLOK   EQU *                                                        04980000
* FINE WE HAVE A DECLARE AND IT IS IN A GOOD POSITION,SO WE CAN PROCESS 04990000
*    IT                                                                 05000000
* BUT FIRST,IS IT A DCL PROG,OR A DCL DS TYPE OF STATEMENT ?            05010000
* ***                                                                   05020000
           GETTKN NO=3                                                  05030000
           CLC =C'DS ',TKN                                              05040000
           BE  C00DCLDS                                                 05050000
           CLC =C'* ',TKN                                               05060000
           BE  C00DCLDS                                                 05070000
           CLC =C'SYSOUT ',TKN                                          05080000
           BE  C00DCLDS                                                 05090000
           CLC =C'PRINTER ',TKN                                         05100000
           BE  C00DCLDS                                                 05110000
           CLC =C'PUNCH ',TKN                                           05120000
           BE  C00DCLDS                                                 05130000
           CLC =C'DATA ',TKN                                            05140000
           BE  C00DCLDS                                                 05150000
           CLC =C'PROGRAM ',TKN                                         05160000
           BE  C00DCLPG                                                 05170000
           CLC =C'PROG ',TKN                                            05180000
           BE  C00DCLPG                                                 05190000
         JOLERR 405,'UNRECOGNISABLE DECLARE'                            05200000
           B  C00CLRC          CLEAR CURRENT COND,GET NEXT INSTRUCTION  05210000
           SPACE 3                                                      05220000
C00DCLDS   BAL    R7,C00VLNTH       GO VALIDATE DSID LENGTH TO 8 ORDASD 05230000
           CLEAR TKN                                               DASD 05240000
           MVC TKN(3),=C'DS '                                           05250000
           B   C00FNDRT                                                 05260000
C00DCLPG   BAL    R7,C00VLNTH       GO VALIDATE DSID LENGTH TO 8 ORDASD 05270000
           CLEAR TKN                                               DASD 05280000
           MVC TKN(5),=C'PROG '                                         05290000
           B   C00FNDRT                                                 05300000
***************************************************************    DASD 05310000
* REJECT A DSID OR PROGRAM NAME GREATER THAN 8 BYTES          *    DASD 05320000
***************************************************************    DASD 05330000
C00VLNTH   EQU   *                                                 DASD 05340000
           GETTKN NO=2       RETRIEVE DSID OR PGMID                DASD 05350000
           CLC  #TKN,=H'8'   CHECK LENGTH                          DASD 05360000
           BNHR   R7         IF GOOD  JUST RETURN                  DASD 05370000
           JOLERR  411,'IDENTIFIER ''',#TKN,'''',                      *05380000
               '  EXCEEDS MAXIMUN LENGTH OF 8 BYTES, DCL IGNORED'  DASD 05390000
           B    C00CLRC      REJECT IT                             DASD 05400000
C00ASSIN   EQU *                                                        05410000
           WXTRN UJC85ASN                                               05420000
           L   R15,=V(UJC85ASN)                                         05430000
           B   C00RCALL        REAL CALL THAT LABEL SAYS          75311 05440000
C00NODCL   EQU  *                                                       05450000
C00FNDRT   EQU *                                                        05460000
         L     R1,=V(CJOLINST) LOAD ADDRESS OF TABLE WITH THE     75128 05470000
*                              INSTRUCTION NAMES AND THE ADDRESSES      05480000
*                              OF THE ROUTINES TO HANDLE THEM.          05490000
           LM  R7,R9,0(R1)     LOAD BXLE ADDRESS CONSTANTS FOR          05500000
*                              THE ABOVE TABLE.                         05510000
C00FINDR   CLC TKN(12),0(R7)   COMPARE INSTRUCTION WITH THAT IN TABLE   05520000
           BE  C00GOTRT        GOT THE ROUTINE TO HANDLE IT.            05530000
           BXLE  R7,R8,C00FINDR                                         05540000
* BIT OF A FAIL,BECAUSE THE ROUTINE COULD NOT BE FOUND                  05550000
* HOWEVER,NOT ALL IS LOST BECAUSE                                       05560000
* THE MACRO STATEMENTS WOULD HAVE BEEN PROCESSED IN THE                 05570000
*     PRE-PROCESSOR PORTION OF JOL                                      05580000
* HERE THEN,WE MUST OUTPUT A 'MACRO' STATEMENT TO THE OPTIMISER         05590000
*     POTION AND UP THE LEVEL NUMBER BY 1                               05600000
           SPACE                                                        05610000
* IF THIS IS AN INCLUDE,IGNORE IT COS ITS BEEN FIXED                    05620000
           CLC =C'INCLUDE ',ICOMMAND                                    05630000
           BE C00MAINL                                                  05640000
           IFNULL ICOMMAND,C00MAINL                               75311 05650000
           SPACE 3                                                      05660000
* DO THE LEVEL NUMBER FIRST                                             05670000
           CLC =C'$$',LABEL                                             05680000
           BE C00NLABM         NL MACRO LABEL                           05690000
           USING IDTABLE,R1                                             05700000
          $CALL UJS17FID,LABEL                                    74303 05710000
            LTR R15,R15       DID WE FIND A NAME ALREADY           DASD 05720000
            BNZ C00IDOK2      NOPE                                 DASD 05730000
            CLC IDLEVEL,LEVEL+1                                    DASD 05740000
             BE  C00IDOK2      OK  LETS JUST OVERLAY THIS GUY      DASD 05750000
            LR  R1,R0              REG-0 POINTS TO EMPTY LOCATION  DASD 05760000
C00IDOK2  EQU   *                                                  DASD 05770000
          MVI  IDTYPE,X'02'    MACRO TYPE                         75128 05780000
           MVC IDSTMT,STMT                                              05790000
           MVI IDUSED,1                                                 05800000
           MVC IDNAME,LABEL                                             05810000
            MVC  IDLEVEL,LEVEL+1    SHIFT IN LEVEL NUMBER    75049      05820000
            MVC  IDADDR,ZERO        THAT WILL STOP AN ABEND  75049      05830000
*                                   IF RUN MACRO DONE.       75049      05840000
           LH R1,NOIDS                                                  05850000
           LA R1,1(R1)                                                  05860000
           STH R1,NOIDS                                                 05870000
           DROP R1                                                      05880000
C00NLABM   EQU  *                                                       05890000
           LH R1,LEVEL                                                  05900000
           LA R15,SAVENEST(R1)                                          05910000
           LA R1,1(R1)                                                  05920000
           CH R1,=H'12'                                           82200 05930000
           BNH C00LEVOK                                                 05940000
         JOLERR 408,'TOO MANY LEVELS OF MACRO NESTING'                  05950000
           B  C00CLRC          CLEAR CURRENT COND,GET NEXT INSTRUCTION  05960000
C00LEVOK   EQU *                                                        05970000
           STH R1,LEVEL                                                 05980000
           MVC 0(1,R15),NEST+1                                          05990000
           SR R0,R0                                                     06000000
           STH R0,NEST                                                  06010000
           STC R0,INEST                                                 06020000
           MVC ILENGTH,=AL2(IBODY+18)                                   06030000
           MVC ITEXT+2(8),ICOMMAND SAVE MACRO NAME                      06040000
           MVC ITEXT+10(8),LABEL  AND LABEL                             06050000
           MVC ITEXT(2),=H'16'  SET UP PSUEDO LENGTH                    06060000
           MVC ICOMMAND,=CL8'MACRO'                                     06070000
           MVC ILEVEL,LEVEL+1                                           06080000
         OPINST INST                                                    06090000
           B C00MAINL                                                   06100000
           SPACE                                                        06110000
C00INVAL JOLERR 404,'''',#TKN,''' IS NOT YET IMPLEMENTED'               06120000
*                              WHAT THE POOR USER WANTS.                06130000
           B  C00CLRC          CLEAR CURRENT COND,GET NEXT INSTRUCTION  06140000
           SPACE 3                                                      06150000
C00GOTRT   L   R15,12(R7)      LOAD ADDRESS                             06160000
         L     R15,0(R15)     LOAD ROUTINE ADDRESS                75128 06170000
C00RCALL   EQU  *                                                       06180000
           LTR R15,R15         =0 ?,I.E WXTRN ?                         06190000
           BZ  C00INVAL        YEP,INVALID INSTRUCTION                  06200000
C00CALL   $CALL (15),(JOLCOM,TKNX,TRANS)                                06210000
           B  C00CLRC          CLEAR CURRENT COND,GET NEXT INSTRUCTION  06220000
           SPACE 3                                                      06230000
           SPACE 3                                                      06240000
C00RETN0   EQU *                                                        06250000
* WELL WE'VE FINISHED, BUT WE MUST OUTPUT THE LAST BLOCK ON THE         06260000
* 'INST' FILE SO THAT THE NEXT PHASE CAN READ IT IN                     06270000
         SPACE 1                                                  75128 06280000
* FIRST OF ALL, CHECK THAT THE 'STARTAT' INSTRUCTION WAS FOUND    75128 06290000
         IFNULL STARTAT,C00STAOK   IFBLANK, ALL IS WELL           75128 06300000
         JOLERR 409,'LABEL ''',STARTAT,                           75128*06310000
               ''' NOT FOUND FOR STARTAT INSTRUCTION'                   06320000
         CLEAR STARTAT                                                  06330000
C00STAOK EQU   *                                                  75128 06340000
* CHECK IF STOPAT CODED, AND FOUND                          FIX-X 76200 06350000
         IFNULL STOPAT,C00STPOK OK -> END                   FIX-X 76200 06360000
         CLI   STOPAT,X'FF'   DID WE FIND LABEL ANYWHERE ?  FIX-X 76200 06370000
         BE    C00STPOK       YES  -> END                   FIX-X 76200 06380000
         JOLERR 310,'LABEL ''',STOPAT,                      FIX-X 76200*06390000
               ''' NOT FOUND FOR STOPAT, INSTRUCTION',      FIX-X 76200*06400000
               ':- ENTIRE JOB WILL RUN'                     FIX-X 76200 06410000
C00STPOK   CLEAR STOPAT                                           76200 06420000
          MVC  #TKN,=H'-1'    SET OUTPUT NEGATIVE                 76200 06430000
          OPINST #TKN         OUTPUTS LAST BLOCK FOR US                 06440000
           JOLRETN                                                      06450000
           SPACE 3                                                      06460000
C00TINST   EQU *               THIS ROUTINE IS CALLED WHEN IT           06470000
*                              MUST BE KNOWN WHETHER OR NOT AN          06480000
*                              INSTRUCTION IS A 'JOL' INSTRUCTION       06490000
*                              OR AN ALREADY EXPANDED 'MACRO'           06500000
           SR R15,R15                                                   06510000
* TRY NORMAL JOL TABLE ENTRY INSTRUCTIONS                               06520000
           L  R1,=V(CJOLINST)                                           06530000
           LM R7,R9,0(R1)                                               06540000
C00INLP    CLC ICOMMAND,0(R7)                                           06550000
           BCR 8,R14                                                    06560000
           BXLE R7,R8,C00INLP                                           06570000
* WELL IT MAY BE AN ASSIGNMENT                                          06580000
           LR  R7,R14          SAVE RETURN ADDRESS                      06590000
           GETTKN 2                                                     06600000
           CLI TKN,C'='                                                 06610000
           BNE C00MAC1                                                  06620000
           GETTKN 1                                                     06630000
           SR  R15,R15                                                  06640000
           BR  R7                                                       06650000
C00MAC1    GETTKN 1                                                     06660000
           LA  R15,4                                                    06670000
           BR  R7                                                       06680000
           SPACE 3                                                      06690000
UJC36ST    EQU  *         PROCESS START AT LABEL                        06700000
           ENTRY   UJC36ST                                              06710000
           GETTKN 2                                                     06720000
           JOLSTOR  'START AT LABEL',STARTAT,#TKN                       06730000
           B   C00MAINL                                                 06740000
         CNOP  0,8                                          FIX-X 76200 06750000
           DC   S(*),S(*),S(*),S(*)                                     06760000
           DC   S(*),S(*),S(*),S(*)                                     06770000
           DC   S(*),S(*),S(*),S(*)                                     06780000
           DC   S(*),S(*),S(*),S(*)                                     06790000
           DC   S(*),S(*),S(*),S(*)                                     06800000
           DC   S(*),S(*),S(*),S(*)                                     06810000
           DC   S(*),S(*),S(*),S(*)                                     06820000
           DC   S(*),S(*),S(*),S(*)                                     06830000
           DC   S(*),S(*),S(*),S(*)                                     06840000
           DC   S(*),S(*),S(*),S(*)                                     06850000
           DC   S(*),S(*),S(*),S(*)                                     06860000
           DC   S(*),S(*),S(*),S(*)                                     06870000
           DC   S(*),S(*),S(*),S(*)                                     06880000
           DC   S(*),S(*),S(*),S(*)                                     06890000
           DC   S(*),S(*),S(*),S(*)                                     06900000
           DC   S(*),S(*),S(*),S(*)                                     06910000
           DC   S(*),S(*),S(*),S(*)                                     06920000
           DC   S(*),S(*),S(*),S(*)                                     06930000
           DC   S(*),S(*),S(*),S(*)                                     06940000
           DC   S(*),S(*),S(*),S(*)                                     06950000
           JOLSAVE CSECT=UJC04IF                                        06960000
           TITLE 'UJC04IF:-HANDLE IF STATEMENT'                         06970000
* THIS MODULE RECIEVES CONTROL WHEN AN'IF'STATEMENT HAS BEEN FOUND      06980000
*    IN THE PRE-PROCESSED TEXT.                                         06990000
* IT'S DUTIES ARE CONSIDERABLY EASIER THAN THE PRE-PROCESSORS 'IF'.     07000000
*    UJC04IF MUST VALIDATE THE 'IF' AND SET UP A 'STEP-NAME' IN'COND'   07010000
* WHICH IS THE NAME OF THE STEP WHICH CONTAINS A VALUE OF 0 | 1 IF      07020000
* THE STATEMENT WAS DETERMINED TO BE TRUE OR NOT.                       07030000
*    THE ACTUAL IF STATEMENT IS WRITTEN OUT TO THE CONTROL PDS TO BE    07040000
* DETERMINED AT EXECUTE TIME.                                           07050000
* HOWEVER:-SEE THE PLM TO SEE HOW ALL THIS WORKS.                       07060000
           SPACE 3                                                      07070000
***** NOTE **** ALTHOUGH THIS IMPLEMENTION WILL ALLOW RETURN CODES      07080000
*    TO BE TESTED,COMPARED ETC,EXPRESSIONS ARE NOT YET ALLOWED          07090000
*****                                                                   07100000
**** THE FOLLOWING VETS ARE APPLIED TO THE 'IF' STATEMENT,BUT NOT       07110000
*    NECESSARILY IN THIS ORDER.                                         07120000
           SPACE                                                        07130000
*    1.    ALL ARITHMETIC AND CONCATENATION SYMBOLS ARE ILLEGAL         07140000
*          THESE ARE +,-,/,*,||.                                        07150000
*    2.    LITERAL STRING,IF 'STRING' ARE ILLEGAL.                      07160000
*    3.    THERE MUST BE AN EQUAL NUMBER OF LEFT '(' & RIGHT ')'        07170000
*          BRACKETS.                                                    07180000
*    4.    FOLLOWING A '(' THERE CAN ONLY BE                            07190000
*              A) '('                                                   07200000
*              B) <IDENTIFIER>                                          07210000
*              C) <NUMBER>                                              07220000
*    5.    FOLLOWING A ')' THERE CAN ONLY BE                            07230000
*              A) ')'                                                   07240000
*              B) '&'                                                   07250000
*              C) '|'  D)'' (NULL STRING)                               07260000
*    6.    AFTER THE FIRST TOKEN IN A SUB-EXPRESSION THERE CAN ONLY BE  07270000
*              A) ')'                                                   07280000
*              B) '&'                                                   07290000
*              C) '|'                                                   07300000
*                                                                       07310000
*          A SUB-EXPRESSION IS TAKEN TO BE THE FIRST<NUMBER> | .        07320000
*              <IDENTIFIER> AFTER:-                                     07330000
*              A) '('                                                   07340000
*              B) '|'                                                   07350000
*              C) '&'                                                   07360000
           SPACE 3                                                      07370000
* NOW BECAUSE OF COMPEXITY OF THESE VETS,THEY ARE BROKEN DOWN INTO      07380000
*    VERY SIMPLE STEPS.                                                 07390000
           SPACE                                                        07400000
* FIRST OF ALL I AM GOING TO MERELY CHECK POINTS 1,2 AND 3 ABOVE        07410000
           SPACE                                                        07420000
           XC  #WORK,#WORK                                              07430000
*          LA  R1,WORK                                                  07440011
*          USING  WORK,R1                                               07450011
*          CLEAR WORK                                                   07460017
*          DROP  R1                                                     07470011
           MVC ILENGTH,=AL2(IBODY) SET UP 'IF' ETC                75311 07480000
           MVC #WORK(IBODY+2),ILENGTH                                   07490000
           SPACE                                                        07500000
           SR  R10,R10                         '(' COUNTER              07510000
           SR  R9,R9                           ')' COUNTER              07520000
           SR  R8,R8                           ERROR INDICATOR          07530000
           LA  R7,2            SKIP THE 'IF'                            07540000
IFVT1GET   EQU  *                                                       07550000
           GETTKN REG=R7                                                07560000
           CLI TKNTYPE,0                       NUMERIC ?                07570000
           BE  IFVT1NUM                         YEP->TEST >4095         07580000
           CLI TKNTYPE,3                       LITERAL STRING ?         07590000
*                                               NO->SEE IF <IDENTIFIER> 07600000
           BNE IFVT1IDT                                                 07610000
           LA  R8,1                            SET ERROR INDICATOR ON.  07620000
         JOLERR 301,'INVALID SYMBOL ''',#TKN,''' IGNORED'               07630000
           B   IFVT1LUP                                                 07640000
IFVT1IDT   EQU *                                                        07650000
           CLI TKNTYPE,2                       <IDENTIFIER> ?           07660000
           BNE IFVT1SPC                         -> DEAL WITH SPEC CHAR  07670000
* HERE IT IS AN IDENTIFIER,MUST SEE THAT IT EXISTS.                     07680000
           CLC =C'ANY ',TKN                                             07690000
           BE  IFVT1LUP                                                 07700000
           CLC =C'ALL ',TKN                                             07710000
           BE  IFVT1LUP                                                 07720000
           CLC =C'ERROR ',TKN                                           07730000
           BE  IFVT1LUP                                                 07740000
         CLC   =C'MAXCC ',TKN                                     75128 07750000
         BE    IFVT1LUP                                           75128 07760000
         CLC   =C'LASTCC ',TKN                                    75128 07770000
         BE    IFVT1LUP                                           75128 07780000
          $CALL UJS17FID,TKN                                      74303 07790000
           LTR R15,R15                                                  07800000
           BZ  IFVT1GOT                                                 07810000
         JOLERR 302,'TEST FOR ''',#TKN,''' IMPOSSIBLE:-NOT DECLARED'    07820000
           LA  R8,1                            SET ERROR INDICATOR      07830000
           B   IFVT1LUP                        GO TO BCT.               07840000
           SPACE                                                        07850000
IFVT1GOT   EQU *                                                        07860000
           USING  IDTABLE,R1                                            07870000
* NOW SEE IF IT IS A STEP-NAME OR SOMETHING ELSE DISARTROUS.            07880000
           TM  IDTYPE,X'03'    PROGRAM OR MACRO TYPE?             75128 07890000
           BO   IFERR15       BOTH ON=DSID TYPE                         07900000
           BZ    IFERR15       NONE ON IS SOMETHING ELSE                07910000
* SEE IF OUTPUT YET                                                     07920000
           CLI IDUSED,0        USED YET?                                07930000
           BNE IFIDENT1                                                 07940000
         JOLERR 216,'STEP ''',#TKN,''' NOT EXECUTED:-TEST MARKED FALSE' 07950000
           B  IFVT1LUP                                                  07960000
IFERR15    EQU  *                                                       07970000
         JOLERR 315,'TEST FOR ''',#TKN,''' INVALID AS ''',#TKN,''' IS N*07980000
               OT A PROGRAM OR MACRO NAME'                              07990000
           B  IFVT1LUP                                                  08000000
IFVT1NUM   TNUM #TKN                                                    08010000
           SPACE 3                                                      08020000
* NUMBER FOUND,SEE IF >4095                                             08030000
           LTR R15,R15                                                  08040000
         BNZ   IFNUMER1                                           75128 08050000
           CH  R1,=H'4095'                                        75128 08060000
           BH  IFNUMER1                                                 08070000
           B  IFVT1LUP                                                  08080000
IFNUMER1 JOLERR 403,'NUMBER ',#TKN,' IS GREATER THAN 4095:- NO PROGRAM *08090000
               CAN ISSUE A RETURN CODE > 4095'                          08100000
           B   IFVT1LUP                                                 08110000
           SPACE 3                                                      08120000
IFIDENT1   EQU *                                                        08130000
           LH  R15,#TKN                                                 08140000
           LR  R14,R15                                                  08150000
         LA   R15,TKN(R15)    POINT TO SPOT AFTER TKN END         75128 08160000
           MVC 0(4,R15),IDSTMT                                          08170000
           OC 0(4,R15),=C'0000'                                         08180000
           LA  R14,4(R14)                                               08190000
           STH R14,#TKN                                                 08200000
           B   IFVT1LUP                                                 08210000
IFVT1SPC   EQU *                                                        08220000
* NOW A SPECIAL CHARACTER HAS BEEN FOUND.                               08230000
*    THE SIMPLEST THING TO DO IS TO LOOK FOR ONLY THE VALID             08240000
*    SPECIALS ,IE &,|,(,) AND SIMPLY FLAG THE REST AS ERRORS.           08250000
           CLI TKN,C'('                                                 08260000
           BE  IFLEFT1                         ADD1 TO REGISTER         08270000
           CLI TKN,C')'                                                 08280000
           BE  IFRITE1                                                  08290000
           CLI TKN,C'&&'                                                08300000
           BE  IFVT1LUP                         OK                      08310000
           CLI TKN,C'|'                                                 08320000
           BE  IFVT1LUP                                                 08330000
           CLI TKN,C'='                                                 08340000
           BE IFVT1LUP                                                  08350000
           CLI TKN,C'^'                                                 08360000
           BE IFVT1LUP                                                  08370000
           CLI TKN,C'<'                                                 08380000
           BE IFVT1LUP                                                  08390000
           CLI TKN,C'>'                                                 08400000
           BE IFVT1LUP                                                  08410000
         JOLERR 304,'INVALID SPECIAL SYMBOL ''',#TKN,''' IGNORED'       08420000
           LA  R8,1                            ERROR INDICATOR.         08430000
* WHEW,I THINK THAT IS THE END OF THE FIRST 'IF' VET                    08440000
*  NOW JUST QUIETLY LOOP BACK AND GET THE NEXT TOKEN AND CHECK IT.      08450000
IFVT1LUP   EQU *                                                        08460000
* CONCATENATE STRING TO #WORK NOW                                       08470000
        BAL  R14,CONCAT                                                 08480000
        LTR  R15,R15          DID IT CONCAT?                      75128 08490000
          BZ  C04CONOK        NO,SO DO CONCATENATION                    08500000
         JOLERR 414,'IF TOO COMPLEX'                                    08510000
          B   IFRETN16        OUT                                       08520000
C04CONOK EQU  *                                                   75128 08530000
* NOW CHECK IF WE HAVE REACHED THE END OF THE INPUT STRING              08540000
          LA  R7,1(R7)    ADD 1 TO TOKEN POINTER                        08550000
          CH  R7,TKNNO    REACHED THE 'THEN' ?                          08560000
          BL  IFVT1GET    NO,GET NEXT SYMBOL OLD BEAN.                  08570000
           BE  IFVT1GET  **********                                     08580000
* RIGHT IF IT FELL THROUGH HERE,IT IS THE REAL END.                     08590000
           LTR R8,R8                           ANY ERRORS ?             08600000
           BZ  IFTESTBR                         NO,SO CARRY ON          08610000
         JOLERR 405,'IF STATEMENT DELETED'                              08620000
           JOLRETN RC=16                                                08630000
IFTESTBR   CR  R10,R9                          NUMBER '(' = #')'        08640000
           BE  IFVET2                           ALL LOOKS WELL          08650000
           BL  IFRITEER                                                 08660000
         JOLERR 406,'TOO MANY ''('''                                    08670000
           B   IFRETN16                                                 08680000
IFRITEER JOLERR 407,'TOO MANY '')'''                                    08690000
           B   IFRETN16                                                 08700000
IFLEFT1    LA  R10,1(R10)                                               08710000
           B   IFVT1LUP                                                 08720000
IFRITE1    LA  R9,1(R9)                                                 08730000
           B   IFVT1LUP                                                 08740000
IFRETN16   EQU  *                                                       08750000
           JOLRETN RC=16                                                08760000
           EJECT                                                        08770000
IFVET2     EQU *                                                        08780000
* NOW A FEW FUN AND GAMES WHILE WE FURTHER CHECK OUT THE VALIDITY OF    08790000
*    THE 'IF'. OH WELL..                                                08800007
* NOW THIS TIME WE HAVE TO WORK FORWARDS,SO A BXLE LOOP MUST BE         08810000
*    SET UP.                                                            08820000
           LA  R5,2                            START (SKIP IF)          08830000
           LA  R6,1                            INCREMENT                08840000
           LH  R7,TKNNO                        STOP(#OF TOKENS)         08850000
           LA  R7,1(R7)                                           75311 08860000
IF2LUP     EQU  *                                                       08870000
           GETTKN REG=R5                                                08880000
           CR  R1,R7                                              75311 08890000
           BNH TIFVT1RT                                           75311 08900000
IFINVEND JOLERR 408,'STATEMENT ENDS PREMATURELY OR INCORRECTLY'         08910000
           B   IFRETN16                                                 08920000
TIFVT1RT   CLI TKN,C'('                                                 08930000
           BE  IFVT2RT                                                  08940000
           CLI TKN,C')'                                                 08950000
           BE  IFVT2LFT                                                 08960000
* WELL HERE IT MUST BE THE START OF A 'SUB-EXPRESSION'                  08970000
IFSUB      EQU *                                                        08980000
* NOW WE HAVE VETTED THE'IF'FAIRLY THOUGHLY BUT WE'LL CHECK IT A BIT    08990000
*    FURTHER (IF ERROR HERE IT IS AN INTERNAL ERROR).                   09000000
           CLI TKNTYPE,0                       <NUMBER> ?               09010000
           BE  IFSUB1OK                                                 09020000
           CLI TKNTYPE,2                       <IDENTIFIER>             09030000
           BE  IFSUB1OK                                                 09040000
         JOLERR 509,'''',#TKN,''''                                      09050000
           B   IFRETN16                                                 09060000
           SPACE                                                        09070000
IFSUB1OK   GETTKN REG=R1                       GET NEXT TOKEN           09080000
* THIS SHOULD BE '|' OR '&' | <OPERATOR>                                09090000
           LA  R9,=C'| && = < > ^=^<^><=>='                             09100000
           LA  R15,18(R9)                                               09110000
           LA  R14,2                                                    09120000
IFVT2SUB   EQU *                                                        09130000
           CLC TKN(2),0(R9)                                             09140000
           BE  IFSUB2OK                                                 09150000
           BXLE R9,R14,IFVT2SUB                                         09160000
           CR  R1,R7                                              75311 09170000
           BNL ENDIF2VT                                           75311 09180000
IFINVALS   EQU *                                                        09190000
         JOLERR 410,'INVALID SYNTAX AT/BEFORE ''',#TKN,''''             09200000
           B   IFRETN16                                                 09210000
IFSUB2OK   EQU *                                                        09220000
           CLI TKN,C'&&'                                                09230000
           BE  IFENDSUB                        END-SUB EXPRESSION       09240000
           CLI TKN,C'|'                                                 09250000
           BE  IFENDSUB                                                 09260000
* WELL NOW WE ARE LEFT WITH AN OPERATOR                                 09270000
*    THEREFORE THE NEXT TOKEN SHOULD BE A <NUMER> | <IDENTIFIER>        09280000
           GETTKN REG=R1                                                09290000
           STH R1,TKNCURR                                               09300000
           CR  R1,R7                                              75311 09310000
           BH  IFINVEND                                           75311 09320000
           CLI TKNTYPE,0                       <NUMBER>                 09330000
           BE  IFSUB3OK                                                 09340000
           CLI TKNTYPE,2                       <IDENTIFIER>             09350000
           BE  IFSUB3OK                                                 09360000
         JOLERR 411,'INVALID SYMBOL ''',#TKN,''' AFTER OPERATOR'        09370000
           B   IFRETN16                                                 09380000
IFSUB3OK   LR  R5,R1                           POINTER TO NEXT TOKEN    09390000
           GETTKN REG=R5                                                09400000
           CR  R1,R7                                              75311 09410000
           BNL ENDIF2VT                                           75311 09420000
           CLI TKN,C'&&'                       NEW CONNECTOR ?          09430000
           BE  IFSRTSUB                                                 09440000
           CLI TKN,C'|'                        NEW CONNECTOR ?          09450000
           BE  IFSRTSUB                                                 09460000
           CLI TKN,C'('                                                 09470000
           BE IFVT2RT                                                   09480000
           CLI TKN,C')'                                                 09490000
           BE IFVT2LFT                                                  09500000
           B   ENDIFVT2                        BXLE                     09510000
IFSRTSUB   GETTKN REG=R1                       GET NEXT TKN             09520000
           LR  R5,R1                                                    09530000
           B   IFSUB                           GO VET'SUB-EXPRESSION'   09540000
           SPACE 3                                                      09550000
IFENDSUB   EQU *                                                        09560000
* GUY CODED  IF  A &                                                    09570000
*    TOKEN CONTAINS &                                                   09580000
           GETTKN REG=R1                       GET NEXT TOKEN           09590000
           CR  R1,R7                                              75311 09600000
           BH  IFINVEND                                           75311 09610000
           LR  R5,R1                                                    09620000
           B   IFSUB                           VET 'SUB-EXPRESSION'     09630000
           SPACE 3                                                      09640000
IFVT2RT    EQU *                                                        09650000
* NOW WE HAVE FOUND A '('                                               09660000
           GETTKN REG=R1                                                09670000
           CLI TKN,C'('                                                 09680000
           BE  IFVT2RT                                                  09690000
           SPACE                                                        09700000
           CLI TKNTYPE,2                       <IDENTIFIER>             09710000
           BE  IFSUB                                                    09720000
           CLI TKNTYPE,0                       <NUMBER>                 09730000
           BE  IFSUB                                                    09740000
         JOLERR 412,'AFTER ''(''',#TKN,''' IS INVALID'                  09750000
           B   IFRETN16                                                 09760000
IFVT2LFT   EQU *                                                        09770000
         CNOP  0,8                                          FIX-X 76200 09780000
* WE HAVE FOUND A ')'                                                   09790000
           GETTKN REG=R1                                                09800000
           CR  R1,R7                                              75311 09810000
           BNL ENDIF2VT                                           75311 09820000
           CLI TKN,C')'                        ANOTHER ')'              09830000
           BE  IFVT2LFT                                                 09840000
           CLI TKN,C'&&'                                                09850000
           BE  IFENDSUB                                                 09860000
           CLI TKN,C'|'                                                 09870000
           BE  IFENDSUB                                                 09880000
         JOLERR 413,'AFTER '')''',#TKN,''' IS INVALID'                  09890000
           B   IFRETN16                                                 09900000
ENDIFVT2   EQU *                                                        09910000
           BXLE R5,R6,IF2LUP                                            09920000
* NOW WE HAVE NEARLY PERMORED ALL THE VETS.                             09930000
           SPACE 3                                                      09940000
* NOW THAT IS REALLY IT.                                                09950000
*    ALL WE HAVE TO DO IS WRITE THE STATEMENT OUT SOMEWHERE.            09960007
ENDIF2VT       EQU  *                                                   09970000
* NOW SET UP THE LENGTH OF THE ACTUAL 'IF' STRING                       09980000
*     BECAUSE ALTHOUGH #WORK CONTAINS A LENGTH THERE IS                 09990000
*     ANOTHER ONE IN THE MIDDLE OF THE STRING                           10000000
            LH R1,#WORK                                           75311 10010000
         LA    R1,2(R1)                                           88300 10020017
         STH   R1,#WORK       ADD COS #WORK IS A FEW BYTES SHORT  75311 10030000
           SH  R1,=AL2(IBODY+2)                                   88300 10040017
           STH R1,CALLAREA                                              10050000
           MVC #WORK+IBODY(2),CALLAREA                                  10060000
         OPINST #WORK                                                   10070000
           JOLRETN                                                      10080000
           DC   S(*),S(*),S(*),S(*)                                     10090000
           DC   S(*),S(*),S(*),S(*)                                     10100000
           DC   S(*),S(*),S(*),S(*)                                     10110000
           DC   S(*),S(*),S(*),S(*)                                     10120000
           DC   S(*),S(*),S(*),S(*)                                     10130000
           DC   S(*),S(*),S(*),S(*)                                     10140000
           DC   S(*),S(*),S(*),S(*)                                     10150000
           DC   S(*),S(*),S(*),S(*)                                     10160000
           DC   S(*),S(*),S(*),S(*)                                     10170000
           DC   S(*),S(*),S(*),S(*)                                     10180000
           DC   S(*),S(*),S(*),S(*)                                     10190000
           DC   S(*),S(*),S(*),S(*)                                     10200000
           DC   S(*),S(*),S(*),S(*)                                     10210000
           DC   S(*),S(*),S(*),S(*)                                     10220000
           DC   S(*),S(*),S(*),S(*)                                     10230000
           DC   S(*),S(*),S(*),S(*)                                     10240000
           DC   S(*),S(*),S(*),S(*)                                     10250000
           DC   S(*),S(*),S(*),S(*)                                     10260000
           DC   S(*),S(*),S(*),S(*)                                     10270000
           DC   S(*),S(*),S(*),S(*)                                     10280000
           LTORG                                                        10290000
           TITLE 'UJC10TYP:-HANDLE TYPE INSTRUCTION'                    13210000
           JOLSAVE CSECT=UJC10TYP                                       13220000
           ORG UJC10TYP                                                 13230000
UJC11DIS   EQU  *                                                       13240000
           ENTRY UJC11DIS,UJC23RTN                                      13250000
UJC23RTN   EQU *                                                        13260000
           ORG                                                          13270000
           GETTKN NO=2                         SEE IF 2ND TOKEN IS '('  13280000
           CLI TKN,C'('                                                 13290000
           BNE TYPMSSGE                        MUST BE THE MESSAGE      13300000
* HERE IT IS TYPE('MESSAGE')                                            13310000
           GETTKN NO=4                                                  13320000
           CLI TKN,C' '                        BLANK ?,SHOULD BE ')'    13330000
           BE  GET10TK3                        BUT IF NOT DON'T WORRY   13340000
           CLI TKN,C')'                                                 13350000
           BE  GET10TK3                                                 13360000
         JOLERR 201,'INVALID SYNTAX'                                    13370000
GET10TK3   GETTKN NO=3                         GET MESSAGE TEXT.        13380000
           B   SETUPTYP                                                 13390000
           SPACE 3                                                      13400000
TYPMSSGE   EQU *                                                        13410000
* THIS 'TYPE' HAS NOT GOT A '('.                                        13420000
           CLC TKNNO,=H'2'                                              13430000
         BNH   SETUPTYP                                           75128 13440000
         JOLERR 205,'INVALID SYNTAX'                                    13450000
           SPACE 3                                                      13460000
SETUPTYP   EQU *                                                        13470000
* NOW THE MESSAGE REQUIRED TO GO OUT SHOULD BE IN TKN                   13480000
           SPACE                                                        13490000
* TEST MESSAGE TEXT VALID.                                              13500000
           CLI TKN,C' '                        IS THERE AN OPERAND ?    13510000
         BE    TYPOPOK                                            75128 13520000
           CLI TKNTYPE,0                       NUMERIC OPERAND ?        13530000
           BE  TYPOPOK                          THAT'S OK               13540000
           CLI TKNTYPE,3                       LITERAL STRING OPERAND ? 13550000
           BE  TYPOPOK                          THAT'S OK TOO           13560000
           CLI TKNTYPE,2                       IDENTIFIER ?             13570000
*                                              BUT IT WILL DO           13580000
           BE  TYPOPNG                          THAT'S NOT TOO GOOD,    13590000
* HERE IT MUST BE A SPECIAL CHARACTER,AND THAT'S NO GOOD AT ALL         13600000
TYPERR03 JOLERR 303,'MESSAGE TEXT INVALID''',#TKN,''''                  13610000
           JOLRETN RC=16                                                13620000
           SPACE 3                                                      13630000
TYPOPNG  JOLERR 204,'MESSAGE TEXT SHOULD BE IN QUOTES'                  13640000
*              ED BY THIS IMPLEMENTATION'                               13650000
TYPOPOK    CLC #TKN,=H'100'                    LAST CHECK TO SEE THAT   13660000
*                                              THE MESSAGE LENGTH IS    13670000
*                                              NOT EXCESSIVE            13680000
           BL  MUVTYPMS                         OK->MOVE TYPE MESSAGE   13690000
         JOLERR 202,'MESSAGE TEXT TRUNCATED'                            13700000
           MVC #TKN,=H'100'                                             13710000
MUVTYPMS   MVC ITEXT,#TKN                                               13720000
           LA  R1,IBODY+2      LENGTH MESSAGE CONSTANTS+2               13730000
           AH  R1,#TKN                                                  13740000
           STH R1,ILENGTH                                               13750000
         OPINST INST                                                    13760000
           JOLRETN                                                      13770000
           DC  S(*,*,*,*)                                         74303 13780000
           DC  S(*,*,*,*)                                         74303 13790000
           DC  S(*,*,*,*)                                         74303 13800000
           DC  S(*,*,*,*)                                         74303 13810000
           TITLE 'HANDLE SIGNAL(ERROR)COMMAND'                          13820000
           JOLSAVE CSECT=UJC12SIG                                       13830000
* THIS CSECT HANDLES THE SIGNAL ERROR COMMAND                           13840000
           SPACE 3                                                      13850000
* THE FORMAT OF THE SIGNAL IS:-                                         13860000
*    SIGNAL ERROR SEVERITY,'MESSAGE'                                    13870000
* OR SIGNAL ERROR(SEVERITY,'MESSAGE')                                   13880000
           LA  R5,2                            START AT 2ND TOKEN       13890000
           GETTKN REG=R5                       GET THE'ERROR'           13900000
           CLC =C'ERROR ',TKN                   ERROR ?                 13910000
           BNE SIG01                           NO-DON'T WORRY           13920000
           LR  R5,R1                           YES,PREPARE TO GET NEXT  13930000
*                                              TOKEN.                   13940000
SIG01      GETTKN REG=R5                                                13950000
           CLI TKN,C'('                         '(' ?                   13960000
           BNE SIG02                           NO-DON'T WORRY           13970000
           LR  R5,R1                                                    13980000
SIG02      GETTKN REG=R5                       GET SEVERITY CODE        13990000
           CLI TKNTYPE,0                       TOKEN NUMERIC ?          14000000
           BNE SIGERR01                                                 14010000
           CLC #TKN,=H'1'                      LENGTH OF TOKEN 1 BYTE ? 14020000
           BNE SIGERR01                                                 14030000
           CLI TKN,C'4'                        <4                       14040000
           BH  SIGERR01                                                 14050000
           IC  R6,TKN                          SAVE 1 BYTE SEVERITY     14060000
*                                              CODE                     14070000
           GETTKN REG=R1                       GET NEXT TOKEN,WHICH     14080000
*                                              SHOULD BE A COMMA        14090000
           CLI TKN,C','                                                 14100000
           BNE SIG03                                                    14110000
           LR  R5,R1                                                    14120000
SIG03      GETTKN REG=R5                       GET MESSAGE TEXT         14130000
           CLI TKN,C' '                        IS THERE ANY TEXT        14140000
           BE  SIGERR02                         ->NO                    14150000
           CLI TKNTYPE,0                       IS IT NUMERIC ?          14160000
           BE  SIGOK                            YEP                     14170000
           CLI TKNTYPE,3                       LITERAL ?                14180000
           BE  SIGOK                            YEP                     14190000
           CLI TKNTYPE,2                       IDENTIFIER ?             14200000
           BE  SIGWARN1                         YEP->ISSUE A WARNING    14210000
* MUST BE SPECIAL CHARACTER,SO I'LL FIX THE GUY.                        14220000
         JOLERR 201,'MESSAGE TEXT INVALID''',#TKN,''''                  14230000
C12BADSE   EQU  *                                                       14240000
           LA  R6,C'4'                                                  14250000
C12BADMS   EQU  *                                                       14260000
           MVC TKN(15),=C'ERROR SIGNALLED'                              14270000
           MVC #TKN,=H'15'                                              14280000
           B  MUVSIG                                                    14290000
SIGWARN1 JOLERR 102,'MESSAGE TEXT SHOULD BE IN QUOTES'                  14300000
*              BY THIS IMPLEMENTATION'                                  14310000
SIGOK      EQU *                                                        14320000
* NOW WE SHALL FIX UP THE MESSAGE TEXT,IF THIS TOKENS LENGTH < 60       14330000
           CLC #TKN,=H'98'                                              14340000
           BL  MUVSIG                                                   14350000
           MVC #TKN,=H'98'                                              14360000
         JOLERR 203,'MESSAGE TEXT TRUNCATED'                            14370000
MUVSIG     MVC ITEXT+4(L'ITEXT-4),TKN SHIFT IN ACTUAL MESSAGE           14380000
           STC R6,ITEXT+2             R6 CONTAINS SEVERITY CODE,        14390000
*                                              DID YOU REMEMBER ?       14400000
           MVI ITEXT+3,C','                                             14410000
           LH  R1,#TKN         LOAD CURRENT LENGTH OF MESSAGE           14420000
           LA  R1,2(R1)        ADD 2 COS WE PUT 'SEVERITY'+ A COMMA IN  14430000
           STH R1,DBL          STORE IN WORK LOCN FOR A SECOND          14440000
           MVC ITEXT(2),DBL    NOW IN LENGTH OF COMMAND TEXT            14450000
           LA  R1,IBODY+2                      LENGTH BODY OF RECORD    14460000
*                                              TOO BE WRITTEN OUT       14470000
           AH  R1,DBL          ADD LENGTH OF RECORD                     14480000
           STH R1,ILENGTH                                               14490000
         OPINST INST                                                    14500000
           JOLRETN                                                      14510000
SIGERR01 JOLERR 204,'INVALID SEVERITY, RANGE IS 1 TO 4'                 14520000
           B  C12BADSE                                                  14530000
SIGERR02 JOLERR 105,'NO MESSAGE TEXT PROVIDED'                          14540000
           B  C12BADMS                                                  14550000
         CNOP  0,8                                          FIX-X 76200 14560000
           DC  S(*),S(*),S(*),S(*)                                      14570000
           DC  S(*),S(*),S(*),S(*)                                      14580000
           DC  S(*),S(*),S(*),S(*)                                      14590000
           DC  S(*),S(*),S(*),S(*)                                      14600000
      LTORG                                                             14610000
           TITLE 'UJC13STP:-HANDLE STOP INSTRUCTION'                    14620000
UJC13AT    CSECT                                                76200   14630000
            USING *,R15                                                 14640000
           L   R15,=V(UJC13STP)                                   76200 14650000
           BR R15                                                 76200 14660000
         DROP R15                                                       14670000
           LTORG                                                  76200 14680000
           JOLSAVE CSECT=UJC13STP                                       14690000
* A STOP INSTRUCTION CAN BE:-                                           14700000
*    STOP                                                               14710000
* OR STOP 'MESSAGE'                                                     14720000
* OR STOP('MESSAGE')                                                    14730000
* OR STOP NUMBER                                                        14740000
* OR STOP(NUMBER)                                                       14750000
* OR STOP WHEN .....VARIOUS CONDITIONS                                  14760000
* OR STOP AT STEP                                        CHG30008 76200 14770000
           SPACE 3                                                      14780000
         CLC   ICOMMAND,=CL8'STOPAT'                      CHG3008 76200 14790000
         BE    C13AT                                      CHG3008 76200 14800000
* LET'S HAVE A LOOK AND SEE IF IT IS JUST STOP                          14810000
           GETTKN NO=2                         GET 2ND TOKEN            14820000
           CLI TKN,C' '                        BLANK ?                  14830000
           BE  JUSTSTOP                         ->YEAH,JUST STOP        14840000
           CLI TKN,C'('                        IS TOKEN A '('           14850000
           BE  STOPMSSB                         TIS A STOP WITH A MSSG  14860000
TESTSTPX   EQU *                                                        14870000
           CLI TKNTYPE,0                       STOP <NUMBER> ?          14880000
           BE  STOPMSSG                         YES GO FIX              14890000
           CLI TKNTYPE,3                       STOP <LITERAL> ?         14900000
           BE  STOPMSSG                         YES GO FIX              14910000
           CLI TKNTYPE,1                       SPECIAL CHAR ?           14920000
           BE  STOPERR3                        IF ITS NOT '(' I DON'T   14930000
*                                              WANT TO KNOW ABOUT ANY   14940000
*                                              OTHER SPECIALS THANKS    14950000
           SPACE 3                                                      14960000
* HERE THE TOKEN MUST BE AN IDENTIFIER,AND IT COULD BE A'WHEN','BEFORE' 14970000
*    OR 'AFTER' OR COULD BE SOME-ONE FORGOT TO PUT QUOTES AROUND        14980000
*    HIS MESSAGE                                                        14990000
           CLC =C'WHEN ',TKN                                            15000000
           BE  STOPWHEN                                                 15010000
         CLC   =C'AT ',TKN                               CHG30008 76200 15020000
         BE    C13AT                                     CHG30008 76200 15030000
         JOLERR 201,'MESSAGE TEXT SHOULD BE IN QUOTES'                  15040000
*              S IMPLEMENTATION'                                        15050000
STOPMSSG   CLC #TKN,=H'100'                                             15060000
           BL  MUVSTOPM                                                 15070000
         JOLERR 202,'MESSAGE TEXT TRUNCATED'                            15080000
           MVC #TKN,=H'100'                                             15090000
MUVSTOPM   MVC ITEXT,#TKN                                               15100000
           LA R1,IBODY+2                                                15110000
           AH  R1,#TKN                                                  15120000
           STH R1,ILENGTH                                               15130000
         OPINST INST                                                    15140000
           JOLRETN                                                      15150000
           SPACE 3                                                      15160000
STOPMSSB   EQU *                                                        15170000
* HERE THE TOKEN CONTAINS A '('                                         15180000
           GETTKN NO=3                                                  15190000
           B   TESTSTPX                                                 15200000
           SPACE 3                                                      15210000
STOPERR3 JOLERR 303,'SYMBOL ''',#TKN,''' INVALID'                       15220000
STOPRT16   JOLRETN RC=16                                                15230000
           SPACE 3                                                      15240000
STOPWHEN   EQU *                                                        15250000
         MVC   #WORK(2),=H'10'     SET=0                 JOL30007 76200 15260000
         MVC   WORK(10),=CL10'(4000,EQ),'                               15270000
         IFVALUE NEST,C13ERR5                            JOL30007 76200 15280000
         GETTKN 3                                        JOL30007 76200 15290000
         CLI   TKN,C' '                                  JOL30007 76200 15300000
         BNE   C13GO1                                    JOL30007 76200 15310000
         JOLERR 306,'INVALID STOP WHEN'                  JOL30007 76200 15320000
         JOLRETN RC=0                                    JOL30007 76200 15330000
C13GO1   CLC   =C'ANY ',TKN   ANY ?                      JOL30007 76200 15340000
         BNE   C13ATER7       NO -> ERROR                JOL30007 76200 15350000
         GETTKN (R1)          SHOULD BE AN OPERATOR      JOL30007 76200 15360000
         LM    R5,R7,C13OPCON                            JOL30007 76200 15370000
         CLC   TKN(2),0(R5)                              JOL30007 76200 15380000
         BE    C13GOTOP                                  JOL30007 76200 15390000
         BXLE  R5,R6,*-10                                JOL30007 76200 15400000
         JOLERR 307,'INVALID OPERATOR ''',#TKN,''':-STOP IGNORED'       15410000
         JOLRETN RC=16                                   JOL30007 76200 15420000
C13GOTOP MVI   TKN,C'('       OPEN                       JOL30007 76200 15430000
         MVI   #TKN+1,1                                  JOL30007 76200 15440000
         BAL   R14,CONCAT                                JOL30007 76200 15450000
         GETTKN (R1)          GET NUMBER                 JOL30007 76200 15460000
         CLI   TKNTYPE,0      NUMERIC ?                  JOL30007 76200 15470000
         BE    C13NUM1                                   JOL30007 76200 15480000
         JOLERR 308,'NUMBER EXPECTED NOT ''',#TKN,''''   JOL30007 76200 15490000
         JOLRETN RC=16                                   JOL30007 76200 15500000
C13NUM1  CLI   #TKN+1,4       DONT USE TNUM-> DESTROYS R1JOL30007 76200 15510000
         BH    C13ERR9        >4 DIGITS                  JOL30007 76200 15520000
         BL    C13NUMOK       <4 DIGITS,OK               JOL30007 76200 15530000
         CLC   =C'4095',TKN                              JOL30007 76200 15540000
         BL    C13ERR9        NUMBER TOO BIG             JOL30007 76200 15550000
C13NUMOK BAL   R14,CONCAT     CONCAT NUMBER IN           JOL30007 76200 15560000
         MVI   #TKN+1,4       SET TKN LENGTH TO 4        JOL30007 76200 15570000
         MVI   TKN,C','       PUT IN A COMMA             JOL30007 76200 15580000
         MVC   TKN+1(2),2(R5)   SHIFT OS OPERATOR                 76200 15590000
         MVI   TKN+3,C')'       PUT IN LAST ')'                   76200 15600000
         BAL   R14,CONCAT     CONCATENATE IT             JOL30007 76200 15610000
         GETTKN (1)           SEE IF END, OR MORE        JOL30007 76200 15620000
         CLI   TKN,C' '       END ?                      JOL30007 76200 15630000
         BE    C13ENDWH       YES                        JOL30007 76200 15640000
         CLI   TKN,C'|'       CONNECTOR ?                JOL30007 76200 15650000
         BNE   C13ERR10       NO, ERROR                  JOL30007 76200 15660000
         MVI   TKN,C','                                  JOL30007 76200 15670000
         BAL   R14,CONCAT     CONCATENATE CONNECTOR      JOL30007 76200 15680000
         GETTKN (R1)                                     JOL30007 76200 15690000
         B     C13GO1         ROUND LOOP                 JOL30007 76200 15700000
C13ATER7 JOLERR 311,'EXPECTED ''ANY'':-FOUND ''',        JOL30007 76200*15710000
               #TKN,''''                                 JOL30007 76200 15720000
         JOLRETN RC=16                                   JOL30007 76200 15730000
C13ERR9  JOLERR 309,'MAX NUMBER ALLOWED 4095,FOUND ',    JOL30007 76200*15740000
               #TKN                                      JOL30007 76200 15750000
         JOLRETN RC=16                                   JOL30007 76200 15760000
C13ERR5  JOLERR 305,'STOP WHEN CANNOT BE EXECUTED IN ',  JOL30007 76200*15770000
               'A DO GROUP OR AFTER AN IF'               JOL30007 76200 15780000
C13ENDWH L     R5,AJOBDETS                                              15790018
         USING JOBDETS,R5                                               15800018
         IFDYNAM C13SAVEW   DYNAMIC ALLOCATION ? SAVE TKNSTRNG    86290 15801007
         IFTSO   C13SAVEW   DYNAMIC ALLOCATION ? SAVE TKNSTRNG    86290 15802018
         IFOS  =X8,C13SAVEW                                       J40B  15803018
         JOLSTOR 'JOB CONDITION CODES',JOBCOND,#WORK     JOL30007 76200 15810000
         JOLRETN RC=0                                    JOL30007 76200 15820000
C13SAVEW DS     0H                                                      15820107
         JOLSTOR 'JOB CONDITION CODES',JOBCOND,#TKNSTRG           86200 15821007
         JOLRETN RC=0                                             86200 15822007
         DROP   R5                                                      15830018
STOPAFT  EQU   *                                                        15840018
STOPBEF  EQU   *                                                        15850018
         JOLERR 404,'STOP ',#TKN,' NOT YET IMPLEMENTED'                 15860018
         B     STOPRT16                        RETURN 16                15870018
C13AT    EQU   *                                          CHG3008 76200 15880000
         GETTKN 1                                        JOL30008 76200 15890000
         CLC   =C'STOPAT ',TKN                           JOL30008 76200 15900000
         BE    C13TKN2                                   JOL30008 76200 15910000
         GETTKN 3                                        JOL30008 76200 15920000
         B     C13STPAT                                  JOL30008 76200 15930000
C13TKN2  GETTKN 2                                        JOL30008 76200 15940000
C13STPAT JOLSTOR 'STOP AT LABEL',STOPAT,#TKN             JOL30008 76200 15950000
         JOLRETN RC=0                                   JOL30008 76200  15960000
C13ERR10    JOLERR 310,'EXPECTED ''|'':-FOUND',                   76200*15970000
               #TKN                                                     15980000
        JOLRETN RC=16                                                   15990000
           SPACE 3                                                      16000000
JUSTSTOP   MVC TKN(22),=C'STOP EXECUTED AT STMT '                       16010000
           MVC TKN+22(4),STMT                                           16020000
           MVC #TKN,=H'26'                                              16030000
           B   STOPMSSG                                                 16040000
C13OPCON DC    A(*+12,4,C13CONE-4)                       JOL30007 76200 16050000
         DC    C'= EQ'                                   JOL30007 76200 16060000
         DC    C'^=NE'                                   JOL30007 76200 16070000
         DC    C'> LT'                                   JOL30007 76200 16080000
         DC    C'< GT'                                   JOL30007 76200 16090000
         DC    C'^>GE'                                   JOL30007 76200 16100000
         DC    C'^<LE'                                   JOL30007 76200 16110000
         DC    C'>=LE'                                   JOL30007 76200 16120000
         DC    C'<=GE'                                   JOL30007 76200 16130000
C13CONE  EQU   *                                         JOL30007 76200 16140000
         CNOP  0,8                                       JOL30007 76200 16150000
           DC  S(*,*,*,*)                                         74303 16160000
           DC  S(*,*,*,*)                                         74303 16170000
           DC  S(*,*,*,*)                                         74303 16180000
           DC  S(*,*,*,*)                                         74303 16190000
         DC    S(*,*,*,*,*,*,*,*,*,*,*,*)                   FIX-X 76200 16200000
         DC    S(*,*,*,*,*,*,*,*,*,*,*,*)                   FIX-X 76200 16210000
         DC    S(*,*,*,*,*,*,*,*,*,*,*,*)                   FIX-X 76200 16220000
          LTORG                                                         16230000
           TITLE 'PERFORM RUN INSTRUCTION'                              16240000
C24SAVE    DSECT                                                  75311 16250000
           DS  18F                                                75311 16260000
C24ADD     DS  A               ADDRESS OF CURRENT DD (WE NEED     75311 16270000
*                              THIS WHEN EXAMINING FOR CONCAT-    75311 16280000
*                              ENATED VOLREFS)                    75311 16290000
C24CURRN   DS  A               CURRENT DD NUMBER WE ARE           75311 16300000
*                              EXAMINING                          75311 16310000
*                                                                 75311 16320000
C24AID   DS    A                                                        16330000
C24SAVEL   EQU (*-C24SAVE)                                        75311 16340000
           JOLSAVE CSECT=UJC24RUN,SIZE=C24SAVEL                   75311 16350000
           USING C24SAVE,R13                                      75311 16360000
           USING JOLCOM,R2                                              16370000
           USING TKNX,R3                                                16380000
* WE HAVE FOUND A RUN STATEMENT.                                        16390014
           GETTKN NO=2         GET THE PROGRAM NAME                     16410000
         $CALL UJS16PID,TKN   FIND WHERE THE DETAILS ARE          75128 16420000
           LTR R15,R15                                                  16430000
           BZ  C24GOTPM        GOT THE PROGRAMS DETAILS.                16440000
         JOLERR 401,'PROGRAM ''',#TKN,''' HAS NOT YET BEEN DEFINED'     16450000
C24RETNF   JOLRETN RC=16                                                16460000
C24GOTPM    EQU  *                                                      16470000
           USING IDTABLE,R1                                             16480000
           TM  IDTYPE,X'02'                                       75128 16490000
           BZ  C24IDOK                                            75311 16500000
C24NPROG JOLERR 402,'CANNOT RUN ''',#TKN,''':- IT IS NOT A PROGRAM'     16510000
           JOLRETN RC=16                                                16520000
C24IDOK    EQU  *                                                       16530000
* NOW WE MUST TRANSFER THE DETAILS TO AN AREA OF SO THAT THEY     75128 16540000
*  WON'T GET OVER-WRITTEN BY OTHER THINGS.                        75128 16550000
* FOR 3.0 THERE IS A SPECIAL AREA RESERVED FOR PROGRAM DECLARES   75128 16560000
* R0 CONTAINS THE ADDRESS OF WHERE THINGS ARE NOW.                75128 16570000
         LR    R9,R1          SAVE R1                    JOL30003 76200 16580000
         L     R1,APROGWRK    GET SPECIAL AREA ADDRESS            75128 16590000
         LR    R4,R1          SAVE IT                             75128 16600000
         BAL   R14,MOVEDATA   SHIFT PROGRAM DETAILS               75128 16610000
         LR    R1,R9          RESTORE R1                 JOL30003 76200 16620000
         SPACE 3                                                  75128 16630000
           MVI IDUSED,1                                                 16640000
           CLC =C'$$',LABEL                                             16650000
           BE C24NLABX                                                  16660000
           CLC LABEL,IDNAME                                             16670000
           BE C24NLABX                                                  16680000
          $CALL UJS17FID,LABEL                                    74303 16690000
            LTR R15,R15       DID WE FIND A NAME ALREADY          75049 16700000
            BNZ C24IDOK2      NOPE                                75049 16710000
            CLC IDLEVEL,LEVEL+1                                   75311 16720000
             BE  C24ERR8                                                16730000
            LR  R1,R0                                                   16740000
            B   C24IDOK2                                                16750000
C24ERR8  JOLERR 308,'LABEL ''',LABEL,''' HAS ALREADY BEEN DEFINED:-IGNO*16760000
               RED'                                                     16770000
            B   C24CRTLB     IGNORE,IF USED, ERROR LATER         75049  16780000
C24IDOK2   MVI  IDTYPE,X'02'   MACRO NAME TYPE                    75128 16790000
           MVC IDLEVEL,LEVEL+1                                   75049  16800000
           MVC IDADDR,ZERO  STOP ABEND IF SOMEONE RUNS A LABEL   75049  16810000
           MVC IDSTMT,STMT                                              16820000
           MVI IDUSED,1                                                 16830000
           MVC IDNAME,LABEL                                             16840000
           LH R1,NOIDS                                                  16850000
           LA R1,1(R1)                                                  16860000
           STH R1,NOIDS                                                 16870000
           B   C24CRTLB                                                 16880000
C24NLABX   EQU  *                                                       16890000
           MVC LABEL,TKN                                          75311 16900000
           MVC IDSTMT,STMT                                              16910000
C24CRTLB   EQU  *                                                       16920000
*******************************************************************DASD 16930000
*  CHECK FOR A STARTAT STEP  AND IF IT DOES NOT MATCH THE ONE     *DASD 16940000
*  WERE PROCESSING CURRENTLY RETURN TO THE MAIN PHASE             *DASD 16950000
********************************************************02-25-78***DASD 16960000
          IFNULL  STARTAT,C24NOSAT                                 DASD 16970000
          B       C24SKIPR      JUST SKIP THIS RUN                 DASD 16980000
C24NOSAT  EQU    *                                                 DASD 16990000
           USING PGMDETS,R4                                             17000000
*                                                                 75311 17010000
* NOW WE HAVE TO SEE IF THE STEP NAME HAS ALREADY BEEN OUTPUT,    75311 17020000
*  AND IF SO WE WILL GENERATE A $$STMT TYPE STEP-NAME, OTHERWISE  75311 17030000
*  WE'LL USE THE ONE SPECIFIED                                    75311 17040000
           CLC NOSTEPS,MAXSTEPS HAVE WE ALREADY OUTPUT THE        75311 17050000
*                              MAXIMUM NUMBER OF STEPS THAT WE    75311 17060000
*                              WILL CHECK FOR DUPLICATES ?        75311 17070000
           BE  C24DUPST        YES, SAME AS DUPLICATE STEP THEN   75311 17080000
           LH  R15,NOSTEPS                                        75311 17090000
           L   R1,ASTEPTBL                                        75311 17100000
           SLL R15,3           *8                                 75311 17110000
           AR  R15,R1                                             75311 17120000
           LA  R14,8                                              75311 17130000
           CLC LABEL,0(R1)                                        75311 17140000
           BE  C24DUPST        MAKE DUPLICATE STEP                75311 17150000
           BXLE  R1,R14,*-10                                      75311 17160000
           MVC 0(8,R1),LABEL                                      75311 17170000
           LH  R1,NOSTEPS                                         75311 17180000
           LA  R1,1(R1)                                           75311 17190000
           STH R1,NOSTEPS                                         75311 17200000
           MVC PGMSTEP,LABEL                                      75311 17210000
           B   C24OPDOX                                           75311 17220000
C24DUPST   MVC PGMSTEP(2),=C'$$'                                  75311 17230000
           MVC PGMSTEP+2(4),STMT                                  75311 17240000
           OC  PGMSTEP+2(4),=C'0000'                              75311 17250000
C24OPDOX   EQU *                                                  75311 17260000
* NOW OUTPUT A 'DO' TO HELP THE LATER PHASE (AN IF COULD HAVE BEEN      17270000
*                              BEFORE THIS INSTRUCTION).                17280000
           MVC ILENGTH(2),=AL2(IBODY)                                   17290000
           MVC ICOMMAND,=CL8'DO'                                        17300000
           LH  R1,NEST                                                  17310000
           LA R1,1(R1)                                                  17320000
           STH R1,NEST                                                  17330000
           STC R1,INEST                                                 17340000
         OPINST ILENGTH                                                 17350000
           CLC LABEL,BLANKS                                             17360000
           BNE C24LABOK                                                 17370000
           MVC LABEL,PGMID     MOVE IN DECLARE NAME                     17380000
C24LABOK   MVC PGMLABEL,LABEL                                           17390000
* NOW OUTPUT PGM DETAILS.                                               17400000
           MVC #PGMDETS,=AL2(PGMLEN)                                    17410000
           MVC PGMESTMT,STMT                                            17420000
           OC  PGMESTMT,=C'0000'                                        17430000
         OPINST #PGMDETS                                                17440000
C24TPARM   EQU *                                                        17450000
* NOW FIX UP PARM FIELD INFO                                            17460000
* CODE FOR LONG PARM TO GO IN LABELLED AS J60.        CLEM CLARKE 10330 17461035
*                                                    NOV 26, 2010   J60 17462035
* IF || CODED AFTER 1ST FIELD, OUTPUT MANY PARM RECS.NOV 26, 2010   J60 17463035
           CLC TKNNO,=H'3'     IS THERE A PARAMETER ?                   17470000
           BL  C24NOPM         NO                                       17480000
           GETTKN NO=3                                                  17490000
           CLC =C'PARM ',TKN                                            17500000
           BNE C24TBRA         TEST IF A BRACKET                        17510000
           GETTKN REG=R1       GET NEXT TOKEN                           17520000
           CLI TKN,C' '        ANYTHING AFTER PARM?                     17530000
           BE  C24ISPRM        NO,SET TKN='PARM' AND USE IT AS THE      17540000
*                              PARAMETER                                17550000
C24TBRA    CLI TKN,C'('                                                 17560000
           BNE C24TEQU         TEST IF 'EQUAL' SIGN                     17570000
           GETTKN REG=R1       SKIP BRACKET                             17580000
           CLI TKN,C')'        CLOSING BRACKET,I.E NO PARM              17590000
           BNE C24USETN        NO,USE WHAT'S IN TKN                     17600000
           B   C24NOPRM        WASN'T A PARM                            17610000
C24TEQU    CLI TKN,C'='                                                 17620000
           BNE C24USETN        NO,SO USE WHATS IN TOKEN NOW             17630000
           GETTKN (1)                                                   17640000
           B   C24USETN                                                 17650000
           SPACE                                                        17660000
C24ISPRM   MVI #TKN+1,4                                           74303 17670000
           MVC TKN(4),=C'PARM'                                    74303 17680000
*                                                                 74303 17690000
* IF || CODED AFTER 1ST FIELD, OUTPUT MANY PARM RECS.NOV 26, 2010   J60 17691035
C24USETN   EQU *                                                        17700000
           STH R1,TKNCURR                                         74303 17710000
           MVC ICOMMAND,=CL8'PARM '                                     17720000
           MVC ISTMT,STMT                                               17730000
           MVC ILABEL,LABEL                                             17740000
         $CALL UJS98QU,#TKN   DROP DOUBLE QUOTES,SET L'TKN  FIX-X 76200 17750000
           LA  R1,IBODY                                                 17760000
           LA R1,2(R1)                                                  17770000
           AH  R1,#TKN                                                  17780000
           STH  R1,INST                                                 17790000
           MVC ITEXT,#TKN                                               17800000
         OPINST INST                                                    17800135
           GETTKN TKNCURR      GET TOKEN AFTER PARM                 J60 17801035
           CLC  =C'||',TKN                                          J60 17802035
           BNE  C24GETEN       END OF PARMS                         J60 17803035
* NOW LOOP AROUND OUTPUTING MULTIPLE PARM RECORDS UNTIL END OF PARM J60 17804035
           GETTKN (R1)         GET NEXT BIT OF PARM                 J60 17805035
           B    C24USETN       STORE R1 AND OUTPUT NEXT BIT OF PARM J60 17807035
C24GETEN   GETTKN TKNCURR      GET TOKEN AFTER PARM               74303 17820000
           CLI TKN,C' '                                           74303 17830000
           BE  C24POK09                                           74303 17840000
           CLI TKN,C')'                                           74303 17850000
           STH R1,TKNCURR                                         74303 17860000
           BE  C24GETEN                                           74303 17870000
         JOLERR 307,'EXCESS INFORMATION STARTING ''',#TKN,''' IGNORED'  17880000
C24POK09   EQU *                                                  74303 17890000
C24NOPRM   EQU *                                                        17900000
C24NOPM    EQU *                                                        17910000
* NOW WE ARE READY TO THINK SERIOUSLY ABOUT FIXING UP THE POOR          17920000
*    GENTLEMAN'S DD CARDS.                                              17930000
           SPACE 3                                                      17940000
*********************************************************************** 17950000
*                                                                       17960000
* THERE HAS BEEN AN ERROR IN THIS VERSION OF JOL EVER SINCE DAY 1 75311 17970000
*    OF THE ASSEMBLER RE-WRITE.                                   75311 17980000
* WHEN VOLREFS ARE USED IN CONCATENATED DATA SETS,JOL USED TO     75311 17990000
*    GENERATE $$VRNNNN DD CARDS IN THE MIDDLE OF THE CONCATENATED 75311 18000000
*    DD-CARDS.                                                    75311 18010000
*                                                                 75311 18020000
* THIS WILL NOW BE CURED.                                         75311 18030000
*                                                                 75311 18040000
*    1. WE HAVE A DD-CARD READY TO CREATE FOR NEXT PHASE.         75311 18050000
*    2. SAVE ADDRESS OF THIS ENTRY OF PGMDETS DDNAME              75311 18060000
*    3. IS THIS A DSID ?                                          75311 18070000
*    4.    YES                                                    75311 18080000
*    5.    FIND THE DSID.                                         75311 18090000
*    6.    DOES IT CONTAIN A VREF ?                               75311 18100000
*    7.    YES                                                    75311 18110000
*    8.    POP OUT $$VR CARD                                      75311 18120000
*    9. IS NEXT A CONCATENATION ?                                 75311 18130000
*   10.    YES                                                    75311 18140000
*   11.    GO TO 3.                                               75311 18150000
*   12.    NO, PICK UP ORIGINAL START POINT (SAVED AT 2)          75311 18160000
*          AND OUTPUT REAL DDNAMES TILL NEXT HAS A REAL DDNAME    75311 18170000
*          (IE END OF CONCATENATION).                             75311 18180000
*          IF ANY DSIDS CONTAIN VREFS THIS TIME, BLANK OUT VOLUME 75311 18190000
*          AND THE GENERATE PHASE WILL FIX VREFS PROPERLY FOR US  75311 18200000
*                                                                 75311 18210000
*********************************************************************** 18220000
           LA  R9,TRANS                                                 18230000
           USING DDDSNDET,R9                                            18240000
         SPACE 3                                                        18250000
* NOW THE FOLLOWING IS A MAJOR CHANGE FROM EARLIER VERSIONS OF JOL75128 18260000
*                                                                 75128 18270000
* PREVIOUS VERSIONS USED TO BREAK ANY PROGRAM DECLARE DETAILS     75128 18280000
*  INTO MANY SMALL BLOCKS CONTAINING INFORMATION ABOUT PROGRAMS   75128 18290000
*  AND DD DETAILS.                                                75128 18300000
* THIS ONE HAS THE PROGRAM DECLARE SET IN 1 BIG BLOCK, SO NOW     75128 18310000
*  WE ONLY HAVE TO STEP DOWN THE BLOCK PICKING UP DD DETAILS.     75128 18320000
* ALSO: A DSNAME MAY BE SPECIFIED AS WELL AS A DSID               75128 18330000
         SPACE 2                                                  75128 18340000
         LA    R5,PGMDD1                                          75128 18350000
         USING PGMDDOV,R5                                         75128 18360000
         SR    R7,R7          COUNTER OF NUMBER OF DDS WE HAVE    75128 18370000
*                             OUTPUT SO FAR                       75128 18380000
C24MAINL CH    R7,PGMNODDS    FINISHED OUTPUTTING DD'S (THERE MAY 75128 18390000
*                             BE NONE OF COURSE)                  75128 18400000
         BNL   C24RETN0       YES, POP OUT END                    75128 18410000
           SPACE 3                                                      18420000
* NOW CHECK FOR VOLUME REFERENCES.                                      18430000
           ST  R5,C24ADD       SAVE THE ADDRESS OF THE CURRENT DD 75311 18440000
           ST  R7,C24CURRN     SAVE CURRENT R7 TOO                75311 18450000
C24VTST1   TM  PGMUSE,B'00000100' DSID / DSNAME TYPE ENTRY ?      75311 18460000
           BZ  C24DSID1        DSID ENTRY                         75311 18470000
           LA  R5,9+52+8+8(R5)   STEP OVER DSNAME ENTRY           80290 18480000
C24VLUP1   LA  R7,1(R7)        ADD 1 TO NUMBER OF DDS             75311 18490000
           CH  R7,PGMNODDS                                        75311 18500000
           BNL C24VLUP2                                           75311 18510000
* CHECK IF NEXT ITEM A CONCATENATE | NOT                          75311 18520000
           CLI PGMDDNAM,C' '   BLANK DDNAME MEANS CONCATENATION   75311 18530000
           BNE C24VLUP2        NO, SO NOW OUTPUT REAL DD-CARDS    75311 18540000
           B   C24VTST1        YES, TEST FOR VOLREFS.             75311 18550000
           SPACE 3                                                75311 18560000
* NOW LETS TEST THE DSID TYPE                                     75311 18570000
C24DSID1   $CALL UJS17FID,PGMDSID  FIND THE DSID                  75311 18580000
           LTR R15,R15         DID WE FIND IT ?                   75311 18590000
           BNZ C24EVRF1        NO, SKIP TO NEXT ENTRY (DON'T      75311 18600000
*                              GIVE ERROR MESSAGES AS THEY WILL   75311 18610000
*                              BE DUPLICATED LATER THEN).         75311 18620000
           SPACE 1                                                75311 18630000
* NOW CHECK IF THIS DSID HAS A VREF                               75311 18640000
* NOTE *** TO SAVE READING DSID'S UNNECESSARILY FROM THE WORKFILE,75311 18650000
*    WE HAVE TURNED ON A BIT IN THE ID-TABLE IF THIS DSID         75311 18660000
*    CONTAINS A VOLREF.                                           75311 18670000
           USING IDTABLE,R1                                       75311 18680000
           TM  IDTYPE,B'00000111' DSID AND VREF ?                 75311 18690000
           BM  C24EVRF1        EITHER IS NOT A DSID, OR IS A DSID 75311 18700000
           BZ  C24EVRF1        BUT WITHOUT A VREF                 75311 18710000
           SPACE 3                                                75311 18720000
* NOW WE MUST ALSO SEE IF THIS HAS ALREADY BEEN USED, AND               18730000
* IF SO WE CAN IGNORE ALL THIS PROCESSING FOR VREFFED ITEMS.            18740000
         SPACE 1                                                        18750000
         CLI   IDUSED,1       USED YET?                            DASD 18760000
         BE    C24EVRF1       GOOD,IGNORE MUCH PROCESSING          DASD 18770000
         SPACE 1                                                        18780000
* HMM... FIX VREF ...                                             75311 18790000
*                                                                 75311 18800000
* THE USER COULD HAVE CODED SOMETHING LIKE A VREF WHICH ITSELF    75311 18810000
*    CONTAINS A VREF, OR THE VREF'D ITEM COULD EVEN CONTAIN       75311 18820000
*    A REAL VOLUME NAME.                                          75311 18830000
           SPACE 1                                                75311 18840000
* IF WE HAVE A VREF TO A VREF, WE HAVE TO OUTPUT ALL THE VREFS    75311 18850000
*    IN THE REVERSE ORDER.                                        75311 18860000
* ALSO, WE DONT WANT TO FOLLOW THE CHAIN TOO FAR COS IT IS        75311 18870000
*    BETTER TO REFER TO THE EARLIEST PART OF THE CHAIN POSSIBLE   75311 18880000
*    IN CASE SOMEONE REFERENCES THE 3RD LABEL AND WRITING LABEL   75311 18890000
*    4. IT IS BETTER TO HAVE THE JOB JCL OFF IF THE 3RD LABEL     75311 18900000
*    HASN'T BEEN WRITTEN, RATHER THAN WASTING TIME RUNNING UP     75311 18910000
*    THE TAPE.                                                    75311 18920000
*                                                                 75311 18930000
* AS MENTIONED EARLIER, WE HAVE TO FOLLOW THE CHAIN, SO WE HAVE   75311 18940000
*    TO BUILD ONE UP, AND WE'LL DO THIS IN #TKN, WHICH IS AN      75311 18950000
*    AREA THAT IS CURRENTLY UNUSED                                75311 18960000
           SPACE 2                                                75311 18970000
           $CALL UJS16GID,PGMDSID READ FIRST DSID INTO 'TRANS'    75311 18980000
           CLI  IDUSED,1      USED YET? YES GO AWAY                DASD 18990000
           BE   C24EVRF1                                           DASD 19000000
           MVC #TKNSTRG,ZERO                                      75311 19010000
C24VRLU9   CLI DDVOLUME,C'-'   VREF ?                             75311 19020000
           BNE C24VREFR        NO, MUST BE REAL VOL | ' ' (SCRATCH75311 19030000
*                              )                                  75311 19040000
           CLI DDVOLUME+1,C'''' VOLREF 'DSNAME' ?                 75311 19050000
           BNE C24VRDSI        NO, VREF TO DSID                   75311 19060000
* SO WE HAVE A VREF TO A DSNAME.                                  75311 19070000
*    CREATE A DUMMY DSID THEN                                     75311 19080000
           MVC TKN(L'DDVOLUME-1),DDVOLUME+1                       75311 19090000
           MVC #TKN,=AL2(L'DDVOLUME-1) SET LENGTH                 75311 19100000
           BAL R14,DRPBTKN     DROP BLANKS OFF END                75311 19110000
           $CALL UJS60DSN      EXAMINE NAME IN QUOTES AND         75311 19120000
*                              SPLIT INTO DSNAME AND GENERATION   75311 19130000
*                              NUMBERS                            75311 19140000
           MVC DDDSNAME,WORK                                      75311 19150000
           MVC DDMBR,WORK+100  SHIFT GDG IF ANY                   75311 19160000
           MVC DDPASSW,WORK+120                                   80290 19170000
           MVI DDTYPE,DDREALDS SET UP TYPE OF DSID                75311 19180000
         CLEAR DDVOLUME                                           75311 19190000
           CLI DDMBR,C' '      ANY MEMBER / GDG NUMBER ?          75311 19200000
           BE  C24VDSOK        NO                                 75311 19210000
           CLI DDMBR,C'('      GDG ?                              75311 19220000
           BNE C24VDSOK        NO, LEAVE TYPE SET AS IT IS THEN   75311 19230000
           MVI DDTYPE,DDGDGREL YES, SET RELATIVE BIT              75311 19240000
C24VDSOK   EQU *                                                  75311 19250000
           BAL R10,C24OPVR     OUTPUT TO NEXT PHASE               75311 19260000
C24EVRF1   LA  R5,25+8(R5)     STEP OVER DSID                   80290   19270000
           B   C24VLUP1        BACK FOR NEXT VREFD (?) ITEM       75311 19280000
           SPACE 3                                                75311 19290000
C24VREFR   EQU *                                                  75311 19300000
* HERE WE HAVE A REAL VOLUME, OR A REFERENCE TO A SCRATCH         75311 19310000
*                             OR CATALOGUED VOLUME                75311 19320000
*    VOLUME (IE END OF CHAIN)                                     75311 19330000
           CLI DDVOLUME,C' '   SCRATCH ?                          75311 19340000
           BE  C24VRSCR        YES                                75311 19350000
* HERE THE VREFD ITEM CONTAINS A REAL VOLUME                      75311 19360000
*                                                                 75311 19370000
* SO WE CAN REFERENCE THIS DSID AGAIN, AND NOT MUCK AROUND,       75311 19380000
*    WE SHALL COPY THE VOLUME INFO TO THE DSID AND RE-WRITE IT    75311 19390000
           MVC WORK(DDCATLGS-DDVOLUME),DDVOLUME                   75311 19400000
           $CALL UJS16GID,PGMDSID RE-READ ORIGINAL DSID           75311 19410000
           LR  R10,R1          SAVE ENTRY INTO TABLE OF THE       75311 19420000
*                              NAME                               75311 19430000
           MVC DDVOLUME(L'DDVOLUME),WORK        COPY REAL VOL     82300 19440001
           $CALL UJS15OP,(DDDSNDET)            OUTPUT TO WORKFILE 75311 19450000
           LR  R15,R1          SAVE TTR ADDRESS IT WENT OUT TO    75311 19460000
*                              ON THE FILE                        75311 19470000
           LR  R1,R10          RESET R1 TO POINT TO THE TABLE     75311 19480000
           ST  R15,IDADDR      RESET ADDRESS                      75311 19490000
           MVI IDTYPE,3        RESET TYPE (TURN OFF VREF INDIC    75311 19500000
*                              IN TABLE)                          75311 19510000
           B   C24EVRF1        GO TO END OF THIS DSID PROCESSING  75311 19520000
           SPACE 3                                                75311 19530000
C24VRDSI   EQU *                                                  75311 19540000
* HERE WE HAVE A VREF TO ANOTHER DSID.                            75311 19550000
           LH  R14,#TKNSTRG    GET LENGTH OF DSID STRING WE       75311 19560000
           LR  R15,R14         - ARE BUILDING                     75311 19570000
           LA  R14,TKNSTRG(R14)                                   75311 19580000
           MVC 0(8,R14),DDDSID SAVE DSID                          75311 19590000
* NOW WE MUST GET THE NEXT DSID IN THE CHAIN                      75311 19600000
           MVC #TKN,=H'8'      SET LENGTH TO 8 FOR ERR MESSAGES   75311 19610000
           MVC TKN(8),DDVOLUME+1 SHIFT REQD DSID                  75311 19620000
           $CALL UJS16GID,TKN  TRY TO LOAD ITS DETAILS NOW        75311 19630000
           LTR R15,R15         DID WE ?                           75311 19640000
           BZ  C24TVRTY                                           75311 19650000
           JOLERR 405,'CANNOT FIND VOLREF ''',#TKN,''''           75311 19660000
           B   C24EVRF1        IGNORE IT THEN.                    75311 19670000
C24TVRTY   EQU *                                                  75311 19680000
           TM  IDTYPE,X'03'    IS IT A DSID THEN ?                75311 19690000
           BO  C24TVRUS        YES, TEST IF IT HAS ALREADY BEEN   75311 19700000
*                              USED, COS IF SO WE CAN VREF BACK   75311 19710000
*                              TO ITS DSNAME                      75311 19720000
           JOLERR 406,'VOLREF ITEM ''',#TKN,''' IS NOT A DATASET' 75311 19730000
           B   C24EVRF1        SKIP THIS ITEM NOW                 75311 19740000
*******************************************************************DASD 19750000
*                                                                  DASD 19760000
* WHEN DOING A VOLREF TO A DSID THAT HAS BEEN CREATED IN A PRIOR   DASD 19770000
* STEP  THAT SEEMS TO BE OK....BUT WHEN THE JOB IS RESTARTED       DASD 19780000
* IN A STEP AFTER THE STEP WHERE ITS CREATED THE VOLREF            DASD 19790000
* DSID IS NEVER SET UP ....THIS FIX WILL CHECK THE RESTART BYTE    DASD 19800000
*                                                                  DASD 19810000
*******************************************************************DASD 19820000
C24TVRUS   CLI IDUSED,0        THIS ONE USED ?                    75311 19830000
           BE  C24VRLU9        NO, CONTINUE CHAIN AFTER CHECKING  75311 19840000
           CLI IDUSED,02      THIS ONE BYPASSED DUE TO RESTART ?   DASD 19850000
           BE  C24VRLU9       YES, CONTINUE CHAIN AFTER CHECKING   DASD 19860000
           SPACE 1                                                75311 19870000
* HERE WE HAVE A VREF TO A DSID THAT HAS BEEN USED. THIS IS AN    75311 19880000
*    EARLY END TO THE CHAIN WE HAVE BEEN BUILDING                 75311 19890000
           SPACE 1                                                75311 19900000
* NOW WE MUST OUTPUT THIS ONE, THEN CONTINUE UP THE CHAIN         75311 19910000
*    WE HAVE BEEN BUILDING                                        75311 19920000
* NOW CHECK IF THIS IS THE FIRST REFERENCE IN THE STRING                19930000
* SO WE DON'T OUTPUT UNNESSARY VOLREFS                                  19940000
         CLC   #TKNSTRG,ZERO                                      75311 19950000
*        BL    C24EVRF1            (WAS BE: FIXES VOLREFS CVC)    87150 19960017
         BE    C24EVRF1        IS BE AGAIN: FIXES VOLREFS CVC)    88150 19961017
         FIX   'LOOP'                                                   19970000
           BAL R10,C24OPVR     OUTPUT THIS DSID                   75311 19980000
           B   C24UNCHN        UNCHAIN NOW                        75311 19990000
           SPACE 3                                                75311 20000000
C24VRSCR   EQU *                                                  75311 20010000
* NOW WE FINISHED THE CHAIN BY FINDING A SCRATCH VOLUME.          75311 20020000
           FIX 'THIS LINE SHOULD OPERATE IF NOCAT IS SPECIFIED'         20030000
*                                                        JOL30007 82300 20040004
* CHECK IF NOCAT, AND ISSUE MESSAGE SAYING WILL BE CATLGDJOL30007 82300 20050004
* WHEN OUTPUT.                                           JOL30007 82300 20060004
         TM    PARMSRCH,X'01' NOCAT                      JOL30007 82300 20070004
*        BO    C24FORCE       YES,MESSAGE                JOL30007 82300 20080017
         BO    C24NMARK       DON'T MARK THE DATA SET    JOL30007 88300 20081017
         CLI   DDCATLGS,C' '  NOCAT ON DSID              JOL30007 82300 20090004
*        BNE   C24FORCE       YES, FORCE OUTPUT          JOL30007 82300 20100017
         BNE   C24NMARK       DON'T MARK THE DATA SET    JOL30007 88300 20101017
           B    C24FORCE                                                20110004
           B    C24FORCE                                                20120004
           B    C24FORCE                                                20130004
           B    C24FORCE                                                20140004
           B    C24FORCE                                                20150004
C24FORCE   MVI IDUSED,1        MARK IT USED                       75311 20160004
C24NMARK   BAL R10,C24OPVR     OUTPUT THE CURRENT DSID            75311 20170017
           SPACE 3                                                75311 20180000
C24UNCHN   EQU *                                                  75311 20190000
* THE DSID CHAIN IS IN '#TKNSTRG', AND THE 1ST ENTRY IN THERE     75311 20200000
*    IS THE REAL ONE (WHICH WE DON'T WANT TO OUTPUT YET)          75311 20210000
           LH  R15,#TKNSTRG                                       75311 20220000
           SH  R15,=H'8'       -8                                 75311 20230000
           BNP C24EVRF1        END THEN IF ^> 0                   75311 20240000
           STH R15,#TKNSTRG    RESET STRING LENGTH                75311 20250000
           LA  R15,TKNSTRG+8(R15)                                 75311 20260000
           MVC TKN(8),0(R15)                                      75311 20270000
           MVC #TKN,=H'8'                                         75311 20280000
           $CALL UJS16GID,TKN  GET IT                             75311 20290000
           MVI IDUSED,1        MARK IT USED                       75311 20300000
           BAL R10,C24OPVR     OUTPUT IT                          75311 20310000
           B   C24UNCHN        CONTINUE UNCHAINING                75311 20320000
           SPACE 3                                                75311 20330000
C24VLUP2   EQU *                                                  75311 20340000
           SPACE 1                                                75311 20350000
* AT THIS POINT, WE HAVE TERMINATED THE OUTPUT OF THE VREF        75311 20360000
*    ITEMS, AND ARE READY TO START OUTPUTTING THE REAL DD-CARDS   75311 20370000
           L   R5,C24ADD       GET ADDRESS OF THE ORIGINAL DSID   75311 20380000
           L   R7,C24CURRN     AND THE CURRENT DD NUMBER          75311 20390000
* OK, NOW DETERMINE IF THIS IS A DSID | A DSNAME                  75128 20400000
C24M2    TM    PGMUSE,B'00000100'                                 75128 20410000
         BZ    C24DSID                                            75128 20420000
* SO HERE WE HAVE A DSNAME TO CREATE AND OUTPUT                   75128 20430000
            CLEAR  TRANS                                                20440000
           LA  R0,DDSPACE-DDOSVB (OVERWRRITTEN ON NEXT LINE-VSAM) 86211 20450006
           LA  R0,DDLEN        USE LONG LENGTH ANYWAY FOR VSAM    86211 20451006
           TM  PGMUSE,B'11000000' NEW,MODS | REWRITES ?           75311 20460000
NOSHORT    BZ  *+8             NOPE, USE SHORT ENTRY              75311 20470014
          ORG  NOSHORT                                                  20471014
          B    *+8             USE  LONG ENTRY ALWAYS             87150 20472014
           LA  R0,DDLEN        YES, USE LONG ENTRY                75311 20480000
           STH R0,DDOSVB                                                20490000
           XC DDOSVB+2(2),DDOSVB+2                                      20500000
         CLEAR DDSPECTP,DDSPECT2,                                 80290*20510000
               DDCANCEL,DDLABEL,DDUNITNO,DDPRIM,DDSEC,DDDIRECT,   80290*20520000
               DDAEXTRA,                                          J50  *20521033
               DDBLKSZE,DDLRECL,DDSIZE,DDSIZE2,DDAVREC,DDBUFNO,   80290*20530000
               DDBUFL,DDRKP,DDKEYLEN,DDOVERFL,DDVOLSEQ,DDMAXVOL,  80290*20540000
               DDUNITQU,DDBUFNI,DDBUFND                                 20550001
           MVI DDDD1,C'D'                                               20560000
           MVC DDSTMT,STMT                                              20570000
           MVC DDLEVEL,LEVEL+1                                          20580000
         MVC   DDDDNAME,PGMDDNAM                                  75128 20590000
         MVI  DDTYPE,DDREALDS                                           20600000
         MVC   DDDSID(2),=C'$$'                                   75128 20610000
         MVC   DDDSID+2(4),STMT                                   75128 20620000
         OC    DDDSID+2(4),=C'0000'                               75128 20630000
         MVC   DDUSE(1),PGMUSE                                    75128 20640000
         MVC   DDDSNAME,PGMDSN                                    75311 20650000
         MVC   DDPASSW,PGMPASSW                                   80290 20660000
         MVC  DDMBR,PGMDSN+L'PGMDSN-8                             75311 20670000
         TM   DDUSE,1        UNITAFF                                    20680000
         BZ   C24NAF30                                                  20690000
         MVC  DDUNIT,PGMDSN+L'PGMDSN                                    20700000
C24NAF30 EQU  *                                                         20710000
         $CALL  UJC24DB,  (GET INFO FROM DATA BASE)               J50  .20711031
               DDDSNDET                                           J50   20712031
         OPINST DDOSVB                                                  20720000
* NOW POINT TO THE NEXT DD ENTRY                                  75128 20730000
           LA  R5,9+52+8+8(R5)   STEP OVER DSNAME ENTRY           80290 20740000
C24MAINZ LA    R7,1(R7)       ADD 1 TO THE NUMBER OF DDS WE       75128 20750000
*                             HAVE DONE                           75128 20760000
         CH    R7,PGMNODDS    REACHED END?                              20770000
         BNL   C24MAINL       YES,BACK TO MAIN LOOP               75311 20780000
         IFVALUE PGMDDNAM,C24MAINL NEXT NOT CONCATENATED          75311 20790000
* HERE A CONCATENATION.                                                 20800000
         B     C24M2                                              75311 20810000
         SPACE 2                                                  75311 20820000
C24DSID  EQU   *                                                  75128 20830000
          $CALL UJS17FID,PGMDSID                                  74303 20840000
           USING IDTABLE,R1                                             20850000
           LTR R15,R15                                                  20860000
           BNZ C24NOTFD                                                 20870000
           TM  IDTYPE,X'03'    IS IT A DATA-SET DECLARE ?         75128 20880000
           BO  C24TUSE1        YES                                75128 20890000
         JOLERR 404,'''',PGMDSID,''' IS NOT A DATA SET VARIABLE AND CAN*20900000
               NOT BE USED BY A PROGRAM'                                20910000
           B   C05NXTDD        SO GO AND GET THE NEXT ONE               20920000
C24TUSE1   EQU *                                                        20930000
           CLI IDUSED,0        HAS THIS ID BEEN OUTPUT TO THE NEXT      20940000
*                              PHASE YET ?                              20950000
*          BNE C24DDOUT        YES,SO MERELY POP OUT A CONDENSED        20960000
*                              VERSION OF IT.                           20970000
          $CALL UJS16GID,PGMDSID                                  74303 20980000
* GO LOAD INTO CORE.                                                    20990000
           LTR R15,R15                                                  21000000
           BNZ C24NOTFD                                                 21010000
         ST    R1,C24AID      SAVE ADDRESS IN TABLE                     21020000
         CLI   IDUSED,0       BEEN USED YET?                            21030000
         BNE   C24LUSE                                                  21040000
         TM    PGMUSE,B'11000000'    NEW OR MODS (NOT RE-WRITES TH0)200 21050000
         BZ    C24RD01                                                  21060000
         BO    C24RD01        REWRITES IF BOTH ON..               76200 21070000
         MVI   IDUSED,2       SET WRITE DATA SET                        21080000
         B     C24LUSE                                                  21090000
C24RD01    MVI IDUSED,1        MARK IT USED                             21100000
* CHECK IF VOLREF AND IF SO CLEAR THE VOLUME, UNIT ETC            75311 21110000
C24LUSE  CLI   DDVOLUME,C'-'   VOLREF ?                           75311 21120019
         BNE   C24NOTVR        NOPE                               75311 21130019
         CLI   DDVOLUME+1,C''''  DSNAME TYPE VOLREF?              75311 21140000
         BNE   C24FIX1        NO,SO GO AS WE ARE                        21150000
* NOW WE HAVE A VOLREF TO A 'DSNAME'                                    21160000
         CLEAR TKN            CLEAR IT BEFORE USE                       21170000
         MVC   #TKN,=AL2(L'DDVOLUME-1)                                  21180000
         MVC   TKN(L'DDVOLUME-1),DDVOLUME+1                             21190000
         BAL   R14,DRPBTKN    DROP BLANKS FROM END                      21200000
         BAL   R14,DROPQUOT    DROP QUOTES FROM NAME                    21210000
         MVI   DDVOLUME,C'*'   TELL LATER ROUTINE VREF HALF FIXED       21220000
         MVC   DDVOLUME+1(L'DDVOLUME-1),TKN SHIFT VREF                  21230000
C24NOTVR   EQU *                                                        21240000
C24FIX1    EQU  *                                                       21250000
           MVC DDDDNAME,PGMDDNAM                                        21260000
           MVC DDDISP(1),PGMUSE                                         21270000
*NOW WE MUST TEST FOR THE UNIT-AFFS AND FIX ACCORDINGLY                 21280000
*     IF A UNIT-REF WAS REQUIRED,THE PGMMBR WOULD CONTAIN THE           21290000
*     DDNAME TO BE USED FOR THE AFFINITY,AND THE BOTTOM BIT             21300000
*     OF THE 'PGMUSE' FIELD WOULD BE TURNED ON.                         21310000
* SO THAT THE GENERATE PHASE KNOWS THAT A UNITREF WAS INTENDED,WE       21320000
*     MERELY COPY THE PGMUSE FIELD,AND SET THE 'DDUNIT' FIELD           21330000
*     EQUAL TO THE 'PGMMBR' FIELD                                       21340000
           TM PGMUSE,1                                                  21350000
           BZ C24NOAFF                                                  21360000
           MVC DDUNIT,PGMMBR+8                                    75311 21370000
C24NOAFF   EQU *                                                        21380000
           $CALL UJS61DD,(DDDSNDET,PGMMBR)                        75311 21390000
* NOW WE DON'T WANT TO OUTPUT DCB INFORMATION IF THIS IS A GDG    75311 21400000
*    DSID USED AS AN 'INDEX', COS A (-1) MAY HAVE DIFFERENT       75311 21410000
*    DCB TO A (+1)                                                75311 21420000
           CLI PGMMBR,C'('     GDG PGM OVER-RIDE ?                75311 21430000
           BNE C24S61          CALL UJS61                         75311 21440000
           TM  PGMUSE,B'11000000' INPUT ?                         75311 21450000
           BM  C24S61          NOPE                               75311 21460000
*          MVC DDDCB(L'DDRECFM+L'DDBLKSZE+L'DDLRECL),BLANKS        DASD 21470000
C24S61     EQU *                                                  75311 21480000
C24NOMEM   EQU *                                                        21490000
* NOW TO CUT DOWN THE NUMBER OF BYTES OF MAIN STORAGE USED        75311 21500000
*  IN THE FINAL TABLE, WE WILL CUT DOWN THE SIZE OF THE RECORD    75311 21510000
*  WE ARE ABOUT TO OUTPUT IF THIS IS A READ DATA SET WITH NO      75311 21520000
*  DCB OR SPACE, MAXVOLS ETC.                                     75311 21530000
*************************************************************      DASD 21540000
*                                                           *      DASD 21550000
* MOD HERE TO NOT CLEAR OUT THE DCB---                      *      DASD 21560000
* WHOEVER CODED IT, LET THEM HAVE IT                        *      DASD 21570000
*                                                           *      DASD 21580000
*************************************************************      DASD 21590000
           TM  DDUSE,B'11000000' INPUT ?                          75311 21600000
           BM  C24NOTIN        NOPE                               75311 21610000
         BO    C24NOTIN (REWRITES IF BOTH ON)                     76200 21620000
         CLC   DDOSVB,=AL2(DDLEN)   DCB EXTRA CODED?                    21630000
         BH    C24NOTIN                                                 21640000
         B     C24NOTIN      *****++++++++ VSAM NEEDS LONG RECORDS86211 21641006
* OK, INPUT ONLY HERE                                             75311 21650000
         CLC   =CL8'SORTIN',DDDDNAME                                    21660000
         BE    C24NOTIN                                                 21670000
         CLC   =CL8'SORTOUT',DDDDNAME                                   21680000
         BE    C24NOTIN                                                 21690000
* HERE INPUT AND NOT SORTIN OR SORTOUT                                  21700000
         L     R1,C24AID    CHECK IF OUTPUT ALREADY IN THIS JOB         21710000
         CLI   IDUSED,2    OUTPUT IN THIS JOB?                          21720000
         BNE   C24CKDCB     NO,SEE IF WE CAN SHORTEN THE RECORD         21730000
         CLEAR DDPRIM,DDSEC,DDDIRECT  OUT-->DRECFM,DDBLKSZE,DDLRECLDASD 21740000
         CLEAR DDSIZE,DDSIZE2,DDAVREC,DDSIZEQ                           21750000
         CLEAR DDRETPD,DDEXPDT                                          21760000
C24CKDCB   NI  DDSPECT2,X'FF'-X'20' TURN OFF 'NODEF' BIT          75311 21770000
*        CLI   DDRECFM,C'%'     NODCB CODED??                      DASD 21780000
*        BNE   C24CKDCX                                            DASD 21790000
*        CLEAR DDRECFM,DDLRECL,DDBLKSZE                            DASD 21800000
C24CKDCX IFVALUE  DDPRIM,DDSEC,DDDIRECT,C24NOTIN                  80290 21810000
         IFVALUE  DDSPECTP,DDSPECT2,C24NOTIN                      80290 21820000
         IFVALUE  DDRECFM,DDLIMCT,DDOPTCD,DDDENS,DDDSORG,         80290*21830000
               DDEXPDT,DDCODE,DDFUNC,DDEXTRA,                     80290*21840000
               DDAEXTRA,                                          J50  *21841033
               DDCANCEL,DDLABEL,DDUNITNO,DDPRIM,DDSEC,DDDIRECT,   80290*21850000
               DDBLKSZE,DDLRECL,DDSIZE,DDSIZE2,DDAVREC,DDBUFNO,   80290*21860000
               DDBUFL,DDRKP,DDKEYLEN,DDOVERFL,DDVOLSEQ,DDMAXVOL,  80290*21870000
               DDUNITQU,DDBUFNI,DDBUFND,C24NOTIN                        21880001
           MVC DDOSVB,=AL2(DDSPACE-DDOSVB) SHORTEN RECORD         75311 21890000
C24NOTIN   EQU *                                                  75311 21900000
         $CALL  UJC24DB,  (GET INFO FROM DATA BASE)               J50  .21901030
               DDDSNDET                                           J50   21902030
         OPINST DDDSNDET                                                21910000
         $CALL  UJS16EXT,DDDSNDET CHECK IF EXTRA DATA SUCH AS     87150 21911012
*                              LONG VOLUME OR SUBSYS TO GO OUT    87150 21912012
C05NXTDD  EQU *                                                         21920000
           LA  R5,25+8(R5)     SKIP DD ENTRY                      75311 21930000
        B   C24MAINZ   TEST IF END                                75128 21940000
           SPACE 3                                                      21950000
C24DDOUT   EQU *                                                        21960000
* HERE,WE HAVE ALREADY OUTPUT THIS FORMATTED DD CARD AND IT IS NOT      21970000
*    NECESSARY TO LOAD IT FROM THE WORK FILE AND OUTPUT IT AGAIN        21980000
* HOWEVER,WE MUST OUTPUT A COMPRESSED ONE AND THE NEXT PHASE WILL       21990000
*    PATCH ALL THE REQUIRED INFORMATION UP FOR US.                      22000000
           MVC DDOSVB,=AL2(DDVOLUME+L'DDVOLUME-DDOSVB)                  22010000
           MVC DDOSVB+2(2),=H'0'                                        22020000
           B   C05NXTDD                                           75128 22030000
C24NOTFD JOLERR 403,'CANNOT FIND DATA SET VARIABLE ''',PGMDSID,''''     22040000
           B C05NXTDD          FIND NEXT DDCARD ENTRY                   22050000
C24RETN0   EQU  *                                                       22060000
C24END     EQU  *                                                       22070000
           MVC ILENGTH(2),=AL2(IBODY)                                   22080000
           MVC ICOMMAND,=CL8'END'                                       22090000
           LH  R1,NEST                                                  22100000
           BCTR R1,0                                                    22110000
           STH R1,NEST                                                  22120000
           STC R1,INEST                                                 22130000
         OPINST ILENGTH                                                 22140000
C24SKIPR EQU  *                                                    DASD 22150000
           JOLRETN                                                      22160000
           SPACE 3                                                      22170000
C24OPVR    EQU *                                                  75311 22180000
* OUTPUT VOLREF DSID                                              75311 22190000
         MVI   DDDISP,0        READ, SHR FOR VOLREF               75311 22200019
         MVC DDDISP+1(2),BLANKS  CLEAR OTHER DISPOSITIONS         75311 22210019
         MVC   DDDDNAME(4),=C'$$VR'                               75311 22220019
         UNPK DDDDNAME+4(4),PCKDSTMT                              75311 22230019
         OI    DDDDNAME+7,C'0'                                    75311 22240019
         AP    PCKDSTMT,=P'1'                                     75311 22250019
         MVC   DDOSVB,=AL2(DDSPACE-DDOSVB)                        75311 22260019
         OPINST DDDSNDET                                          75311 22270019
         BR    R10                                                75311 22280019
           DC   S(*,*,*,*)                                              22290006
           DC   S(*),S(*),S(*),S(*)                                     22300000
           DC   S(*),S(*),S(*),S(*)                                     22310000
           DC   S(*),S(*),S(*),S(*)                                     22320000
           DC   S(*),S(*),S(*),S(*)                                     22330000
           DC   S(*),S(*),S(*),S(*)                                     22340000
           DC   S(*),S(*),S(*),S(*)                                     22350000
           DC   S(*),S(*),S(*),S(*)                                     22360000
           DC   S(*),S(*),S(*),S(*)                                     22370000
           DC   S(*),S(*),S(*),S(*)                                     22380000
           DC   S(*),S(*),S(*),S(*)                                     22390000
           DC   S(*),S(*),S(*),S(*)                                     22400000
           DC   S(*),S(*),S(*),S(*)                                     22410000
           DC   S(*),S(*),S(*),S(*)                                     22420000
           DC   S(*),S(*),S(*),S(*)                                     22430000
           DC   S(*),S(*),S(*),S(*)                                     22440000
           DC   S(*),S(*),S(*),S(*)                                     22450000
           DC   S(*),S(*),S(*),S(*)                                     22460000
           DC   S(*),S(*),S(*),S(*)                                     22470000
           DC   S(*),S(*),S(*),S(*)                                     22480000
           DC   S(*),S(*),S(*),S(*)                                     22490000
           DC   S(*),S(*),S(*),S(*)                                     22500000
           DC   S(*),S(*),S(*),S(*)                                     22510000
           DC   S(*),S(*),S(*),S(*)                                     22520000
           DC   S(*),S(*),S(*),S(*)                                     22530000
           DC   S(*),S(*),S(*),S(*)                                     22540000
           DC   S(*),S(*),S(*),S(*)                                     22550000
           DC   S(*),S(*),S(*),S(*)                                     22560000
           DC   S(*),S(*),S(*),S(*)                                     22570000
           DC   S(*),S(*),S(*),S(*)                                     22580000
           DC   S(*),S(*),S(*),S(*)                                     22590000
           SPACE 3                                                      22600000
         JOLSAVE CSECT=UJC35CNT                                         22610000
*                                                                       22620000
* THIS CSECT GETS CONTROL WHEN AN 'OPCNTL' INSTRUCTION IS FOUND         22630000
*                                                                       22640000
* THE FORMAT IS:-                                                       22650000
*                                                                       22660000
*  OPCNTL 'TEXT' AFTER JOBCARD;                                         22670000
*  OPCNTL 'TEXT' BEFORE JOBCARD;                                        22680000
*  OPCNTL 'TEXT';  /* IE WHEREVER WE ARE AT NOW */                      22690000
*                                                                       22700000
* NOW TO SAVE SEARCHING THROUGH A HUGE TABLE JUST BEFORE WE GEN-        22710000
*  ERATE THE JCL, WE ARE GOING TO ALLOW ONLY ONE CNTROL CARD            22720000
*  TO GO OUT BEFORE THE JOBCARD.                                        22730000
* AS WE HAVE TO SEARCH THE TABLE ANYWAY FOR 'SETUP' INFO, IT            22740000
* DOESN'T REALLY MATTER MUCH WHAT WE DO WITH THE OTHERS.                22750000
*                                                                       22760000
* WE WILL ALLOW ONLY ONE **(1)** BEFORE JOBCARD TYPE STATEMENT          22770000
*  TO GO OUT, BUT WE REALLY DON'T CARE HOW MANY GO OUT AFTER.           22780000
* THIS MAY BE CHANGED LATER....                                         22790000
           GETTKN 3                                                     22800000
           CLC =C'BEFORE ',TKN                                          22810000
           BE  C35BEFR                                                  22820000
           CLC =C'AFTER ',TKN                                           22830000
           BE  C35AFT                                                   22840000
           CLI TKN,C' '                                                 22850000
           BE  C35ANY                                                   22860000
           JOLERR 301,'''',#TKN,''' INVALID,''AFTER'' ASSUMMED'         22870000
           B   C35AFT                                                   22880000
           SPACE 2                                                      22890000
C35BEFR    EQU *                                                        22900000
* BEFORE A JOB CARD, WE COULDN'T CARE LESS WHAT TYPE OF CARD            22910000
*  GOES OUT, SO JUST LET IT GO.                                         22920000
           GETTKN 2                                                     22930000
         L     R4,AJOBDETS                                              22940000
         USING JOBDETS,R4                                               22950000
         $CALL UJS98QU,#TKN   DROP DOUBLE QUOTES,SET L'TKN  FIX-X 76200 22960000
           JOLSTOR 'JOB PREFIX CARD',JOBPREF,#TKN                       22970000
         DROP R4                                                        22980000
           B  C35CHK4        CHECK 4TH TOKEN TO BE 'JOBCARD' | ''       22990000
           SPACE 2                                                      23000000
C35AFT     MVI ICOMMAND+6,C'A'                                          23010000
C35ANY   GETTKN 2             GET TEXT AGAIN                      75128 23020000
         $CALL UJS98QU,#TKN   DROP DOUBLE QUOTES,SET L'TKN  FIX-X 76200 23030000
          CLC  #TKN,ZERO   NOTHING TO OUTPUT?                           23040000
           BE  C35RETN                                                  23050000
         CLC   #TKN,=AL2(L'ITEXT-2)                               75128 23060000
           BL  C35AFTOK                                                 23070000
           MVC #TKN,=AL2(L'ITEXT-2)                                     23080000
C35AFTOK   MVC ITEXT,#TKN                                               23090000
           LA  R1,IBODY+2                                               23100000
           AH  R1,#TKN                                                  23110000
           STH R1,ILENGTH                                               23120000
           OPINST INST                                                  23130000
           SPACE 2                                                      23140000
C35CHK4    GETTKN 4                                                     23150000
           CLI TKN,C' '                                                 23160000
           BNE C35CHKJB                                                 23170000
C35RETN    JOLRETN                                                      23180000
C35CHKJB   CLC =C'JOBCARD ',TKN                                         23190000
           BNE C35ERR2                                                  23200000
           JOLRETN                                                      23210000
C35ERR2    JOLERR 302,'''',#TKN,''' INVALID'                            23220000
           JOLRETN RC=16                                                23230000
           LTORG                                                        23240000
           DC S(*,*,*,*)                                                23250000
           DC S(*,*,*,*)                                                23260000
           DC S(*,*,*,*)                                                23270000
           DC S(*,*,*,*)                                                23280000
           DC S(*,*,*,*)                                                23290000
           DC S(*,*,*,*)                                                23300000
           DC S(*,*,*,*)                                                23310000
           DC S(*,*,*,*)                                                23320000
           DC S(*,*,*,*)                                                23330000
           DC S(*,*,*,*)                                                23340000
 TITLE 'UJC50RD:-GET STMT AND PRINT AUTOMATICALLY FORMATTED UPD#XXX'    23350000
           JOLSAVE CSECT=UJC50RD                                        23360000
* THIS CSECT IS THE'READSTMT' CSECT FOR THE MAIN COMPILER MODULE OF JOL 23370000
           SPACE 2                                                      23380000
           USING JOLCOM,R2                                              23390000
           USING TKNX,R3                                                23400000
         L     R4,AGENDETS                                              23410000
         USING GENDETS,R4                                               23420000
           SPACE                                                        23430000
* INITIALISE AND CLEAR A FEW VARIABLES                                  23440000
           CLEAR LABEL,THISPRNT                                   75311 23450000
         MVC   #TKNSTRG(2),ZERO                                         23460000
           SPACE                                                        23470000
* NOW READ A STATEMENT                                                  23480000
C50RDAGN   EQU  *                                                       23490000
*                                                                       23500000
* WE MUST READ THE NEXT RECORD FROM THE BSAM FILE INTO            75128 23510000
*  THE TKNX AREA                                                  75128 23520000
         L     R0,APRCNTL                                         75128 23530000
         LA    R1,#TKNSTRG-12                                     75128 23540000
        $CALL  UJS31IN        READ THE RECORD INTO THE AREA       75128 23550000
         LTR   R15,R15        EOF ?                                     23560000
         BNZ   C50RETNF       YES ->                                    23570000
* NOW SHIFT THE STATEMENT NUMBERS ETC                                   23580000
           MVC STMT,#TKNSTRG-8                                          23590000
           MVC INLINENO,#TKNSTRG-4                                      23600000
           MVC PRINTIND,#TKNSTRG                                        23610000
           MVC ISMACRO,#TKNSTRG+1                                       23620000
           SPACE                                                        23630000
           LH  R1,#TKNSTRG-12                                           23640000
           SH  R1,=H'14'                                                23650000
           STH R1,#TKNSTRG                                              23660000
* NOW SPLIT THE TOKENS AGAIN                                            23670000
C50SPLT2  $CALL UJSPLIT        SPLIT STATEMENT INTO TOKENS        74303 23680000
         LTR   R15,R15           ERROR?                                 23681034
         BZ    C50TKN0         OK ? YES,AWAY WE GO                74303 23690034
         JOLERR 405,'ERROR IN STATEMENT'                          75311 23700034
C50NULL  MVC #TKNSTRG(4),=X'00004040'                                   23710034
         B     C50SPLT2        SET UP NULL STATEMENT              74303 23720034
          SPACE 3                                                       23730000
C50TKN0  EQU *                                                          23740034
           SPACE 1                                                      23750000
* NEW FEATURE 'NPRINT' WILL STOP THE PRINTING OF THE COMPILE      75311 23760000
*    LISTING                                                      75311 23770000
         TM    PARMPRNT,B'00000010' NOLIST ?                      75311 23780034
         BZ    C50LPIND                                           75311 23790034
         MVI PRINTIND,C'1'     TURN OFF PRINT                     75311 23800034
C50CLRTH MVI THISPRNT,C' '     CLEAR THISPRNT                     75311 23810034
         B     C50NPXX                                            75311 23820034
C50LPIND CLI PRINTIND,C' '     DO WE PRINT THIS STMT ?            75311 23830034
         BNE C50CLRTH                                             75311 23840034
         MVI THISPRNT,C'1'     TELL US WE HAVE (WILL?) PRINT      75311 23850034
*                            THIS STATEMENT                       75311 23860034
C50NPXX  EQU *                                                    75311 23870034
           SPACE 3                                                      23880000
* HERE THE TOKENS WERE ALL BEAUTIFULLY SPLIT UP AGAIN,SO NOW PRINT      23890000
*    THE STATEMENT IN SOME SORT OF INDENTED FORMAT.                     23900000
           SPACE 3                                                      23910000
* FIRST SEE IF A LABEL IS PRESENT                                       23920000
           GETTKN NO=2                                                  23930000
           CLI TKN,C':'                                                 23940000
           BNE C50NOLAB                                           74303 23950000
* THERE IS A LABEL,AND IT MUST BE PRINTED ON THE LEFT SIDE              23960000
           GETTKN NO=1         GET THE LABEL                            23970000
           CLI PRINTIND,C' '                   DO WE PRINT THIS STMT?   23980000
           BNE C50MUVLB                                                 23990000
         L     R1,APRINTLN    GET ADDRESS OF PRINT BUFFER        775128 24000000
         MVC   5(4,R1),STMT   SHIFT IN STATEMENT NUMBER           75128 24010000
         MVC   17(20,R1),TKN  NOW FIRST 20 BYTES OF THE TKN       75128 24020000
         LA    R14,17(R1)     SET R14=A(BYTE-'TKN'-STARTS-AT)     75128 24030000
         LH    R15,#TKN       LOAD LENGTH OF TOKEN                75128 24040000
         AR    R14,R15        ADD TO 14                           75128 24050000
         MVI   0(R14),C':'    SHIFT IN ':'                        75128 24060000
         SR    R14,R1         CALC LENGTH OF RECORD               75128 24070000
         LA    R14,1(R14)     ADD 1 FOR THE ':'                   75128 24080000
         STH   R14,0(R1)      STORE IT                            75128 24090000
         JOLPRINT             PRINT LINE                          75128 24100000
         L  R1,APRINTLN                                                 24110000
         MVI 1(R1),17          SET LINE LENGTH                          24120000
C50MUVLB   EQU *                                                        24130000
           MVC LABEL,TKN       SAVE THE LABEL                           24140000
           B   C50RDAGN        READ REST OF STMT                        24150000
C50NOLAB   EQU *                                                  74303 24160000
* ALTHOUGH TKN(2) IS NOT A':' THERE COULD HAVE BEEN A LABEL BECAUSE     24170000
*    WE THEN SHIFTED THE STRING DOWN AND RE-SET UP THE TOKENS AND       24180000
*    WE DON'T WANT THE STATEMENT NUMBER PRINTING TWICE                  24190000
           CLI LABEL,C' '                      LABEL ?                  24200000
           BE  C50PRNTS                        NO,SO START THIS PRINT   24210000
*                                              LINE WILL A STMT NUMBER  24220000
           SPACE                                                        24230000
           B   C50PRNTR                                           74303 24240000
C50PRNTS   EQU *                                                        24250000
           CLI PRINTIND,C' '                   DO WE PRINT THIS STMT?   24260000
           BNE C50PRNTR                                           74303 24270000
         L     R1,APRINTLN         LOAD PRINT BUFFER              75128 24280000
         MVC   5(4,R1),STMT        SHIFT IN STATEMENT NO.         75128 24290000
         MVI   1(R1),17            SET CURRENT LENGTH OF LINE     75128 24300000
C50PRNTR   EQU *                                                  74303 24310000
           SPACE                                                        24320000
* NOW DETERMINE TYPE OF STATEMENT AND PRINT ACCORDINGLY.                24330000
           GETTKN NO=1                                                  24340000
           MVC ICOMMAND,TKN    SET UP COMMAND                           24350000
           CLC =C'DCL ',TKN                                             24360000
           BE  C50DCL                                             74303 24370000
           CLC =C'DECLARE ',TKN                                         24380000
           BE  C50DCL                                             74303 24390000
           CLC =C'DEFINE ',TKN                                          24400000
           BE  C50DCL                                             74303 24410000
           SPACE 3                                                      24420000
* NOW IT IS NOT A DECLARE.                                              24430000
* TEST STARTAT AND STOPAT.                                        76200 24440000
* NOTE STARTAT WAS INCLUDED IN VERSION 3.0 BUT NOW IS MOVED       76200 24450000
*        SO THAT WE CAN CHECK IF THE LABEL WAS FOUND ON           76200 24460000
*        A DECLARE, IN WHICH CASE WE WILL ISSUE AN ERROR          76200 24470000
*        MESSAGE BUT NOT TAKE THE LABEL AS BEING THE STARTAT      76200 24480000
* STOPAT IS NEW FOR 3.1, AND A CHECK IS ALSO MADE TO SEE THAT     76200 24490000
*        IT IS NOT ON A DECLARE STATEMENT.                        76200 24500000
         SPACE 1                                                        24510000
         IFNULL LABEL,C50NST  NO LABEL ON THIS STMT      CHG30074 76200 24520000
         CLC   STOPAT,LABEL   ?                          JOL30008 76200 24530000
         BNE   C50TSTRT       NO,TEST STARTAT THEN       JOL30008 76200 24540000
         MVI   STOPAT,X'FF'   INDICATE WE GOT IT         JOL30008 76200 24550000
         B     C50NST                                    JOL30008 76200 24560000
C50TSTRT CLC   STARTAT,LABEL  IS THIS STARTAT LABEL ?    CHG30074 76200 24570000
         BNE   C50NST         NOPE                       CHG30074 76200 24580000
         CLEAR STARTAT        YES, CLEAR IT              CHG30074 76200 24590000
C50NST   EQU    *                                                       24600000
           CLC =C'END ',TKN                                             24610000
           BNE C50TRYDO                                           74303 24620000
* END STATEMENT MUST BE PRINTED                                         24630000
           LH R6,NEST                                                   24640000
           SH R6,=H'1'                                                  24650000
           BNM C50END1                                            74303 24660000
           SR R6,R6                                                     24670000
C50END1    EQU *                                                  74303 24680000
           CLI PRINTIND,C' '                   DO WE PRINT THIS STMT?   24690000
           BNE C50PORD                                            74303 24700000
C50END2    EQU *                                                  74303 24710000
         L     R1,APRINTLN    LOAD PRINT BUFFER                   75128 24720000
         LH    R15,0(R1)      GET CURRENT LENGTH                  75128 24730000
         LA    R15,4(R15)     ADD 4                               75128 24740000
         STH   R15,0(R1)      STORE IT                            75128 24750000
         SPACE 2                                                  75128 24760000
           SH  R6,=H'1'                                                 24770000
           BM  C50PORD                                            74303 24780000
           B   C50END2                                            74303 24790000
           B   C50PORD                                            74303 24800000
           SPACE 3                                                      24810000
C50TRYDO   EQU *                                                  74303 24820000
* NOW HERE IT IS EITHER A 'DO' OR AN ORDINARY STATMENT.                 24830000
*    IN ANY CASE IT IS ESSENTIAL TO POSITION THE PRINT LINE THE RIGHT   24840000
*    AMOUNT OF 'INDENTNESS'.                                            24850000
* IF IT IS A'DO' THEN AFTER PRINTING SOME BLANKS IT IS A SIMPLE         24860000
*    MATTER TO ADD 1 TO 'DOLEVEL'                                       24870000
           LH  R6,NEST                                                  24880000
           LA R6,1(R6)                                                  24890000
POSNPRNT   EQU *                                                        24900000
           CLI PRINTIND,C' '                   DO WE PRINT THIS STMT?   24910000
           BNE C50TDO2                                            74303 24920000
         L     R1,APRINTLN    ADDRESS PRINT BUFFER                75128 24930000
         LH    R15,0(R1)                                          75128 24940000
         LA    R15,4(R15)                                         75128 24950000
         STH   R15,0(R1)                                          75128 24960000
         SPACE 3                                                  75128 24970000
           BCT R6,POSNPRNT                                              24980000
* NOW CHECK IF'DO';                                                     24990000
C50TDO2    EQU *                                                  74303 25000000
           CLC =C'DO ',TKN                                              25010000
           BNE C50PORD                                            74303 25020000
           LH  R1,NEST                                                  25030000
           LA  R1,1(R1)                                                 25040000
           B   C50PORD                                            74303 25050000
           SPACE 3                                                      25060000
C50DCL     EQU *                                                  74303 25070000
*LETS CHECK IF STARTATNEWSTOPAT IS FOUND ON THIS DECLARE.CHG30074 76200 25080000
         IFNULL LABEL,C50DCLNL NO LABEL, BYPASS THIS     CHG30074 76200 25090000
         CLC   STARTAT,LABEL                             CHG30074 76200 25100000
         BE    C50ERRST                                  CHG30074 76200 25110000
         CLC   STOPAT,LABEL                              CHG30074 76200 25120000
         BNE   C50DCLNL                                  CHG30074 76200 25130000
C50ERRST JOLERR 101,'LABEL ''',LABEL,''' IGNORED FOR STARTAT/STOPAT'    25140000
C50DCLNL EQU   *                                                        25150000
* NOW DECLARES ARE PRINTED OFFSETTED A LITTLE.                          25160000
           CLI PRINTIND,C' '                   DO WE PRINT THIS STMT?   25170000
           BNE C50TKN1G ONE                                             25180000
         L     R1,APRINTLN    LOAD A(PRINT LINE)                  75128 25190000
         LH    R15,0(R1)      GET CURRENT LINE LENGTH             75128 25200000
         LA    R15,4(R15)     ADD 4 BLANKS                        75128 25210000
         LA    R14,0(R15,R1)  CALC POINTER TO NEXT LOCN           75128 25220000
         AH    R15,#TKN       ADD LENGTH OF CURRENT TOKEN         75128 25230000
         STH   R15,0(R1)      RESET LENGTH                        75128 25240000
         MVC   0(20,R14),TKN  SHIFT IN 20 BYTES OF TOKEN          75128 25250000
           B  C50TKN1G GONE IT HAS                                      25260000
           SPACE 3                                                      25270000
C50PORD    EQU *                                                  74303 25280000
* SO FAR ALL I'VE REALLY ACCOMPLISHED IS PRINT THE LABEL (IF THERE WAS  25290000
*    ONE) AND POSITION THE FILE SOMEWHERE NEAR WHERE I WANT TO START    25300000
*    PRINTING.                                                          25310000
* SO LET'S PRINT THE OLE STATEMENT.                                     25320000
           SPACE                                                        25330000
           CLI PRINTIND,C' '                   DO WE PRINT THIS STMT?   25340000
           BNE C50TKN1G ONE                                             25350000
         L     R1,APRINTLN    GET A(PRINTBUF)                     75128 25360000
         LH    R15,0(R1)      GET CURRENT LENGTH OF LINE          75128 25370000
         LA    R14,0(R1,R15)  R14= R15+R1                         75128 25380000
         MVC   0(20,R14),TKN  SHIFT 20 BYTES OF TOKEN             75128 25390000
         AH    R15,#TKN       RESET LENGTH                        75128 25400000
         STH   R15,0(R1)       LENGTH                             75128 25410000
* THERE,TOKEN(1) HAS GONE                                               25420000
* NOW BASICALLY THIS IS A SIMPLE LITTLE LOOP GOING ROUND AND ROUND      25430000
*    UNTIL ALL THE TOKENS HAVE BEEN PRINTED                             25440000
* THERE ARE HOWEVER TWO COMPLICATIONS IN THE PRINTING.                  25450000
*    1. SPECIAL CHARACTERS ON EITHER SIDE OF A TOKEN DO NOT WARRANT     25460000
*          A BLANK BETWEEN THEM                                         25470000
*    2. IF THE STATEMENT IS'A DECLARE X PROG' THEN EVERY 'READS' |      25480000
*          'WRITES' LINE DESERVES A LINE FEED.                          25490000
* NOW BEFORE I REALLY GET GOING,TWOULD BE NICE TO BE ABLE TO REFERENCE  25500000
*    TOKENS 1,2,3 EASILY                                                25510000
* REGISTERS 7,8,9 WILL BE SET UP WITH THE ADDRESSES OF THE STARTING     25520000
*    POINTS OF THESE TOKENS (BUT NOT THE LENGTH:-IF A CLC TO A LITERAL  25530000
*    GIVES AN INCORRECT RESULT THAT IS TOUGH BUT TERRIBLY UNLIKELY)     25540000
           SPACE                                                        25550000
C50TKN1G    EQU *                                                       25560000
           CLI PRINTIND,C' '                   DO WE PRINT THIS STMT?   25570000
           BNE C50RETN0                                                 25580000
           LH  R7,TKNDESC+2                    GET OFFSET TKN(1)        25590000
           LH  R8,TKNDESC+2+4                  GET OFFSET TKN(2)        25600000
           LH  R9,TKNDESC+2+4+4                GET OFFSET TKN(3)        25610000
           LA  R15,TKNSTRG                     ABSOLUTE ADDRESS OF STRN 25620000
           AR  R7,R15                          CALC ABSOL ADDR TKN(1)   25630000
           AR  R8,R15                          CALC ABSOL ADDR TKN(2)   25640000
           AR  R9,R15                          CALC ABSOL ADDR TKN(3)   25650000
* NOW SET PREVIOUS TOKEN TYPE INTO R6 SO WE CAN CHECK THEM TO BE        25660000
*    SPECIAL OR NON-SPECIAL TOKENS FOR THE ONE INSERTED BLANK MENTIONED 25670000
*    WAY BACK SOMEWHERE                                                 25680000
           MVC TKNCURR,=H'2'                   GET 2ND TOKEN            25690000
           SR  R6,R6                                                    25700000
           SR R10,R10                          LAST TKN HELD HERE       25710000
*                                              SO '&' & '|' ARE         25720000
*                                              PRINTED WITH A BLANK     25730000
*                                              BETWEEN THEM             25740000
C50GETNX   IC  R6,TKNTYPE                      SAVE TKNTYPE(LAST) 74303 25750000
* GET TKN(X)                                                            25760000
           IC R10,TKN                          SAVE 1ST BIT OF TKN      25770000
           CLC  TKNCURR,TKNNO                  REACHED END OF STACK?    25780000
           BH  UJC50END                         YEP,-> RETURN           25790000
           GETTKN LOCN=TKNCURR                                          25800000
           STH R1,TKNCURR                                               25810000
* NOW CALC ADDRESS OF THE NEXT TOKEN SO I CAN LOOK TO SEE IF IT IS      25820000
*    A'READS' | 'WRITES'                                                25830000
           SLL R1,2                            * 4                      25840000
           LH  R1,TKNDESC+2-4(R1)              OFFSET NEXT TOKEN        25850000
           LA  R1,TKNSTRG(R1)                  ABSOLUTE ADDR.           25860000
* NOW SEE IF WE ARE DEALING WITH A 'DCL X PROG'                         25870000
           CLC =C'DCL',0(R7)                                            25880000
           BE  C50ISDCL                                           74303 25890000
           CLC =C'DECLARE',0(R7)                                        25900000
           BE  C50ISDCL                                           74303 25910000
           CLC =C'DEFINE',0(R7)                                         25920000
           BE  C50ISDCL                                           74303 25930000
* WELL IT ISN'T A DECLARE SO NOW CHECK IF EITHER THIS TOKEN OR THE      25940000
*    PREVIOUS TOKENS ARE SPECIAL CHARACTERS.                            25950000
**** NOTE THE SYMBOLS '|' OR '&' ARE ALWAYS PRINTED WITH A BLANK        25960000
*     ON EITHER SIDE                                                    25970000
C50PRTKN   EQU *                                                  74303 25980000
           CLI  TKN,C'|'                       THIS TOKEN AN '|' SYM ?  25990000
           BE C50NOTSP ECIAL                   YEP,LEAVE ABLANK         26000000
           CLI  TKN,C'&&'                      THIS TOKEN AN '&' SYM ?  26010000
           BE C50NOTSP ECIAL                   YEP,LEAVE ABLANK         26020000
* NOW CKECK IF LAST TOKEN WAS A '|' OR '&'                              26030000
           CH  R10,=H'79'                      '|' ?                    26040000
           BE C50NOTSP ECIAL                   YEP,LEAVE ABLANK         26050000
           CH  R10,=H'80'                      '&' ?                    26060000
           BE C50NOTSP ECIAL                   YEP,LEAVE ABLANK         26070000
           CLI TKNTYPE,1                       THIS TOKEN SPECIAL ?     26080000
           BE  C50SPEC                                            74303 26090000
           CH  R6,=H'1'                        LAST ONE SPECIAL ?       26100000
           BE  C50SPEC                                            74303 26110000
* WELL NEITHER ONE SPECIAL,SO PRINT WILL A BLANK PRECEDING IT.          26120000
         L     R1,APRINTLN    LOAD A(PRINTBUF)                    75128 26130000
         LH    R15,0(R1)      LOAD CURRENT LENGTH                 75128 26140000
         LA    R15,1(R15)     ADD 1 (SHIFT A BLANK,EFFECTIVELY)   75128 26150000
         STH   R15,0(R1)      RESTORE                             75128 26160000
C50NOTSP   EQU  *                                                       26170000
           BAL R12,C50TFIT                     WILL IT FIT ON LINE  ?   26180000
           B   C50GETNX                                           74303 26190000
C50SPEC    EQU *                                                  74303 26200000
           BAL R12,C50TFIT                     WILL IT FIT ON LINE  ?   26210000
           B   C50GETNX                                           74303 26220000
           SPACE 3                                                      26230000
C50ISDCL   EQU *                                                  74303 26240000
* NOW SEE IF'DCL X PROG'                                                26250000
           CLC =C'PROG',0(R9)                  DCL PROG ?               26260000
           BNE C50PRTKN                        NO,JUST PRINT TOKEN74303 26270000
* SO HERE IT IS 'DCL X PROG'                                            26280000
*    IF THE NEXT TOKEN (I.E THE ONE NOW ADDRESSED BY R1)                26290000
*    IS:-  1.  READS                                                    26300000
*          2.  WRITES                                                   26310000
*          3.  MODS                                                     26320000
*          4.  REWRITES                                                 26330000
*          5.  UPDATES                                                  26340000
*          6.  CREATES                                                  26350000
*    THEN A NEW LINE MUST BE STARTED                                    26360000
           CLC =C'READS ',0(R1)                                         26370000
           BE  C50NEWLN                                           74303 26380000
           CLC =C'WRITES ',0(R1)                                        26390000
           BE  C50NEWLN                                           74303 26400000
         CLC =C'MODS ',0(R1)                                            26410032
         BE    C50NEWLN                                           74303 26420032
         CLC =C'REWRITES ',0(R1)                                        26430032
         BE    C50NEWLN                                           74303 26440032
         CLC =C'UPDATES',0(R1)                                          26450032
         BE    C50NEWLN                                           74303 26460032
         CLC =C'CREATES ',0(R1)                                         26470032
         BE    C50NEWLN                                           74303 26480032
         CLC =C'ADDS ',0(R1)                                      86200 26481032
         BE    C50NEWLN                                           74303 26482032
         CLC   =C'MAY ',0(R1)                                     75128 26490000
         BE    C50NEWLN                                           75128 26500000
         CLC =C'USES ',0(R1)                                            26510000
         BE  C50NEWLN                                                   26520000
         B     C50PRTKN        OK,JUST PRINT IT                   74303 26530032
         SPACE                                                          26540032
C50NEWLN EQU *                                                    74303 26550032
         JOLPRINT                                                 75128 26560000
         L    R1,APRINTLN                                               26570032
         MVI 1(R1),30                                                   26580032
         BAL   R12,C50TFIT                                        75128 26590000
         B     C50GETNX                                           74303 26600032
UJC50END JOLPRINT                                                 75128 26610000
C50RETN0 EQU    *                                                       26620032
         LH R1,TKNNO                                                    26630032
         SH R1,=H'1'                                                    26640032
         BM    C50SR15                                                  26650032
         STH R1,TKNNO                                                   26660032
         SLL R1,2                                                       26670032
         LH    R15,TKNDESC+2(R1)                                        26680032
         LA    R15,TKNSTRG(R15)                                         26690032
         CLI 0(R15),C';'                                                26700032
         BNE C50SR15                                                    26710032
         SR R14,R14                                                     26720032
         ST R14,TKNDESC(R1)                                             26730032
         MVI 0(R15),C' '                                                26740032
C50SR15  JOLRETN RC=0                                             74303 26750032
C50RETNF JOLRETN RC=4                                             74303 26760032
         SPACE 3                                                        26770032
C50TFIT  EQU *                                                          26780032
* THIS LITTLE ROUTINE TESTS THAT THE TKN TO BE PRINTED WILL FIT         26790000
*      ON THE CURRENT LINE, AND PRINTS THE CURRENT TOKEN          75128 26800032
       L       R1,APRINTLN    LOAD A(PRINTBUF)                    75128 26810032
         LH    R15,0(R1)      GET CURRENT LINE POSITION           75128 26820000
         LH    R14,#TKN       LOAD LENGTH OF TOKEN TO GO OUT      75128 26830000
         AR    R15,R14        ADD CURRENT + L'TKN                 75128 26840000
         CH    R15,=H'120'    WILL IT FIT ON LINE ?               75128 26850000
         BH    C50NEWL        NO                                  75128 26860000
C50WILLG STH   R15,0(R1)                                          75128 26870000
         AR    R15,R1         CALC ABS ADDR OF NEXT PRINT BYTE    75128 26880000
         SR    R15,R14        COS WE ARE TOO HIGH                 75128 26890000
         EX    R14,C50MVC9    SHIFT TOKEN                         75128 26900000
         BR    R12            AND RETURN                          75128 26910000
         SPACE 3                                                  75128 26920000
C50NEWL  JOLPRINT             PRINT THE LINE CURRENTLY THERE      75128 26930000
         L     R1,APRINTLN    A(PRINT BUF)                        75128 26940000
         LH    R14,#TKN       LOAD LENGTH OF TOKEN NOW            75128 26950000
         LA    R15,26         CURRENT LENGTH OF LINE              75128 26960000
         AR    R15,R14        ADD L'TKN + CURRENT LINE LENGTH     75128 26970000
         CH    R15,=H'120'    WILL IT FIT IN LINE NOW ?           75128 26980000
         BNH   C50WILLG       YES                                 75128 26990000
* HERE, A NEW LINE HAS BEEN PRINTED BECAUSE THE TOKEN WON'T FIT   75128 27000000
*  AND STILL IT WON'T FIT, THEREFORE IT IS A LONG ONE.            75128 27010000
* WE MUST SHIFT AS MUCH AS WILL FIT, AND PRINT IT, THEN PRINT     75128 27020000
*  THE REST.                                                            27030000
         MVI   1(R1),125      SET LINE AT MAXIMUM                 75128 27040000
         AR    R15,R1         CALC NEXT BYTE TO SHIFT DATA INTO   75128 27050000
         MVC   5(120-26,R1),TKN SHIFT DATA IN             JOL3080 76200 27060000
         MVC   TKN,TKN+120-26 SHIFT TKN STRING ALONG              75128 27070000
         LH    R1,#TKN                                            75128 27080000
         SH    R1,=AL2(120-26) RESET LENGTH                       75128 27090000
         STH   R1,#TKN                                            75128 27100000
         B     C50NEWL        AND ROUND LOOP AGAIN                75128 27110000
         DROP  R4                                                       27120000
C50MVC9  MVC   0(*-*,R15),TKN    EXECUTED                         75128 27130000
         SPACE 3                                                        27140000
           DC S(*),S(*),S(*),S(*)                                       27150000
           DC S(*),S(*),S(*),S(*)                                       27160000
           DC S(*),S(*),S(*),S(*)                                       27170000
           DC S(*),S(*),S(*),S(*)                                       27180000
           DC S(*),S(*),S(*),S(*)                                       27190000
           DC S(*),S(*),S(*),S(*)                                       27200000
           DC S(*),S(*),S(*),S(*)                                       27210000
           DC S(*),S(*),S(*),S(*)                                       27220000
           DC S(*),S(*),S(*),S(*)                                       27230000
           DC S(*),S(*),S(*),S(*)                                       27240000
           DC S(*),S(*),S(*),S(*)                                       27250000
           DC S(*),S(*),S(*),S(*)                                       27260000
           DC S(*),S(*),S(*),S(*)                                       27270000
           DC S(*),S(*),S(*),S(*)                                       27280000
           LTORG                                                        27290000
       END                                                              27750000
